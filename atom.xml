<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmbeddedDevelop</title>
  
  <subtitle>作者：strongerHuang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.strongerhuang.com/"/>
  <updated>2018-12-11T07:49:26.962Z</updated>
  <id>http://www.strongerhuang.com/</id>
  
  <author>
    <name>strongerHuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Keil系列教程</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程.html</id>
    <published>2018-12-11T08:30:00.000Z</published>
    <updated>2018-12-11T07:49:26.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【Keil系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【Keil系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C.html">Keil系列教程01_Keil介绍、下载、安装与注册</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">Keil系列教程02_新建基础软件工程</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">Keil系列教程03_主窗口和工具栏详细说明</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">Keil系列教程04_菜单概述</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程05_工程目标选项配置（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程06_工程目标选项配置（二）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程07_Configuration（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程08_Configuration（二）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F.html">Keil系列教程09_调试仿真</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0.html">Keil系列教程10_文件类型及相关描述</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E.html">Keil系列教程11_工程窗口图标说明</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90.html">Keil系列教程12_map文件全面解析</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B.html">Keil系列教程13_创建多目标工程</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【Keil系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【EmbeddedDevelop】&lt;/a&gt;，关注微信公众号回复【Keil系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程13_创建多目标工程</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程13_创建多目标工程.html</id>
    <published>2018-12-11T08:00:00.000Z</published>
    <updated>2018-12-11T09:47:34.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>相信大家都看到过带有<strong>Debug和Release</strong>两个不同目标的工程。</p><p>比如：大家熟知的VC、IAR创建工程时，默认会有这么两个<strong>Debug和Release</strong>“目标”。</p><p>还比如：我们使用Keil打开STM32的IAP例程，会看见类似如下图（多目标）的工程：</p><a id="more"></a><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/1.IAP%E7%9A%84%E5%A4%9A%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>你想过为什么会有Debug和Release，及IAP这样的多目标工程吗？ 请继续往下看。</p><h1 id="二、什么是多目标工程？"><a href="#二、什么是多目标工程？" class="headerlink" title="二、什么是多目标工程？"></a>二、什么是多目标工程？</h1><p>简单的说：就是有多个目标的工程。</p><p>在Keil中，需要理解几个名词：<strong>工作空间、工程、目标</strong>。</p><p>该教程<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">《Keil系列教程05_工程目标选项配置（一）》</a>有讲述这三个名词的含义和区别。简单的说就是一种包含关系，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/4.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E3%80%81%E5%B7%A5%E7%A8%8B%E3%80%81%E7%9B%AE%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png?raw=true"><br></table><h1 id="三、为什么要创建多目标的工程"><a href="#三、为什么要创建多目标的工程" class="headerlink" title="三、为什么要创建多目标的工程"></a>三、为什么要创建多目标的工程</h1><p>我们只有带着问题去学习，才会更加容易学会知识。创建多目标工程在实际应用中比较常见，且有着重大意义。下面举两个大家熟悉的例子（文末提供下载链接）。</p><h2 id="3-1-Debug和Release"><a href="#3-1-Debug和Release" class="headerlink" title="3.1 Debug和Release"></a>3.1 Debug和Release</h2><p>开篇说了，在我们熟悉的VC和IAR开发环境中默认就有Debug和Release两个工程目标。但很多人却不知道他们的区别。</p><p>两个目标的区别：<br><strong>Debug（调试）</strong>：主要用于调试使用，包含调试信息。<br><strong>Release（释放）</strong>：主要用于生成（正式）程序文件（如：Hex，Bin等），不包含调试信息。</p><p>当我们平时调试的时候就用Debug目标。调试好之后，生成程序文件，使用Release目标。使用Release目标的好处在于<strong>没有调试信息，编译速度也比较快</strong>。</p><h2 id="3-2-不同版本产品"><a href="#3-2-不同版本产品" class="headerlink" title="3.2 不同版本产品"></a>3.2 不同版本产品</h2><p>假如我们开发一款产品，有两个版本：<strong>低级版（Low）和高级版（High）</strong>。</p><p>这两个版本在功能上大体相同，但在硬件或软件上有略微差异。此时，就需要建立多目标工程。</p><p>比如：低级版我们使用STM32F103R8，高级版使用STM32F103ZE，且高级版多了一些显示的功能。</p><p>多目标工程的应用在不同场景下要求不同，所以，还有很多种可能。</p><h2 id="3-3-多目标工程主要意义"><a href="#3-3-多目标工程主要意义" class="headerlink" title="3.3 多目标工程主要意义"></a>3.3 多目标工程主要意义</h2><p>假如上面Debug和Release使用两个独立的工程，我们每修改Debug一个地方，那么Release也会进行相应修改。</p><p>如果我们都在一个工程里面进行编辑代码、管理工程，那么就不会出现上面重复的问题。</p><p>因此，多目标工程主要意义在于<strong>方便管理工程</strong>。</p><p><strong>提示：</strong>这些不同的目标，区别在于<strong>目标选项配置不同</strong>。</p><h1 id="四、如何创建多目标工程"><a href="#四、如何创建多目标工程" class="headerlink" title="四、如何创建多目标工程"></a>四、如何创建多目标工程</h1><p>上面让大家大概了解了一下多目标相关的知识，多目标存在的差异主要在于<strong>“Target目标”选项配置</strong>上有一定差异。</p><p>这里需要大家对<strong>工程目标选项配置</strong>有一定的了解，可以参看该教程文章：<br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程05_工程目标选项配置（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程06_工程目标选项配置（二）</a></p><p>下面结合上一章节Debug和Release、不同版本产品例子来讲述创建多目标需要修改那些配置。</p><h2 id="4-1-新建目标"><a href="#4-1-新建目标" class="headerlink" title="4.1 新建目标"></a>4.1 新建目标</h2><p>在该教程<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">《Keil系列教程02_新建基础软件工程》</a>中新建的基础工程，其实就是只有一个目标的工程。</p><p>接下来就在该工程基础上新建一个目标，首先进入工程管理界面：<strong>Project -&gt; Manage -&gt; Project Items</strong>，或点击<strong>工程管理快捷图标</strong>，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/2.%E6%96%B0%E5%BB%BA%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>假如我们的基础工程为Debug，<strong>点击新建目标</strong>（如图虚线方框）按钮，就新增一个目标，我们将新建的目标命名为Release（输入Release）。</p><p>新建之后，就会出现上面截图中Debug和Release两个目标。此时，<strong>Release目标只是Debug的一个拷贝</strong>，也就说Debug和Release两个目标的各项配置一样。只是名称不一样而已。</p><p>这里只是新增了一个Release目标，还需要进一步修改其中的配置。大体分为：<strong>工程管理、文件选项配置、（Group）组选项配置、目标选项配置</strong>。</p><p><strong>提示：</strong>以上四项内容不一定全都修改，不同需求，修改地方不同，一般需要修改的地方不多。</p><h2 id="4-2-工程管理"><a href="#4-2-工程管理" class="headerlink" title="4.2 工程管理"></a>4.2 工程管理</h2><p>工程管理里面Project Items下面的Groups组、Files文件都是公用的一套。<br>比如：我工程中有两个目标，分别用STM32F103R8、103ZE，则需要包含startup_stm32f10x_md.s和10x_hd.s。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/3.%E5%85%AC%E7%94%A8Groups%E5%92%8CFiles.png?raw=true"><br></table><p>这里公用的的意思：只要工程（目标）用到的<strong>Groups或Files</strong>，都需要添加到进去，会在工程中呈现出来。</p><p>但是，不同的目标，用到的Groups或Files不一样。在该目标中不需要的Groups或Files需要配置成“不包含”（下面讲述）。</p><p>比如：STM32F103R8_Low目标，只用startup_stm32f10x_md.s，因此需要<strong>将startup_stm32f10x_hd.s排除（不包含）该目标</strong>。</p><p><strong>Folders/Extension文件/扩展、Books书籍</strong>一般不需要配置，选择默认即可。</p><h2 id="4-3-文件选项配置"><a href="#4-3-文件选项配置" class="headerlink" title="4.3 文件选项配置"></a>4.3 文件选项配置</h2><p>接下来的文件、组、目标选项配置都需要<strong>事先选择需要配置的目标</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/4.%E9%80%89%E6%8B%A9%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>上面说的，我们选择STM32F103R8_Low目标，需要将startup_stm32f10x_hd.s排除（不包含）该目标。</p><p>选中文件startup_stm32f10x_hd.s -&gt; 右键 -&gt; Options for File进入文件选项配置：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/5.%E9%80%89%E4%B8%AD%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%B3%E9%94%AE.png?raw=true"><br></table><table><br><strong>目标文件选项配置：</strong>不包含startup_stm32f10x_hd.s<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/6.%E6%96%87%E4%BB%B6%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>上面不包含文件只是最简答、最常见的一种文件选项配置，有些应用会要求代码存储在外部ROM，或RAM执行，就需要修改下面的<strong>Memory Assignment内存分配</strong>。</p><p>同时针对汇编，或C/C++源文件还有更多选项需要配置：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/7.%E6%B1%87%E7%BC%96%E6%BA%90%E6%96%87%E4%BB%B6%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/8.C%EF%BC%8CC++%E6%BA%90%E6%96%87%E4%BB%B6%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>这里<strong>汇编、C/C++源文件</strong>的选项配置请参看“Keil系列教程06”C/C++和Asm章节。</p><p><strong>提示：</strong>这里面的选项配置是<strong>针对选中的单个File文件</strong>。</p><h2 id="4-4-组选项配置"><a href="#4-4-组选项配置" class="headerlink" title="4.4 组选项配置"></a>4.4 组选项配置</h2><p>这里组选项配置和上面文件选项配置原理类似，只是这里针对的是Group组。</p><p>比如：我们工程中一个目标用STM32F1，一个目标用STM32F4，则包含的库文件组就不同，需要<strong>“不包含”其中一组，或者把库文件组编译在外部ROM，再或者把该组编译优先级提高等</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/9.%E7%BB%84%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p><strong>提示：</strong>这里面的选项配置是<strong>针对选中Group组</strong>。</p><h2 id="4-5-目标选项配置"><a href="#4-5-目标选项配置" class="headerlink" title="4.5 目标选项配置"></a>4.5 目标选项配置</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/10.%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>Release目标相比Debug目标，一般会少输出一些调试信息，如上图，<strong>不输出Debug信息，浏览信息（Go to Definition）等</strong>。这样一来，编译速度至少快一倍。</p><p>同时，针对Debug，可能会在<strong>代码中</strong>添加一些自己的打印调试信息，通过<strong>预定义DEBUG</strong>来控制开启。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/11.%E9%A2%84%E5%AE%9A%E4%B9%89DEBUG.png?raw=true"><br></table><p>目标选项配置的内容，想必大家再熟悉不过了，我们之前的一些常规配置就是目标选项配置，请参看：<br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程05_工程目标选项配置（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程06_工程目标选项配置（二）</a></p><p><strong>提示：</strong>这里面的选项配置是<strong>针对选中的目标</strong>。</p><p>以上四项内容就是针对目标，及目标下面组和文件的选项配置。写的比较粗略，但大部分内容都已经该教程05和06中写过，上面也引导大家查看相关内容。</p><p>不同应用环境，其修改的内容不同，结合实际应用修改相关配置即可。</p><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p>为方便大家学习，我这里提供可直接编译运行的源代码工程供大家下载。包含两个工程：Debug-Release和Diff-Version，下面分别有两个不同的目标。</p><p>百度网盘下载地址：<a href="https://pan.baidu.com/s/1iQiawcpVd8bvgyy0nQhLEQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1iQiawcpVd8bvgyy0nQhLEQ</a><br>密码：34hg</p><p>GitHub下载地址：<a href="https://github.com/EmbeddedDevelop/Keil-MDK-ARM_Multi-Target.git" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop/Keil-MDK-ARM_Multi-Target.git</a></p><p>（提示：下载链接后期可能会失效， 请关注微信公众号获取最新消息）</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;相信大家都看到过带有&lt;strong&gt;Debug和Release&lt;/strong&gt;两个不同目标的工程。&lt;/p&gt;
&lt;p&gt;比如：大家熟知的VC、IAR创建工程时，默认会有这么两个&lt;strong&gt;Debug和Release&lt;/strong&gt;“目标”。&lt;/p&gt;
&lt;p&gt;还比如：我们使用Keil打开STM32的IAP例程，会看见类似如下图（多目标）的工程：&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程12_map文件全面解析</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程12_map文件全面解析.html</id>
    <published>2018-12-07T09:00:00.000Z</published>
    <updated>2018-12-08T06:42:17.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p><strong>什么是map文件？</strong></p><p>简单的说：map文件是通过编译器编译之后，集程序、数据及IO空间的一种映射文件。</p><p>很多技术牛逼的工程师在遇到<strong>内存越界，或溢出的情况</strong>，首先想到的就是分析map文件。通过map文件可以知道函数大小，入口地址等一些重要信息。</p><p>我们在Keil中最常见的就是在编译之后，编译窗口会显示类似如下一段关于程序和数据大小的信息：<br><strong>Program Size: Code=1112 RO-data=320 RW-data=0 ZI-data=1632</strong></p><p>这一段提示信息其实是汇总了程序和数据的信息，这些信息其实是单个模块汇总而成，在map文件里有详细列表。</p><a id="more"></a><h1 id="二、关于Keil中的map文件"><a href="#二、关于Keil中的map文件" class="headerlink" title="二、关于Keil中的map文件"></a>二、关于Keil中的map文件</h1><h2 id="2-1-如何打开map文件"><a href="#2-1-如何打开map文件" class="headerlink" title="2.1 如何打开map文件"></a>2.1 如何打开map文件</h2><p>最直接，也是最简单的办法：<strong>双击工程目标，出现map文件</strong>（注意，双击的是工程目标，不要双击工程，或文件组）。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/1.%E5%8F%8C%E5%87%BB%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%EF%BC%8C%E5%87%BA%E7%8E%B0map%E6%96%87%E4%BB%B6.gif?raw=true"><br></table><p>当然，可以找到map文件位置（Listings文件夹），用编辑器工具打开。</p><h2 id="2-2-map文件输出内容配置"><a href="#2-2-map文件输出内容配置" class="headerlink" title="2.2 map文件输出内容配置"></a>2.2 map文件输出内容配置</h2><p>在之前文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">《Keil系列教程05_工程目标选项配置（一）》</a>中的Listing 列表章节有提到map文件。</p><p>map文件输出信息的配置位于：Project -&gt; Options for Target -&gt; Listing，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/2.map%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>主要包含配置：<br><strong>Memory Map：</strong>内存映射<br><strong>Callgraph：</strong>图像映射</p><p><strong>Symbols：</strong>符号<br><strong>Cross Reference：</strong>交叉引用</p><p><strong>Size Info：</strong>大小信息<br><strong>Totals Info：</strong>统计信息<br><strong>Unused Section Info：</strong>未调用模块信息<br><strong>Veneers Info：</strong>装饰信息</p><p>我们可根据自己情况，想要输出什么信息，勾选对应信息即可。</p><p><strong>提示：</strong><br>A.默认情况，输出所有信息；<br>B.这些配置是一个组合关系；</p><h2 id="2-3-map文件内容分类"><a href="#2-3-map文件内容分类" class="headerlink" title="2.3 map文件内容分类"></a>2.3 map文件内容分类</h2><p>从上面输出配置可以看得出来map文件大概包含了哪些信息。map文件将其分为如下五大类：<br><strong>1.Section Cross References：</strong>模块、段(入口)交叉引用</p><p><strong>2.Removing Unused input sections from the image：</strong>移除未调用模块</p><p><strong>3.Image Symbol Table：</strong>映射符号表</p><p><strong>4.Memory Map of the image：</strong>内存（映射）分布</p><p><strong>5.Image component sizes：</strong>存储组成大小</p><p>下面章节针对Keil DMK-ARM、 ARM Compiler 5组件生成的map文件五大类内容展开详细讲述。</p><h1 id="三、Section-Cross-References"><a href="#三、Section-Cross-References" class="headerlink" title="三、Section Cross References"></a>三、Section Cross References</h1><p><strong>Section Cross References：</strong>模块、段(入口)交叉引用<br>配置中需勾选：<strong>Cross Reference</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/3.Section%20Cross%20References.png?raw=true"><br></table><p><strong>Section Cross References：</strong>模块、段(入口)交叉引用，指的是各个源文件生成的模块、段（定义的入口）之间相互引用的关系。</p><p>比如：<br><strong>main.o(i.System_Initializes) refers to bsp.o(i.BSP_Initializes) for BSP_Initializes</strong></p><p>意思是：<br>main模块(main.o)中的System_Initializes函数(i.System_Initializes)，引用（或者说调用）了bsp模块(bsp.o)中的BSP_Initializes函数。</p><p><strong>提示：</strong><br><strong>A.</strong>main.o是main.c源文件生成的目标文件模块；<br><strong>B.</strong>I.System_Initializes是System_Initializes函数的入口。</p><h1 id="四、Removing-Unused-input-sections-from-the-image"><a href="#四、Removing-Unused-input-sections-from-the-image" class="headerlink" title="四、Removing Unused input sections from the image"></a>四、Removing Unused input sections from the image</h1><p><strong>Removing Unused input sections from the image：</strong>移除未调用模块<br>配置中需勾选：<strong>Unuaed Sections Info</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/4.Removing%20Unused%20input%20sections%20from%20the%20image.png?raw=true"><br></table><p>这一类很好理解，就是我们代码中，没有被调用的模块（或者说函数）会在map文件中生成一个列表。</p><p>比如：<br><strong>Removing stm32f10x_gpio.o(i.GPIO_AFIODeInit), (20 bytes).</strong></p><p>意思是：<br>stm32f10x_gpio.c文件中GPIO_AFIODeInit模块（函数）未被调用，其代码大小20字节。</p><p>最后还有一个统计信息：<br><strong>52 unused section(s) (total 2356 bytes) removed from the image.</strong></p><p>1.总共有52段没有被调用；<br>2.没有被调用的大小为2356 字节；</p><h1 id="五、Image-Symbol-Table"><a href="#五、Image-Symbol-Table" class="headerlink" title="五、Image Symbol Table"></a>五、Image Symbol Table</h1><p><strong>Image Symbol Table：</strong>映射符号表<br>配置中需勾选：<strong>Symbols</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/5.Image%20Symbol%20Table.png?raw=true"><br></table><p>Image Symbol Table：映射符号表，也就是各个段所存储对应地址的表（图片删除了中间部分内容）。</p><h2 id="5-1-Symbol分为两大类"><a href="#5-1-Symbol分为两大类" class="headerlink" title="5.1 Symbol分为两大类"></a>5.1 Symbol分为两大类</h2><p><strong>1.Local Symbols：</strong>局部<br><strong>2.Global Symbols：</strong>全局</p><h2 id="5-2-Symbol内容要点"><a href="#5-2-Symbol内容要点" class="headerlink" title="5.2 Symbol内容要点"></a>5.2 Symbol内容要点</h2><p><strong>1.Symbol Name：符号名称</strong><br>名称命名及分类请看最后给出的官方参考文档。</p><p><strong>2.Value：存储对应的地址</strong><br>大家会发现有0x0800xxxx、0x2000xxxx这样的地址。<br>0x0800xxxx指存储在FLASH里面的代码、变量等。<br>0x2000xxxx指存储在内存RAM中的变量Data等。</p><p><strong>3.Ov Type：符号对应的类型</strong><br>符号类型大概有几种：Number、Section、Thumb Code、Data等；<br>细心的朋友会发现：全局、静态变量等位于0x2000xxxx的内存RAM中。</p><p><strong>4.Size：存储大小</strong><br>这个容易理解，就是当前行Symbol占用大小。</p><p><strong>5.Object(Section)：段目标</strong><br>这里一般指所在模块（源文件）。</p><h1 id="六、Memory-Map-of-the-image"><a href="#六、Memory-Map-of-the-image" class="headerlink" title="六、Memory Map of the image"></a>六、Memory Map of the image</h1><p><strong>Memory Map of the image：</strong>内存（映射）分布<br>配置中需勾选：<strong>Memory Map</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/6.Memory%20Map%20of%20the%20image.png?raw=true"><br></table><p><strong>Memory Map of the image：</strong>内存（映射）分布，内容相对较多，比较重要的一项。</p><h2 id="6-1-主要介绍"><a href="#6-1-主要介绍" class="headerlink" title="6.1 主要介绍"></a>6.1 主要介绍</h2><p><strong>Image Entry point : 0x08000131：</strong>指映射入口地址。</p><p><strong>Load Region LR_IROM1 (Base: 0x08000000, Size: 0x00000598, Max: 0x00080000, ABSOLUTE):</strong><br>指加载区域位于LR_IROM1开始地址0x08000000，大小有0x00000598，这块区域最大为0x00080000.</p><p><strong>执行区域：</strong><br>A.Execution Region ER_IROM1<br>B.Execution Region RW_IRAM1<br>这个区域，其实就是对应我们目标配置中的区域，如下如：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/7.%E6%89%A7%E8%A1%8C%E5%8C%BA%E5%9F%9F.png?raw=true"><br></table><h2 id="6-2-内容要点"><a href="#6-2-内容要点" class="headerlink" title="6.2 内容要点"></a>6.2 内容要点</h2><p><strong>1.Base Addr：存储地址</strong><br>0x0800xxxxFLASH地址和0x2000xxxx内存RAM地址。</p><p><strong>2.Size：存储大小</strong></p><p><strong>3.Type：类型</strong><br>Data：数据类型<br>Code：代码类型<br>Zero：未初始化变量类型<br>PAD：这个类型在map文件中放在这个位置，其实它不能算这里的类型。要翻译的话，只能说的“补充类型”。</p><p>ARM处理器是32位的，如果定义一个8位或者16位变量就会剩余一部分，这里就是指的“补充”的那部分，会发现后面的其他几个选项都没有对应的值。</p><p><strong>4.Attr：属性</strong><br>RO：存储与ROM中的段<br>RW：存储与RAM中的段</p><p><strong>5.Section Name：段名</strong><br>这里也可以说为入口分类名，与第一章节“Section Cross References”指的模块、段一样。<br>大概包含：RESET、.ARM、 .text、 i、 .data、 .bss、 HEAP、 STACK等。</p><p><strong>6.Object：目标</strong></p><h1 id="七、Image-component-sizes"><a href="#七、Image-component-sizes" class="headerlink" title="七、Image component sizes"></a>七、Image component sizes</h1><p><strong>Image component sizes：</strong>存储组成大小<br>配置中需勾选：<strong>Size Info</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/8.Image%20component%20sizes.png?raw=true"><br></table><p><strong>Image component sizes：</strong>存储组成大小，其实主要就是对模块进行汇总存储大小信息。</p><p>这一章节内容相信大家都能理解，我们编译工程后，在编译窗口一般会看到类似如下一段信息：<br><strong>Program Size: Code=1112 RO-data=320 RW-data=0 ZI-data=1632</strong></p><p><strong>Code：</strong>指代码的大小；<br><strong>Ro-data：</strong>指除了内联数据(inline data)之外的常量数据；<br><strong>RW-data：</strong>指可读写（RW）、已初始化的变量数据；<br><strong>ZI-data：</strong>指未初始化（ZI）的变量数据；</p><p><strong>提醒：</strong><br><strong>A.Code、Ro-data：</strong>位于FLASH中；<br><strong>B.RW-data、ZI-data：</strong>位于RAM中；<br><strong>C.RW-data</strong>已初始化的数据会存储在Flash中，上电会从FLASH搬移至RAM。</p><p>关系如下：<br>RO  Size = Code + RO Data<br>RW  Size = RW Data + ZI Data<br>ROM Size = Code + RO Data + RW Data</p><p>可以参看我公众号之前分享的一篇文章<a href="https://mp.weixin.qq.com/s/Ey9ZqHt05sXdwescFl2vZA" target="_blank" rel="noopener">《Keil编译大小及存储说明》</a></p><p>上面map信息是比较全面的汇总，如果不想看那些模块的详细，只看汇总统计的信息，可以在配置中只勾选“Totals Info”，对比信息：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/9.%E5%8F%AA%E7%9C%8B%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF.png?raw=true"><br></table><p><strong>最后提示：</strong><br>本文内容请参看Keil自带的一篇PDF文章<strong>《ARM® Compiler v5.06 for µVision® armlink User Guide》。</strong></p><h1 id="八、说明"><a href="#八、说明" class="headerlink" title="八、说明"></a>八、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="九、最后"><a href="#九、最后" class="headerlink" title="九、最后"></a>九、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;什么是map文件？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单的说：map文件是通过编译器编译之后，集程序、数据及IO空间的一种映射文件。&lt;/p&gt;
&lt;p&gt;很多技术牛逼的工程师在遇到&lt;strong&gt;内存越界，或溢出的情况&lt;/strong&gt;，首先想到的就是分析map文件。通过map文件可以知道函数大小，入口地址等一些重要信息。&lt;/p&gt;
&lt;p&gt;我们在Keil中最常见的就是在编译之后，编译窗口会显示类似如下一段关于程序和数据大小的信息：&lt;br&gt;&lt;strong&gt;Program Size: Code=1112 RO-data=320 RW-data=0 ZI-data=1632&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一段提示信息其实是汇总了程序和数据的信息，这些信息其实是单个模块汇总而成，在map文件里有详细列表。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程11_工程窗口图标说明</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程11_工程窗口图标说明.html</id>
    <published>2018-11-30T09:00:00.000Z</published>
    <updated>2018-11-30T09:59:55.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>很多朋友看到如下工程窗口的图标（如：带有<strong>“叹号”、“星号”、“钥匙”、“禁止驶入”</strong>标志），就会产生疑问：这些图标到底是啥意思呢？</p><a id="more"></a><table><br><img align="center" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/1.%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%90%84%E7%A7%8D%E5%9B%BE%E6%A0%87.png?raw=true"><br></table><p>其实，这些不同标志的图标是代表着不同的含义，目前Keil工程窗口中的图标大约有二十种。</p><p>许多初学的朋友看到这些异样的图标就会产生疑惑，下面章节我就详细讲述一下这些图标的含义。</p><h1 id="二、图标介绍"><a href="#二、图标介绍" class="headerlink" title="二、图标介绍"></a>二、图标介绍</h1><p>Keil工程窗口中的图标大约有二十种，但这二十种图标可以分为四大类：</p><p><strong>1.Project：</strong>工程图标</p><p><strong>2.Group：</strong>文件夹（组）图标</p><p><strong>3.File：</strong>文件图标</p><p><strong>4.SWC（Software Components）：</strong>软件组件图标</p><p>在这四大类图标的基础上，修改其属性，就会出现<strong>特殊标记</strong>的图标。比如开篇说的带有<strong>“叹号”、“星号”、“钥匙”</strong>标志的图标。</p><h1 id="三、四大类图标"><a href="#三、四大类图标" class="headerlink" title="三、四大类图标"></a>三、四大类图标</h1><p>下面我就先讲述四大类图标含义，再在四大类基础上讲述这些特殊标记图标的含义。</p><h2 id="3-1-Project工程图标"><a href="#3-1-Project工程图标" class="headerlink" title="3.1 Project工程图标"></a>3.1 Project工程图标</h2><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/2.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E5%9B%BE%E6%A0%87.png?raw=true"><strong>多工程图标：</strong>Multi-Project 即工作空间图标。<br></table><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/3.%E5%B7%A5%E7%A8%8B%E5%9B%BE%E6%A0%87.png?raw=true"><strong>工程图标：</strong>Projcet工程标识图标。<br></table><p>见图知义，一个工作空间包含多个工程（带有“+”展开的意思），一个工程可以包文件夹（组）。</p><h2 id="3-2-Group组（文件夹）图标"><a href="#3-2-Group组（文件夹）图标" class="headerlink" title="3.2 Group组（文件夹）图标"></a>3.2 Group组（文件夹）图标</h2><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/4.%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%88%E6%9C%AA%E5%B1%95%E5%BC%80%EF%BC%89%E5%9B%BE%E6%A0%87.png?raw=true"><strong>未展开组图标：</strong>也就是不能看见该组下面文件，请结合工程窗口理解。<br></table><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/5.%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%88%E5%B7%B2%E5%B1%95%E5%BC%80%EF%BC%89%E5%9B%BE%E6%A0%87.png?raw=true"><strong>已展开组图标：</strong>和未展开组图标对应。<br></table><h2 id="3-3-File文件图标"><a href="#3-3-File文件图标" class="headerlink" title="3.3 File文件图标"></a>3.3 File文件图标</h2><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/6.%E7%AC%AC%E4%B8%80%E7%B1%BB%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>第一类文件图标：</strong>包含Header file, image file, or documentation file，即头文件，镜像文件，或文档文件图标。<br></table><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/7.%E7%AC%AC%E4%BA%8C%E7%B1%BB%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>第二类文件图标：</strong>一般指C/C++，汇编，库这类源代码文件图标。<br></table><h2 id="3-4-SWC软件组件图标"><a href="#3-4-SWC软件组件图标" class="headerlink" title="3.4 SWC软件组件图标"></a>3.4 SWC软件组件图标</h2><p>这类图标主要针对软件组件的一些图标，比如：针对工程选择MCU是否有对应的软件支持包、工程的运行环境、系统等组件。</p><p>下面让大家看一下这类图标的大概含义（来自Keil帮助文件内容）：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/8.SWC%E8%BD%AF%E4%BB%B6%E7%BB%84%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><br></table><h1 id="四、特殊标记图标"><a href="#四、特殊标记图标" class="headerlink" title="四、特殊标记图标"></a>四、特殊标记图标</h1><p>上章节只是<strong>概述了工程窗口四大类图标的含义</strong>，其实本文重点在于这一章节的“特殊标记图标”。</p><p>这些特殊标记主要是针对组（文件夹）和文件，<strong>如果修改了文件夹、文件属性，删除了文件等操作，就会出现一些特殊标记的图标</strong>。</p><p><font face="黑体" color="green" size="4"><strong>1.只读文件图标</strong></font></p><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/9.%E5%8F%AA%E8%AF%BB%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>带有“钥匙”标记的图标：</strong>该文件为只读（上锁）文件。如果为源代码文件，则该文件源代码不能被修改。<br></table><table><br><img align="center" width="350" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/10.%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7.png?raw=true"><br></table><p><font face="黑体" color="green" size="4"><strong>2.未发现文件图标</strong></font></p><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/11.%E6%9C%AA%E5%8F%91%E7%8E%B0%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>带有“叹号”标记的图标：</strong>带有该标记图标的文件，说明未被发现，一般被删除，或转移了。比如文章开篇图片中的“common.c”这个文件就未被工程发现。<br></table><p><font face="黑体" color="green" size="4"><strong>3.与工程选项配置不同图标</strong></font></p><table><br><img align="left" width="100" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/12.%E5%B1%9E%E6%80%A7%E4%B8%8D%E4%B8%80%E8%87%B4.png?raw=true"><strong>带有“星号”标记的图标：</strong>你会发现这有3个带“星号”的图标，其实这是针对文件夹（组），或文件的图标。<br></table><p>这个图标相对来说难理解一点，简单来说就是<strong>改变了文件夹（组），或文件的配置</strong>。</p><p>也可以理解为文件夹（组），或文件与工程目标选项配置不一样。</p><p><strong>A.针对文件夹：</strong>选中文件夹 -&gt; 右键 -&gt; Options for Group -&gt; 进入修改选项。</p><p><strong>B.针对文件：</strong>选中文件 -&gt; 右键 -&gt; Options for File-&gt; 进入修改选项。</p><table><br><img align="center" width="350" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/13.%E9%80%89%E4%B8%AD%E6%96%87%E4%BB%B6%20%E5%8F%B3%E9%94%AE.png?raw=true"><br></table><table><br><img align="center" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/14.%E4%BF%AE%E6%94%B9%E5%B1%9E%E6%80%A7.png?raw=true"><br></table><p>你进入修改其中某一项，点击“OK”，你会发现该文件就会出现带有“星号”的图标。</p><p>上面截图是针对文件，文件夹（组）类似原理，修改之后，文件夹同样会带有“星号”的图标。</p><p><font face="黑体" color="green" size="4"><strong>4.不编译选项图标</strong></font></p><table><br><img align="left" width="70" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/15.%E4%B8%8D%E7%BC%96%E8%AF%91%E9%A1%B9%E5%9B%BE%E6%A0%87.png?raw=true"><strong>带有“禁止驶入”标记的图标：</strong>顾名思义，指工程不包含该源文件，也就是不进行编译，链接等处理。<br></table><p>同样道理，这是针对文件夹（组），或文件的图标。</p><p>其实上面“与工程选项配置不同”包含了该选项内容，不勾选“Include in Target Build”，或“Always Build”，即不包含，不编译该选项，则OK之后，图标会出现带有“禁止驶入”的标记。</p><table><br><img align="center" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/16.%E4%BF%AE%E6%94%B9%E9%80%89%E5%9E%8B%EF%BC%8C%E4%B8%8D%E7%BC%96%E8%AF%91%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>这几个“特殊标记”的图标是<strong>Keil中常见，也是比较重要的图标</strong>，希望大家都明白其中含义。</p><p>本文内容可以参看Keil帮助文档中<strong>“Project window icons”</strong>的内容。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;很多朋友看到如下工程窗口的图标（如：带有&lt;strong&gt;“叹号”、“星号”、“钥匙”、“禁止驶入”&lt;/strong&gt;标志），就会产生疑问：这些图标到底是啥意思呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程10_文件类型及相关描述</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程10_文件类型及相关描述.html</id>
    <published>2018-11-29T08:00:00.000Z</published>
    <updated>2018-11-29T09:04:36.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>1.你在提交项目、打包保存项目时，你会<strong>删掉不必要的文件</strong>吗？<br>2.你知道这些<strong>uvoptx、uvprojx、map、dep……</strong>是什么文件吗？</p><a id="more"></a><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0/1.Keil%E7%BC%96%E8%AF%91%E4%B8%AD%E9%97%B4%E6%96%87%E4%BB%B6.png?raw=true"><br></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">现象or疑问：</span><br><span class="line">1.购买一块开发板，厂家提供的源代码例程没有几个，但文件却有几百兆。</span><br><span class="line">2.百度网盘下载一个别人提供的代码压缩包，几十兆。</span><br><span class="line">3.打开别人下载的源代码工程，各种类型文件混杂在一起。</span><br><span class="line">4.有些人提供的源代码没有dep文件，这个文件可以删除吗？ 删除了会有什么影响？</span><br></pre></td></tr></table></figure><p>其实有许多文件都是<strong>编译产生的中间文件</strong>，我习惯放一个双击删除“编译产生文件”.bat”来管理工程。即每次需要保存，或提交工程，会双击该文件，删除不需要的中间文件。</p><p>当你看完本文，理解这些文件类型的含义，你就不会有上面这些烦恼了。（本文内容可参考Keil帮助文档“File Types”文件类型章节）</p><h1 id="二、Keil文件类型概述"><a href="#二、Keil文件类型概述" class="headerlink" title="二、Keil文件类型概述"></a>二、Keil文件类型概述</h1><p>Keil中用到的文件类型很多，大概有五、六十种。下面会重点讲述常用的文件类型，一些不重要的，或者不常见的只简单概述。</p><p><strong>Keil文件可以分为7类：</strong><br>1、Project Files工程类型文件；<br>2、Source Files源代码类型文件；<br>3、Listing Files链接类型文件；<br>4、Object and HEX Files目标和Hex类型文件；<br>5、Build Files编译类型文件；<br>6、Debugger Files调试类型文件；<br>7、Other Files其他类型文件；</p><h1 id="三、Project-Files工程类型文件"><a href="#三、Project-Files工程类型文件" class="headerlink" title="三、Project Files工程类型文件"></a>三、Project Files工程类型文件</h1><p>工程类型文件是比较重要的，特别是<strong>工作空间、 工程文件、工程选项配置</strong>这三种文件不能删除。项目界面布局文件可以删除。</p><h2 id="3-1-工作空间文件"><a href="#3-1-工作空间文件" class="headerlink" title="3.1 工作空间文件"></a>3.1 工作空间文件</h2><p>（这类文件不能删除）<br><strong>*.uvmpw：</strong>µVision Project file for Multiple Projects多工程文件，也就是我们说的工作空间文件。</p><h2 id="3-2-工程文件"><a href="#3-2-工程文件" class="headerlink" title="3.2 工程文件"></a>3.2 工程文件</h2><p>（这类文件不能删除）<br><strong>*.uvprojx：</strong>µVision5工程文件</p><p><strong>*.uvproj：</strong>µVision4工程文件</p><p><strong>*.uv2：</strong>µVision3工程文件</p><h2 id="3-3-工程选项配置文件"><a href="#3-3-工程选项配置文件" class="headerlink" title="3.3 工程选项配置文件"></a>3.3 工程选项配置文件</h2><p>（这类文件不能删除）<br><strong>*.uvoptx：</strong>µVision5工程选项配置文件</p><p><strong>*.uvopt：</strong>µVision4工程选项配置文件</p><h2 id="3-4-项目界面布局文件"><a href="#3-4-项目界面布局文件" class="headerlink" title="3.4 项目界面布局文件"></a>3.4 项目界面布局文件</h2><p>（这类文件可以删除）<br><strong>*.uvguix[.user-name]：</strong>µVision5项目界面布局文件。删除之后，重新打开工程，界面布局会恢复到默认布局。如Demo.uvguix.Administrator。</p><p><strong>*.uvguix[.user-name]：</strong>µVision4项目界面布局文件。</p><h1 id="四、Source-Files源代码类型文件"><a href="#四、Source-Files源代码类型文件" class="headerlink" title="四、Source Files源代码类型文件"></a>四、Source Files源代码类型文件</h1><p>这一类文件相信大家都熟悉，简述一下。</p><p><strong>*.c：</strong>C源文件</p><p><strong>*.h：</strong>C头文件</p><p><strong>*.cpp：</strong>C++源文件</p><p><strong>*.s：</strong>汇编源文件</p><p><strong>*.a51：</strong>汇编源文件</p><p><strong>*.a66：</strong>汇编源文件</p><p><strong>*.inc：</strong>汇编头文件</p><p><strong>*.src：</strong>C编译器生成的其他源文件</p><h1 id="五、Listing-Files链接类型文件"><a href="#五、Listing-Files链接类型文件" class="headerlink" title="五、Listing Files链接类型文件"></a>五、Listing Files链接类型文件</h1><p>这一类文件属于中间文件，一般在编译过程中产生。可以在工程目标选项中配置对应的链接文件。Project -&gt; Options for Target -&gt; Listing，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0/2.Listing%20Files%E9%93%BE%E6%8E%A5%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>*.map：</strong>存储镜像文件<br>这个文件比较重要，我会在后面专门讲述一篇map相关文章。</p><p><strong>*.i：</strong>C预处理器输出文件</p><p><strong>*.scr：</strong>链接器分散加载器文件</p><p><strong>*.lst：</strong>C编译器或汇编器生成的文件</p><p><strong>*.m51：</strong>同样也是map文件</p><p><strong>*.m66：</strong>同样也是map文件</p><p><strong>*.htm：</strong>链接器的列表文件</p><h1 id="六、Object-and-HEX-Files目标和Hex类型文件"><a href="#六、Object-and-HEX-Files目标和Hex类型文件" class="headerlink" title="六、Object and HEX Files目标和Hex类型文件"></a>六、Object and HEX Files目标和Hex类型文件</h1><p>这一类文件同样属于中间文件，一般在编译过程中产生。但这类文件比较重要，<strong>调试信息、预览信息、可执行文件</strong>等都在这里面。</p><p>Project -&gt; Options for Target -&gt; Output，如图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0/3.Listing%20Files%E9%93%BE%E6%8E%A5%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>*.hex：</strong>可执行文件</p><p><strong>*.axf：</strong>包含调试信息的程序文件<br>有时候我们调试出错，可能是axf没有文件。</p><p><strong>*.d：</strong>编译生成的依赖文件<br>一般一个.c文件对应一个.d文件。</p><p><strong>*.o：</strong>也是目标的依赖文件<br>重定位定址的依赖文件。</p><p><strong>*.lib：</strong>库文件<br>生成的库就在这里。</p><p><strong>*.elf：</strong>ELF/DWARF链接的文件</p><p><strong>*.crf：</strong>浏览信息文件<br>使用Go to Definition Of 功能，就需要有这类文件。</p><h1 id="七、Build-Debugger编译调试文件"><a href="#七、Build-Debugger编译调试文件" class="headerlink" title="七、Build Debugger编译调试文件"></a>七、Build Debugger编译调试文件</h1><p>编译和调试，其实是两类不同文件，由于比较少，综合在一起写。</p><p><strong>*.bat：</strong>批处理文件</p><p><strong><em>._IA, </em>.__I, <em>._II, </em>.SCR：</strong>工具调用文件</p><p><strong>*.ini：</strong>于初始化源码文件</p><h1 id="八、Other-Files其他类型文件"><a href="#八、Other-Files其他类型文件" class="headerlink" title="八、Other Files其他类型文件"></a>八、Other Files其他类型文件</h1><p>这类文件比较多，但使用较少，简单列几个吧。</p><p><strong>*.pack：</strong>软件（支持）包文件</p><p><strong>*.sct：</strong>链接控制文件</p><p><strong>*.lnp：</strong>连接器传递命令文件</p><p><strong>*.dep：</strong>目标编译依赖文件</p><p><strong>*.cdb：</strong>µVision设备数据库文件</p><h1 id="九、说明"><a href="#九、说明" class="headerlink" title="九、说明"></a>九、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="十、最后"><a href="#十、最后" class="headerlink" title="十、最后"></a>十、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;1.你在提交项目、打包保存项目时，你会&lt;strong&gt;删掉不必要的文件&lt;/strong&gt;吗？&lt;br&gt;2.你知道这些&lt;strong&gt;uvoptx、uvprojx、map、dep……&lt;/strong&gt;是什么文件吗？&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程09_调试仿真</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程09_调试仿真.html</id>
    <published>2018-11-29T02:00:00.000Z</published>
    <updated>2018-11-29T08:59:50.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>调试对于程序员来说是一个比较重要的环节，因此就很有必要掌握Keil的这些调试功能。</p><p>点击Debug调试按钮，进入调试状态，就会出现如下图<strong>Debug Toolbar调试工具栏</strong>。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/1.%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true"><br></table><p>我们调试需要用到的按钮包含上图框出来的这些按钮，但常用的按钮就是调试工具栏前八个：<strong>复位、全速运行、停止运行、单步运行、逐步运行、跳出运行、运行到光标行、跳转到暂停行</strong>。</p><a id="more"></a><h1 id="二、相关描述"><a href="#二、相关描述" class="headerlink" title="二、相关描述"></a>二、相关描述</h1><p>这些工具栏按钮的主要含义可以参看<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《Keil系列教程03_主窗口和工具栏详细说明》</a>。</p><p>调试工具栏按钮位于<strong>菜单Debug</strong>中，同时调试视图窗口位于<strong>菜单View</strong>。可以参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">《Keil系列教程04_菜单概述》</a>。</p><p>同样，这些调试工具栏按钮可通过快捷键实现，有些默认没有快捷键，可以通过Configuration添加快捷键。请参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89.html">《Keil系列教程08_Configuration（二）》</a>Shortcut Keys 快捷键章节内容。</p><p>下面带领大家掌握那八个调试按钮、四个断点按钮，以及部分调试视图窗口的内容。</p><h1 id="三、八个调试按钮"><a href="#三、八个调试按钮" class="headerlink" title="三、八个调试按钮"></a>三、八个调试按钮</h1><p>保证代码编译无误，点击<strong>“启动/停止调试”</strong>按钮（如下图），或快捷键Ctrl + F5，进入调试模式。此时就会出现如文中开头的调试工具栏。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/2.%E8%BF%9B%E5%85%A5%E8%B0%83%E8%AF%95%E7%8A%B6%E6%80%81.png?raw=true"><br></table><h2 id="3-1-Reset复位"><a href="#3-1-Reset复位" class="headerlink" title="3.1 Reset复位"></a>3.1 Reset复位</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/3.Reset%E5%A4%8D%E4%BD%8D.png?raw=true"><br></table><p><strong>Reset复位，</strong>让程序复位到起点，恢复到初始状态。</p><h2 id="3-2-Run全速运行"><a href="#3-2-Run全速运行" class="headerlink" title="3.2 Run全速运行"></a>3.2 Run全速运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/4.Run%E5%85%A8%E9%80%9F%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Run全速运行（F5），</strong>让程序处于运行状态。此按钮在程序停止运行时有效。</p><h2 id="3-3-Stop停止运行"><a href="#3-3-Stop停止运行" class="headerlink" title="3.3 Stop停止运行"></a>3.3 Stop停止运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/5.Stop%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Stop停止运行，</strong>让正在运行的程序停止下来。此按钮在程序运行时有效。</p><h2 id="3-4-Step单步运行"><a href="#3-4-Step单步运行" class="headerlink" title="3.4 Step单步运行"></a>3.4 Step单步运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/6.Step%E5%8D%95%E6%AD%A5%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Step单步运行（F11），</strong>每点一次按钮，程序运行一步（单步），遇到函数会跳进函数执行（箭头进入括号）。此按钮在程序停止运行时有效。</p><h2 id="3-5-Step-Over逐步运行"><a href="#3-5-Step-Over逐步运行" class="headerlink" title="3.5 Step Over逐步运行"></a>3.5 Step Over逐步运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/7.Step%20Over%E9%80%90%E6%AD%A5%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Step Over逐步运行（F10），</strong>每点一次按钮，程序运行一行（单行），遇到函数跳过函数执行（箭头跳过括号）。此按钮在程序停止运行时有效。</p><h2 id="3-6-Step-Out跳出运行"><a href="#3-6-Step-Out跳出运行" class="headerlink" title="3.6 Step Out跳出运行"></a>3.6 Step Out跳出运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/8.Step%20Out%E8%B7%B3%E5%87%BA%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Step Out跳出运行（Ctrl + F11），</strong>每点一次按钮，程序跳出当前函数执行（箭头跳出括号），直到跳出最外面的函数（main函数）。此按钮在程序停止运行时有效。</p><h2 id="3-7-Run-to-Cursor-Line运行到光标行"><a href="#3-7-Run-to-Cursor-Line运行到光标行" class="headerlink" title="3.7 Run to Cursor Line运行到光标行"></a>3.7 Run to Cursor Line运行到光标行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/9.Run%20to%20Cursor%20Line%E8%BF%90%E8%A1%8C%E5%88%B0%E5%85%89%E6%A0%87%E8%A1%8C.png?raw=true"><br></table><p><strong>Run to Cursor Line运行到光标行（Ctrl + F10），</strong>将光标放在某一行，点击该按钮，程序全速运行，直到运行到光标的位置停止下来。（前提是程序能运行到光标所在行）。</p><h2 id="3-8-Show-Next-Statement跳转到暂停行"><a href="#3-8-Show-Next-Statement跳转到暂停行" class="headerlink" title="3.8 Show Next Statement跳转到暂停行"></a>3.8 Show Next Statement跳转到暂停行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/10.Show%20Next%20Statement%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%9A%82%E5%81%9C%E8%A1%8C.png?raw=true"><br></table><p><strong>Show Next Statement跳转到暂停行，</strong>点击该按钮，跳转到程序暂停（停止）所在行。主要用我们打开多个文件，不知道程序暂停在哪里。此按钮在程序停止运行时有效。</p><h1 id="四、四个断电按钮"><a href="#四、四个断电按钮" class="headerlink" title="四、四个断电按钮"></a>四、四个断电按钮</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/11.%E5%9B%9B%E4%B8%AA%E6%96%AD%E7%82%B9%E6%8C%89%E9%92%AE.png?raw=true"><br></table><p>调试时，这四个按钮也常用，从左到右依次是：<strong>插入/移除断点、 使能/失能断点、 失能所有断点、 取消所有断点</strong>。</p><h2 id="4-1-插入-移除断点"><a href="#4-1-插入-移除断点" class="headerlink" title="4.1 插入/移除断点"></a>4.1 插入/移除断点</h2><p><strong>Insert/Remove Breakpoint插入/移除断点（F9），</strong>点击一下按钮，在光标所在行插入一个断点，再点击一次，则移除断点。</p><p>该按钮操作等于用鼠标在代码所在行前面点击一次，注意<strong>只有在灰色所在行才有效</strong>（也就是程序能执行的地方），如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/12.%E6%8F%92%E5%85%A5%E3%80%81%E7%A7%BB%E9%99%A4%E6%96%AD%E7%82%B9.png?raw=true"><br></table><h2 id="4-2-使能-失能断点"><a href="#4-2-使能-失能断点" class="headerlink" title="4.2 使能/失能断点"></a>4.2 使能/失能断点</h2><p><strong>Enable/Disable Breakpoint使能/失能断点（Ctrl + F9），</strong>在有断点基础上，点击一下按钮，失能该断点，再点击一次，则使能该断点。</p><p>失能断点就是保留该断点，但该断点无效（程序执行到该处不停止）。</p><h2 id="4-3-失能所有断点"><a href="#4-3-失能所有断点" class="headerlink" title="4.3 失能所有断点"></a>4.3 失能所有断点</h2><p><strong>Disable All Breakpoints失能所有断点，</strong>保留所有断点，但都无效（和上面一个道理），但这里不能再次使能所有断点。</p><h2 id="4-4-取消所有断点"><a href="#4-4-取消所有断点" class="headerlink" title="4.4 取消所有断点"></a>4.4 取消所有断点</h2><p><strong>Kill All Breakpoints取消所有断点（Ctrl + Shift + F9），</strong>和上面失能不一样，这里是不保留断点，即取消工程所有断点，也叫杀掉所有断点。</p><h1 id="五、调试视图窗口"><a href="#五、调试视图窗口" class="headerlink" title="五、调试视图窗口"></a>五、调试视图窗口</h1><p>调试视图窗口只有进入调试模式时才会出现，其窗口名称详情可参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">《Keil系列教程04_菜单概述》</a>中View菜单章节。</p><p>这里讲述几个在调试时常用的视图窗口。</p><h2 id="5-1-Watch窗口"><a href="#5-1-Watch窗口" class="headerlink" title="5.1 Watch窗口"></a>5.1 Watch窗口</h2><p><strong>Watch查看变量的窗口，有Watch1和Watch2两个窗口，</strong>都一样，方便用户多个窗口同时查看。</p><p>查看这些调试视图窗口可以通过菜单，或点击工具栏按钮打开。</p><p>选中变量 -&gt; 右键 -&gt; Add ‘xxx’ to -&gt;Watch1，此时自动会弹出Watch1窗口：</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/13.Watch%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><h2 id="5-2-System-Viewer窗口"><a href="#5-2-System-Viewer窗口" class="headerlink" title="5.2 System Viewer窗口"></a>5.2 System Viewer窗口</h2><p><strong>System Viewer系统（外围IO、USART、TIM等）窗口，</strong>可以理解查看外设寄存器的窗口，如下图，查看USART寄存器值的窗口。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/14.System%20Viewer%E7%B3%BB%E7%BB%9F%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><p>这些调试视图窗口只针对于调试时，方便大家查看一些调试信息，掌握这些内容会提高你的调试效率，以及更精确定位Bug。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;调试对于程序员来说是一个比较重要的环节，因此就很有必要掌握Keil的这些调试功能。&lt;/p&gt;
&lt;p&gt;点击Debug调试按钮，进入调试状态，就会出现如下图&lt;strong&gt;Debug Toolbar调试工具栏&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;800&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/1.%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;我们调试需要用到的按钮包含上图框出来的这些按钮，但常用的按钮就是调试工具栏前八个：&lt;strong&gt;复位、全速运行、停止运行、单步运行、逐步运行、跳出运行、运行到光标行、跳转到暂停行&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程08_Configuration（二）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程08_Configuration（二）.html</id>
    <published>2018-11-22T09:00:00.000Z</published>
    <updated>2018-11-22T09:36:47.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文接着上一篇文章《Keil系列教程07_Configuration（一）》讲述的工程目标选项的后三项配置：Shortcut Keys快捷键、Text Completion代码完形、Other其他。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/1.Configuration%E5%90%8E%E4%B8%89%E9%A1%B9.png?raw=true"><br></table><p>这后面三部分内容在该系列教程其它也会牵涉，也是一些常用、重要的配置选项，下面讲述过程中会介绍相关内容。</p><a id="more"></a><h1 id="二、Shortcut-Keys快捷键"><a href="#二、Shortcut-Keys快捷键" class="headerlink" title="二、Shortcut Keys快捷键"></a>二、Shortcut Keys快捷键</h1><p>Configuration中Shortcut Keys主要作用：<strong>查看、添加、修改、删除快捷键</strong>。而这些快捷键主要就是针对各项菜单的内容（命令）。</p><p>在默认情况下，不是所有菜单都有快捷键，可以自行添加、修改，或删除。左边列表中的Command（菜单命令）属于系统，用户不能增加、删除和修改。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/2.Shortcut%20Keys%E5%BF%AB%E6%8D%B7%E9%94%AE.png?raw=true"><br></table><h2 id="2-1-创建快捷键"><a href="#2-1-创建快捷键" class="headerlink" title="2.1 创建快捷键"></a>2.1 创建快捷键</h2><p>快捷键可以增加（创建）、删除（移除）和修改。我们这里简单举例说明一下创建快捷键。</p><p>比如：增加（创建）File Colse 关闭文件快捷键为Ctrl+W。<br>点击“Create Shortcut” -&gt; 键盘按住“Ctrl + W” -&gt; 点击“OK”。</p><table><br><strong>增加（创建）</strong>快捷键动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/3.%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE.gif?raw=true"><br></table><h2 id="2-2-常用快捷键"><a href="#2-2-常用快捷键" class="headerlink" title="2.2 常用快捷键"></a>2.2 常用快捷键</h2><p>Keil默认的所有快捷键在列表中都能查找到，这里为了方便大家，也让大家回顾一下，列出常用的快捷键。</p><p>在该系列教程前面文章就讲述了快捷键的相关内容，请参看：<br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《Keil系列教程03_主窗口和工具栏详细说明》</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">《Keil系列教程04_菜单概述》</a></p><p>按照菜单列表顺序：<br><strong>1.File类</strong><br>Ctrl + N ：新建文件<br>Ctrl + O ：打开文件<br>Ctrl + S ：保存文件</p><p><strong>2.Edit类</strong><br>Ctrl + Z ：撤销编辑<br>Ctrl + Y ：恢复编辑<br>Ctrl + X ：剪切<br>Ctrl + C ：复制<br>Ctrl + V ：粘贴<br>Ctrl + - ：跳转到上一步<br>Ctrl + Shift + - ：跳转到下一步<br>Ctrl + F2 ：添加书签<br>F2 ：跳转到下一个书签<br>Shift + F2 ：跳转到上一个书签<br>Ctrl + Shift + F2 ：清空所有书签<br>Ctrl + F ：查找<br>Ctrl + H ：替换</p><p><strong>3.Project类</strong><br>Alt + F7 ：工程目标<br>F7 ：编译目标<br>Ctrl + F7 ：编译文件</p><p><strong>4.Flash类</strong><br>F8 ：下载程序</p><p><strong>5.Debug类</strong><br>Ctrl + F5 ：启动/停止调试<br>F5 ：运行<br>F11 ：Setp运行<br>F10 ：Setp Over运行<br>Ctrl + F11 ：Setp Out运行<br>Ctrl + F10 ：运行到光标处<br>Ctrl + B : 查看所有断点<br>F9 ：插入/移除断点<br>Ctrl + F9 : 使能/失能单个断点<br>Ctrl + Shift + F9 ：取消所有断点</p><p>只是简单列了一些常用快捷键，列表中默认没有的快捷键可以自己添加。</p><h1 id="三、Text-Completion代码完形"><a href="#三、Text-Completion代码完形" class="headerlink" title="三、Text Completion代码完形"></a>三、Text Completion代码完形</h1><p>这个选项相关的功能比较实用，能帮助你在编程时快速完成编辑。直白的意思就是能提高编程的效率。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/4.Text%20Completion%E4%BB%A3%E7%A0%81%E5%AE%8C%E5%BD%A2.png?raw=true"><br></table><h2 id="3-1-Show-Code-Completion-List：自动完成代码编辑"><a href="#3-1-Show-Code-Completion-List：自动完成代码编辑" class="headerlink" title="3.1 Show Code Completion List：自动完成代码编辑"></a>3.1 Show Code Completion List：自动完成代码编辑</h2><p><strong>Struct / Class Members</strong>编辑时显示结构体/类成员变量列表，直接点击列表中的成员就可以完形代码。</p><p><strong>Function Parameters</strong>就是显示参数和参数类型</p><p><strong>Symbols after [x] Characters</strong>自动匹配x字符，在输入时达到x个字符会匹配输入的字符串。</p><h2 id="3-2-Dynamic-Syntax-Checking：语法动态错误检测"><a href="#3-2-Dynamic-Syntax-Checking：语法动态错误检测" class="headerlink" title="3.2 Dynamic Syntax Checking：语法动态错误检测"></a>3.2 Dynamic Syntax Checking：语法动态错误检测</h2><p>你编辑代码时会动态（实时）检测你代码是否正确。比如：错误会有红色标识提示。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/5.%E5%8A%A8%E6%80%81%E8%AF%AD%E6%B3%95%E6%A3%80%E6%B5%8B.png?raw=true"><br></table><h2 id="3-3-Text-Templates：代码模板"><a href="#3-3-Text-Templates：代码模板" class="headerlink" title="3.3 Text Templates：代码模板"></a>3.3 Text Templates：代码模板</h2><p>代码模板很好理解，相当于你写了一个模板，以后直接使用就是了。</p><table><br>代码完形、模板动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/6.%E5%AE%8C%E5%9E%8B%E6%BC%94%E7%A4%BA%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h1 id="四、Other其他"><a href="#四、Other其他" class="headerlink" title="四、Other其他"></a>四、Other其他</h1><p>这个选项不常用，可以了解一下。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/7.Other%E5%85%B6%E4%BB%96.png?raw=true"><br></table><p><strong>1.UVSOCK (TCP/IP) Settings</strong><br>启动或关闭UV socket端口，这个选项可以说基本很少人使用。</p><p><strong>2.Startup (Require Restart)启动</strong><br>启动软件（重新打开）时对应的操作。</p><table><br><strong>Show splash screen：</strong>显示启动画面。如下图：<br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/8.%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p><strong>Open most recent project：</strong>启动软件后打开最近的工程项目。</p><p><strong>3.Debug调试</strong><br>调试时，如果都选上，则运行停止后不打开匹配的源文件。</p><p><strong>4.Parallel Build Configuration并行编译配置</strong><br>在编译多个工程时，这个选项就会起到作用。</p><p><strong>Disable Parallel Build：</strong>禁止并行编译<br><strong>Number of parallel jobs：</strong>并行编译数量</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文接着上一篇文章《Keil系列教程07_Configuration（一）》讲述的工程目标选项的后三项配置：Shortcut Keys快捷键、Text Completion代码完形、Other其他。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/1.Configuration%E5%90%8E%E4%B8%89%E9%A1%B9.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;这后面三部分内容在该系列教程其它也会牵涉，也是一些常用、重要的配置选项，下面讲述过程中会介绍相关内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程07_Configuration（一）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程07_Configuration（一）.html</id>
    <published>2018-11-21T08:00:00.000Z</published>
    <updated>2018-11-21T08:43:31.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文带来的内容为“Configuration”，即配置。而这里的“配置”和前面“工程目标选项配置”是完全不同的两种配置。</p><p>工程目标选项配置是针对工程目标，保存在工程文件（.uvprojx和.uvoptx）。这里的Configuration是针对IDE，保存在安装目录下。</p><p>我们常见的<strong>字体大小、颜色、关键字、快捷键</strong>等这些都是在“Configuration”中进行设置。本文讲述Configuration中的前面3项：<strong>Editor编辑、 Colors &amp; Fonts字体和颜色、 User KeyWords用户关键字</strong>。</p><a id="more"></a><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/1.Configuration.png?raw=true"><br></table><h1 id="二、打开“Configuration”方法"><a href="#二、打开“Configuration”方法" class="headerlink" title="二、打开“Configuration”方法"></a>二、打开“Configuration”方法</h1><p><strong>1.点击“Configuration”快捷按钮</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/2.%E2%80%9CConfiguration%E2%80%9D%E5%BF%AB%E6%8D%B7%E6%8C%89%E9%92%AE.png?raw=true"><br></table><p><strong>2.快捷键</strong><br>Keil打开Configuration，默认是没有设置快捷键。不过可以进入Configuration，对其打开方式设置快捷键。比如Alt + C（在下一篇文章会讲述设置快捷键）。</p><p><strong>3.从菜单中打开， Edit -&gt; Configuration</strong>，如下图：</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/3.Config%E8%8F%9C%E5%8D%95.png?raw=true"><br></table><h1 id="三、Editor编辑"><a href="#三、Editor编辑" class="headerlink" title="三、Editor编辑"></a>三、Editor编辑</h1><p>如下图，我将Edit分为五部分来讲述：<strong>General Editor Settings、 Function Display、 Look &amp; Feel、 File &amp; Project Handing、 C/C++ &amp; ASM &amp; Other File</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/4.Edit%E7%BC%96%E8%BE%91.png?raw=true"><br></table><h2 id="3-1-General-Editor-Settings"><a href="#3-1-General-Editor-Settings" class="headerlink" title="3.1 General Editor Settings"></a>3.1 General Editor Settings</h2><p><strong>General Editor Settings：通用编辑设置</strong>。这个选项里面内容比较实用，可以参看下面动画效果。</p><p><strong>1.Encoding：编码方式选择</strong><br>Keil提供十几种编码方式供大家选择，默认：Encode in ANSI.</p><p><strong>2.Auto Indent：自动缩进</strong><br>也就是换行时自动缩进（对齐）功能，提供3个选项。<br><strong>None：</strong>不对对齐，光标每次换行在第一列。<br><strong>Smart：</strong>灵活对齐（常用）。包含大括号自动对齐。<br><strong>Block：</strong>光标对齐于前一行。</p><p><strong>3.Virtual Spaces：虚拟空间</strong><br>光标在上下移动时不管有没有“空间”都对齐。也就是说光标可以在任何位置。</p><p><strong>4.View White Space：显示空白（空格）</strong><br>勾选会将“空格”和“Tab”显示出来。</p><p><strong>5.View End of Line：显示结束行</strong><br>勾选会在每行最后显示换行符。</p><table><br><strong>Encoding、Auto Indent</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/5.Encoding%E3%80%81Auto%20Indent%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><table><br><strong>Virtual Spaces、View White Space、View End of Line</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/6.Virtual%20Spaces%E3%80%81View%20White%20Space%E3%80%81View%20End%20of%20Line%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h2 id="3-2-Function-Display"><a href="#3-2-Function-Display" class="headerlink" title="3.2 Function Display"></a>3.2 Function Display</h2><p><strong>Function Display：函数显示</strong>，就是在Function Display窗口的一些显示方式。</p><p>这一区域是三个参数组合配置，可以实现多种显示效果。</p><p><strong>1.Display Modules：显示模块【显示方式】</strong><br>简单的说模块显示就是显示C源文件名，将函数名折叠在文件里面。<br>勾选：以模块（分组/文件夹）方式显示。<br>不选：以函数名方式显示。</p><p><strong>2.Scan function names in project files：浏览工程项目中所有函数【显示内容】</strong><br>就是显示工程中所有函数。</p><p><strong>3.Scan function names in current editor files：浏览当前编辑（已打开）文件的函数【显示内容】</strong><br>比如：我打开了main.c和bsp.c两个文件来编辑，那么就显示这两个文件的内容（函数）。</p><table><br><strong>Function Display</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/7.Function%20Display%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h2 id="3-3-Look-amp-Feel"><a href="#3-3-Look-amp-Feel" class="headerlink" title="3.3 Look &amp; Feel"></a>3.3 Look &amp; Feel</h2><p><strong>Look &amp; Feel：看&amp;感觉（视觉）</strong>，请看下面描述就能直观的理解这一区域意思。</p><p><strong>1.Show Message Dialog during Find：在查找时显示消息对话框</strong><br>就是在查找结束，或未查找到相关内时容弹出的提示框。</p><p>比如：我在main.c文件中查找main1（文件中实际是没有main1），勾选上就会弹出消息对话框（如下图），不勾选就不会弹出高亮对话框。</p><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/8.%E5%9C%A8%E6%9F%A5%E6%89%BE%E6%97%B6%E6%98%BE%E7%A4%BA%E6%B6%88%E6%81%AF%E5%AF%B9%E8%AF%9D%E6%A1%86.png?raw=true"><br></table><p><strong>2.Highlight Current Line：高亮当前行</strong><br>勾选上，光标放在那一行，这一行就高亮的意思。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/9.%E9%AB%98%E4%BA%AE%E5%BD%93%E5%89%8D%E8%A1%8C.png?raw=true"><br></table><p><strong>3.Highlight matching and mismatched braces：高亮显示匹配和不匹配括号</strong><br>将光标放在括号处，会高亮括号，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/10.%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%E5%8C%B9%E9%85%8D%E5%92%8C%E4%B8%8D%E5%8C%B9%E9%85%8D%E6%8B%AC%E5%8F%B7.png?raw=true"><br></table><p><strong>4.Print with syntax coloring：打印语法颜色</strong><br>打印颜色对应为编辑器中的颜色。</p><p><strong>5.Colored Editor Tabs：颜色编辑器选项卡</strong><br>启用或禁用文件名称标签的颜色，如下图，勾选就显示颜色：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/11.%E7%BC%96%E8%BE%91%E5%99%A8%E6%96%87%E4%BB%B6%E5%90%8D%E9%A2%9C%E8%89%B2.png?raw=true"><br></table><p><strong>6.Right Margin：右边距</strong><br>编辑分隔符标记的位置号。位置号的默认值是80,范围[1-999]。<br><strong>None：</strong>无标记；<br><strong>Vertical Line：</strong>垂直线标记；<br><strong>Colored Background：</strong>背景颜色标记。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/12.%E5%8F%B3%E8%BE%B9%E8%B7%9D.png?raw=true"><br></table><h2 id="3-4-File-and-Project-Handling"><a href="#3-4-File-and-Project-Handling" class="headerlink" title="3.4 File and Project Handling"></a>3.4 File and Project Handling</h2><p><strong>File and Project Handling：文件和工程操作</strong>，针对的是文件和工程。</p><p><strong>1.Create Backup files：创建备份文件(* . bak)</strong><br>在保存文件时，在文件的目录中创建备份文件，扩展名为.bak。这个选项只影响源文件，对项目文件没有影响。</p><p><strong>2.Automatic reload of externally modified files：自动加载修改过的文件</strong><br>比如：Keil软件打开了main.c文件，再使用其它编辑器打开该main,c修改其中内容并保存，这时Keil软件自动加载修改过的main.c文件。</p><p>不勾选，则不会自动加载，就会有如下重新加载提示：</p><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/13.%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>3.Save Project before entering Debug：进入调试之前保存工程项目</strong></p><p><strong>4.Save Files before entering Debug：进入调试之前保存所有文件</strong></p><p><strong>5.Auto save modified File every [x] Minutes：每x分钟自动保存文件</strong></p><h2 id="3-5-C-C-amp-ASM-amp-Other-File"><a href="#3-5-C-C-amp-ASM-amp-Other-File" class="headerlink" title="3.5 C/C++ &amp; ASM &amp; Other File"></a>3.5 C/C++ &amp; ASM &amp; Other File</h2><p>这里三组配置类似，只讲述一组，比较简单。</p><p><strong>1.Use syntax coloring：使用语法颜色</strong><br>不使用语法就等于txt文本那种纯黑色。见下图不使用和使用区别：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/14.%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E9%A2%9C%E8%89%B2.png?raw=true"><br></table><p><strong>2.Insert spaces for tabs：符插入空格</strong><br>这个符号需要配合上面3.1General Editor Settings的View White Space显示出来才能看到效果。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/15.%E7%AC%A6%E6%8F%92%E5%85%A5%E7%A9%BA%E6%A0%BC.png?raw=true"><br></table><p><strong>3.Tab Size：Tab符大小</strong><br>一个Tab符占几个空格。</p><p><strong>4.Show Line Numbers：显示行数</strong></p><p><strong>5.Use monospaced Font：使用等宽字体</strong></p><p><strong>6.Open with Outlining：打开伦廓</strong></p><h1 id="四、Colors-amp-Fonts颜色和字体"><a href="#四、Colors-amp-Fonts颜色和字体" class="headerlink" title="四、Colors &amp; Fonts颜色和字体"></a>四、Colors &amp; Fonts颜色和字体</h1><p>这个选项就是修改字体和颜色。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/16.Colors%20&%20Fonts%E9%A2%9C%E8%89%B2%E5%92%8C%E5%AD%97%E4%BD%93.png?raw=true"><br></table><p><strong>Window窗口：</strong>列出所有可配置窗口名称或窗口类型。这个列表是预定义的,用户不能修改。我们常见修改的地方就是“C/C++ Edit files”。</p><p><strong>Element元素：</strong>一个窗口的列表元素。这个列表是预定义的,用户不能修改。</p><p><strong>Font字体：</strong>包含Font字体、Size大小和Style风格三项。</p><p><strong>Colors颜色：</strong>包含Foreground 前景色、Background 背景色。</p><p>很多人不喜欢白色背景，比较刺眼。可惜Keil不支持修改主题，就只能在这里修改背景色来调节。</p><p>修改这里字体和颜色，其实就是修改了Keil_v5\UV4目录下的global.prop文件。</p><p>如下图所示，就是通过修改字体颜色和背景色来达到“黑色”主题。我将下图“黑色”主题提供给大家，只需替换你Keil_v5\UV4目录下global.prop即可。</p><p>链接：<a href="https://pan.baidu.com/s/16AqpplKTNNsqbi5CTrHmCg" target="_blank" rel="noopener">https://pan.baidu.com/s/16AqpplKTNNsqbi5CTrHmCg</a><br>密码：fxc7</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/17.%E9%BB%91%E8%89%B2%E8%83%8C%E6%99%AF.png?raw=true"><br></table><h1 id="五、User-Keywords用户关键字"><a href="#五、User-Keywords用户关键字" class="headerlink" title="五、User Keywords用户关键字"></a>五、User Keywords用户关键字</h1><p>这个选项比较简单，就是用户自定义关键字。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/18.User%20Keywords%E7%94%A8%E6%88%B7%E5%85%B3%E9%94%AE%E5%AD%97.png?raw=true"><br></table><p><strong>Text File Types：</strong>文本文件类型。<br><strong>User Keywords：</strong>用户关键字。</p><p>举例：在C/C++文件里定义关键字“uint8_t”，在编辑C/C++文件时“uint8_t”就会以关键字颜色显示。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/19.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E5%AD%97.png?raw=true"><br></table><p>请参看我公众号分享过的一篇文章<a href="https://mp.weixin.qq.com/s/_GJ6yBebbN-YUp34-Uz-4w" target="_blank" rel="noopener">《Keil自定义关键字、快捷键》</a>。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文带来的内容为“Configuration”，即配置。而这里的“配置”和前面“工程目标选项配置”是完全不同的两种配置。&lt;/p&gt;
&lt;p&gt;工程目标选项配置是针对工程目标，保存在工程文件（.uvprojx和.uvoptx）。这里的Configuration是针对IDE，保存在安装目录下。&lt;/p&gt;
&lt;p&gt;我们常见的&lt;strong&gt;字体大小、颜色、关键字、快捷键&lt;/strong&gt;等这些都是在“Configuration”中进行设置。本文讲述Configuration中的前面3项：&lt;strong&gt;Editor编辑、 Colors &amp;amp; Fonts字体和颜色、 User KeyWords用户关键字&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程06_工程目标选项配置（二）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程06_工程目标选项配置（二）.html</id>
    <published>2018-11-20T07:00:00.000Z</published>
    <updated>2018-11-20T08:50:34.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文接着上一篇文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">《Keil系列教程05_工程目标选项配置（一）》</a>讲述的工程目标选项的后五项配置：<strong>C/C++编译、 Asm汇编、 Linker链接、 Debug调试、 Utilities公共</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9.png?raw=true"><br></table><a id="more"></a><h1 id="二、C-C-编译"><a href="#二、C-C-编译" class="headerlink" title="二、C/C++编译"></a>二、C/C++编译</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/2.CC++%E7%BC%96%E8%AF%91.png?raw=true"><br></table><p>这里“C/C++选项”和“Asm选项”类似，主要是与编译相关的一些配置。</p><p><font face="黑体" color="green" size="4">第1处：预处理（Preprocessor Symbols）</font><br>这里主要就是预定义功能，相当于在程序中的#define xxxx。我上面预定义STM32F10X_HD，在stm32f10x.h文件中就不用定义了。</p><p><font face="黑体" color="green" size="4">第2处：语言/代码生成（Language / Code Generation）</font><br><strong>Language/code Generation语言/代码生成</strong>。可以理解成编译、链接到最后生成代码。这部分功能对于代码优化比较重要，初学者可以不用过多理解，对代码大小、运行速度等性能要求较高的人就需要深入理解。</p><p><strong>Execute only Code：只生成执行代码</strong><br>【设置编译器命令行：–execute_only】<br>只生成执行代码防止编译器生成任何数据访问代码部分。</p><p><strong>Optimize：优化选择项，有Level0 - Level3四个选项</strong><br>【设置编译器命令行：-Onum】<br>初学者、在线调试建议使用Level0，也就是不优化，这样执行的效果才和代码一样。如果配置成Level3，在线调试可能有些地方优化而不能打断点。</p><p><strong>Optimize for Time：优化时间，即优化代码中费时的地方</strong><br>【设置编译器命令行：-Otime】<br>比如有些算法，本身代码量就比较大，运行需要很长时间（假如需要2秒），这个时候勾选上该功能，会发现运行时间有比较明显的减少（或许不到1秒时间）。</p><p><strong>Split Load and Store Multiple：加载和存储多个分裂</strong><br>【设置编译器命令行：–split_ldm】<br>非对齐数据采用多次访问方式。当 LMD/STM 指令有 4 个以上产生时，列分裂LMD 和 STM 指令，以减不中断延迟。</p><p><strong>One ELF Section per Function：优化每一个函数 ELF 段</strong><br>【设置编译器命令行：–split_sections】<br>每个函数都会产生一个 ELF 段，勾选上，允许优化每一个 ELF 段。这个选项可以减少潜在的共享地址、数据和函数之间的字符串。</p><p>直白的意思：可以减少代码量ROM的大小（内存RAM不会减小）。</p><p>举一个例子，勾选之前和勾选之后，编译后存储大小对比：<br><strong>勾选之前：</strong><br>Program Size: <strong>Code=2540 RO-data=336</strong> RW-data=40 ZI-data=1024</p><p><strong>勾选之后：</strong><br>Program Size: <strong>Code=908 RO-data=320</strong> RW-data=40 ZI-data=1024</p><p><strong>Strict ANSI C：标准（严格）的ANSC</strong><br>【设置编译器命令行：–strict】<br>也就是说：编译时严格按照标准的ANSI C进行检查。</p><p><strong>Enum Container always int：枚举总是int型</strong><br>【设置编译器命令行：–enum_is_int】<br>很容易理解，我们枚举时成员变量类型为int型。</p><p><strong>Plain Char is Signed：纯字符标记为字符</strong><br>【设置编译器命令行：–signed_chars】<br>代码举例：char a[] = “abcd”; 也就是说将“abcd”标记为字符型。</p><p><strong>Read-Only Position Independent：为常量生成独立的代码空间</strong><br>【设置编译器命令行：–apcs=/ropi】<br>比如：我们定义字库变量为常量，勾选该选项，会将这些字库变量放在独立的代码空间。</p><p><strong>Read-Write Position Independent：为可读写代码生成独立的代码空间</strong><br>【设置编译器命令行：–apcs=/rwpi】</p><p><strong>Warnings：警告</strong><br>【No Warnings设置编译器命令行：-W】<br>No Warnings：不会有警告提示和输出；<br>All Warnings：所有警告提示和输出。</p><p><strong>Thumb Mode：Thumb模式</strong><br>指定设置文件或文件夹（组）为Thumb模式。<br>【注意：在工程中该模式为默认，也就是不能选择】</p><p><strong>No Auto Includes：不自动添加头文件</strong><br>不勾选该选项，编译器就会在Keil安装路径寻找你工程中.h文件。<br>举例：我们定义uint8_t是定义在stdint.h文件里面的，但是我们工程目录下一般是没有stdint.h文件。这时候，编译器就会在Keil路径下去寻找stdint.h文件。</p><p><strong>C99 Mode：C99标准模式</strong><br>【设置编译器命令行：–c99】<br>C语音有标准有多个版本，如C89、C90、C99等。</p><p><strong>GNU extensions：支持GUN扩展</strong><br>GUN ARM C编译器是这后面新增支持的功能。</p><p><font face="黑体" color="green" size="4">第3处：包含路径（Include Paths）</font><br>包含路径是使用Keil（及类似）软件必须掌握的一项。包含路径就是指定我们工程中使用文件所在的位置，让编译器找到相应的文件。</p><p>可以参看我之前分享的文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">《Keil系列教程02_新建基础软件工程》</a>里面添加路径的方法。</p><table><br>添加路径动画效果:<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/17.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%EF%BC%88%E5%8A%A8%E7%94%BB%EF%BC%89.gif?raw=true"><br></table><p><font face="黑体" color="green" size="4">第4处：多功能控件（Misc Controls）</font><br>例如：用日本语言来显示消息：–message_locale=ja_JP.</p><p><font face="黑体" color="green" size="4">第5处：编译器控制字符串（Compiler control string）</font><br>这里是针对编译器执行的命令，显示当前在编译器命令行指令。</p><p>在上面“第2处：语言代码生成”中有一个中括号【设置编译器命令行：】<br>里面的命令就显示在这里。</p><h1 id="三、Asm汇编"><a href="#三、Asm汇编" class="headerlink" title="三、Asm汇编"></a>三、Asm汇编</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/4.Asm%E6%B1%87%E7%BC%96.png?raw=true"><br></table><p>Asm选项和“C/C++”类似，只是这里针对的是Asm汇编。因此，这一章节只简述，不会重点强调，可以参看上一章节进行对比，第3、4、5处和C/C++选项一样，这里不讲述。</p><p><font face="黑体" color="green" size="4">第1处：条件控制符号（Conditional Assembly Control Symbols）</font><br>指定汇编条件，这里类似上一章节C/C++选项中的预处理。</p><p><font face="黑体" color="green" size="4">第2处：语言代码生成（Language / Code Generation）</font><br>Read-Only Position Independent：为常量生成独立的代码空间。</p><p>Read-Write Position Independent：为可读写代码生成独立的代码空间。</p><p>Thumb Mode：Thumb模式。</p><p>Split Load and Store Multiple：加载和存储多个分裂。</p><p>Execute only Code：只生成执行代码；</p><p>No Auto Includes：不自动添加头文件（一般不勾选）。</p><h1 id="四、Linker链接"><a href="#四、Linker链接" class="headerlink" title="四、Linker链接"></a>四、Linker链接</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/5.Linker%E9%93%BE%E6%8E%A5.png?raw=true"><br></table><p>Linker链接器配置选项。可以修改、编辑和查看链接的文件。第1、2处是重点，第3、4处和C/C++选项一样，这里不讲述。</p><p><font face="黑体" color="green" size="4">第1处：内存配置对话框（Use Memory Layout from Target Dialog）</font><br><strong>Make RW Sections Position Independent：使RW段独立</strong><br>【设置编译器命令行：–rwpi】<br>启用时：变量区域（包含RW和ZI）具有独立地址。<br>禁用时：变量区域（包含RW和ZI）位于绝对的内存地址。</p><p><strong>Make RO Sections Position Independent：使RO段独立</strong><br>【设置编译器命令行：–ropi】<br>启用时：常量和代码区域（RO）具有独立地址。<br>禁用时：常量和代码区域（RO）位于绝对的内存地址。</p><p><strong>Don’t Search Standard Libraries：不搜索标准库</strong><br>【设置编译器命令行：–noscanlib】<br>禁用默认编译器运行时库的扫描。</p><p><strong>Report ‘might fail’ Conditions as Errors：报告’might fail’条件认为是错误</strong><br>【设置编译器命令行：–strict】<br>报告的条件可能导致失败的错误，而不是警告。</p><p><strong>X/O Base：X/O基地址</strong><br>【设置编译器命令行：–xo_base=address】</p><p><strong>R/O Base：R/O基地址</strong><br>【设置编译器命令行：–ro_base=address】</p><p><strong>R/W Base：R/W基地址</strong><br>【设置编译器命令行：–rw_base=address】</p><p><strong>disable Warnings:警用警告</strong><br>【设置编译器命令行：–diag_suppress】</p><p><font face="黑体" color="green" size="4">第2处：分散文件（Scatter File）</font><br>这里可以加载、查看和编辑分散文件。点击后面就的三点“…”可以加载文件；点击“Edit…”查看和编辑对应的文件。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/6.%E5%88%86%E6%95%A3%E6%96%87%E4%BB%B6.png?raw=true"><br></table><h1 id="五、Debug调试"><a href="#五、Debug调试" class="headerlink" title="五、Debug调试"></a>五、Debug调试</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/7.Debug%E8%B0%83%E8%AF%95.png?raw=true"><br></table><p>这个选项比较重要，主要用于（软件仿真、硬件在线）调试使用。由于软件仿真和硬件在线调试配置类似，这里只讲述硬件在线调试（右边部分）。</p><p><font face="黑体" color="green" size="4">第1处：选择硬件在线调试</font><br>选择下载调试器，以及对应的设置“Setting”。<br>很多人常用J-Link下载调试器，而调试STM32时，可以使用四线SWD模式。如果使用J-Link进行SWD调试。这个时候就需要在“Setting”里面选择“SW”模式，如下如：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/8.%E9%85%8D%E7%BD%AE%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png?raw=true"><br></table><p><font face="黑体" color="green" size="4">第2处：选择硬件在线调试</font><br>Load Application at Startup：启动时加载应用程序。</p><p>Run to main()：程序执行到main()函数。<br>进入调试模式时，程序自动运行到main函数处。</p><p>Initialization File：加载、编辑初始化文件。<br>这里在某些情况下可以使用，比如：在RAM中调试代码。可以参看我的文章<a href="https://mp.weixin.qq.com/s/lYN-BM_yhqPwOyNyhUW-tg" target="_blank" rel="noopener">《STM32内部RAM在线调试配置方法》</a>。</p><p><font face="黑体" color="green" size="4">第3处：复位调试会话设置（Restore Debug Session Settings）</font><br>这里复位设置就是恢复设置的意思，如果勾选上，点击一下“复位”就会恢复到之前的状态。</p><p>包括：断点Breakpoints、窗口Watch Windows、性能分析器 Performance Analyzer、内存窗口Memory Window、工具箱Toolbox、系统查阅器System Viewer等。</p><p><font face="黑体" color="green" size="4">第4处：DLL文件</font><br>这里的配置属于Keil自身的配置，最好不要修改。<br>CPU/Driver DLL - Parameter：CPU驱动文件和参数。<br>Dialog DLL - Parameter：会话框DLL文件和参数。</p><p><font face="黑体" color="green" size="4">第5处：管理组件描述文件</font><br>Manage Component Viewer Description Files<br>这里一般不用去管理。</p><h1 id="六、Utilities公共"><a href="#六、Utilities公共" class="headerlink" title="六、Utilities公共"></a>六、Utilities公共</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/9.Utilities%E5%85%AC%E5%85%B1.png?raw=true"><br></table><p><font face="黑体" color="green" size="4">第1处：配置FLASH菜单命名（Configure Flash Menu Command）</font><br>这里是二选一选项，一般我们使用上面的“Update Target Driver for Flash Programming”。</p><p>Use Debug Driver：使用调试驱动</p><p>Update Target Before Debugging：调试之前更新目标<br>一般都勾选上，因为我们下载程序之前检测到代码修改了，就会重新编译程序（也就是更新目标）</p><p>Setting：设置<br>很多人下载程序之后，需要复位一下程序才运行，原因在于没有勾选“Reset and Run”，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/10.%E5%A4%8D%E4%BD%8D%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>Init File：加载/编辑初始化文件</p><p><font face="黑体" color="green" size="4">第2处：配置镜像文件（Configure Image File Processing）</font><br>通过在编译过程中调用FCARM，输入配置映像文件处理(FCARM)的选项。这将把镜像文件转换成c源代码。</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文接着上一篇文章&lt;a href=&quot;https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html&quot;&gt;《Keil系列教程05_工程目标选项配置（一）》&lt;/a&gt;讲述的工程目标选项的后五项配置：&lt;strong&gt;C/C++编译、 Asm汇编、 Linker链接、 Debug调试、 Utilities公共&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程05_工程目标选项配置（一）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程05_工程目标选项配置（一）.html</id>
    <published>2018-11-19T07:00:00.000Z</published>
    <updated>2018-11-19T07:45:35.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文讲述的内容是“<strong>Options for Target</strong>”，即<strong>工程目标选项</strong>的配置内容，也就是我们常见的工程配置内容。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>由于目标配置的选项比较多，我将其分为工程目标选项配置（一）和工程目标选项配置（二）两篇文章来讲述。</p><p>目标选项包含了一个工程目标所有的配置信息，这些信息是保存于我们工程（.uvprojx）和对应的（.uvoptx）文件。</p><a id="more"></a><h1 id="二、本文要点"><a href="#二、本文要点" class="headerlink" title="二、本文要点"></a>二、本文要点</h1><p>本文主要讲述的是目标选项的配置，但为了让更多人明白什么是目标选项，首先将简述工作空间、工程、目标的意思和区别。</p><h2 id="2-1-打开目标选项的三种方法"><a href="#2-1-打开目标选项的三种方法" class="headerlink" title="2.1 打开目标选项的三种方法"></a>2.1 打开目标选项的三种方法</h2><p><strong>A.点击“目标选项”快捷按钮</strong>，如开篇第一张图。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p><strong>B.快捷键：Alt + F7</strong><br>提示：如果是配置工程，需选中工程，再按Alt + F7。（如果你选中文件，是对文件的一些配置）</p><p><strong>C.从菜单中打开，Project -&gt; Options for Target</strong>，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/2.%E4%BB%8E%E8%8F%9C%E5%8D%95%E6%89%93%E5%BC%80.png?raw=true"><br></table><h2 id="2-2-本文所讲述的目标选项"><a href="#2-2-本文所讲述的目标选项" class="headerlink" title="2.2 本文所讲述的目标选项"></a>2.2 本文所讲述的目标选项</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/3.%E7%9B%AE%E6%A0%87%E5%89%8D%E4%BA%94%E9%A1%B9.png?raw=true"><br></table><p>由于目标选项里面内容较多，本文只讲述前五项：<strong>Devie设备、 Target目标、 Output输出、 Listing列表、 User用户</strong>。后五项在下一篇文章讲述。</p><p>本文旨在让大部分人明白目标选项的配置，为了使文章内容精简，过于简单和不常用过于复杂的只简述。</p><h1 id="三、工作空间、工程、目标含义和区别"><a href="#三、工作空间、工程、目标含义和区别" class="headerlink" title="三、工作空间、工程、目标含义和区别"></a>三、工作空间、工程、目标含义和区别</h1><p>什么是工程目标选项配置？或许有些人分不清<strong>工作空间、工程、目标</strong>这三个名词的意思和区别，这里就简单讲述一下它们的含义和区别。</p><p>可以关注该系列教程后面新建多工程，多目标的文章。</p><p>工作空间、工程、目标它们三个是从大到小，依次包含的关系：<strong>工作空间 &gt; 工程 &gt; 节点</strong>。也就是说：<strong>一个工作空间可以有多个工程，一个工程可以有多个目标</strong>。示意图，如下：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/4.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E3%80%81%E5%B7%A5%E7%A8%8B%E3%80%81%E7%9B%AE%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png?raw=true"><br></table><p>举个例子：一个<strong>项目</strong>，由<strong>主机</strong>和<strong>从机</strong>组成，但项目为了区分产品的高低端，将产品做成<strong>简单</strong>和<strong>复杂</strong>两个版本（简单版只保留复杂版的部分功能）。举例示意如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/5.%E4%B8%BB%E4%BB%8E%E6%9C%BA%E4%BE%8B%E5%AD%90.png?raw=true"><br></table><p>本节内容不过多描述，在大型的实际项目中容易看见，一般不是很大项目，基本就是一个工程，一个目标或多个目标。</p><p>初学者一般都是<strong>一个工程对应一个目标</strong>，这样简单明了。若初学者不能理解可以略过。</p><h1 id="四、Device设备（器件）"><a href="#四、Device设备（器件）" class="headerlink" title="四、Device设备（器件）"></a>四、Device设备（器件）</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/6.Device%E8%AE%BE%E5%A4%87.png?raw=true"><br></table><p><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">《Keil新建软件工程》</a>第一步就是选择设备（器件）。强调一点就是：<strong>器件可以通过输入查找，也可以通过列表查找</strong>。</p><h1 id="五、Target目标"><a href="#五、Target目标" class="headerlink" title="五、Target目标"></a>五、Target目标</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/7.Target%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>这里说的目标和上面说的工程目标不一样，是工程目标的目标。从内容可以看得出来是工程目标的调试晶振频率、选择的编译器、RAM和ROM分配的地址空间等。</p><font face="黑体" color="green" size="4">第1处：晶振频率</font><br>这个值主要用于仿真调试用，一般我们使用硬件调试可以不用管这个值。<br><br><font face="黑体" color="green" size="4">第2处：操作系统</font><br>很好理解，是否选择Keil自带的RTX操作系统，一般我们都不选。<br><br><font face="黑体" color="green" size="4">第3处：系统预览文件</font><br>这里我们一般是默认使用系统自带，不选择自己定义的。<br><br><font face="黑体" color="green" size="4">第4处：生成代码所选择的编译器<br></font><p><font face="黑体" color="green" size="4">第5处：使用交叉模块优化、使用微库</font><br>交叉模块一般我们不使用，微库这个功能常用与printf函数。</p><p><font face="黑体" color="green" size="4">第6处：ROM存储地址</font><br>这里的ROM存储指的是程序储存的地址，分<strong>片外、片内</strong>两种。</p><p>程序存储在片内好理解（初学者一般下载程序都是下载到片内FLASH）,片外存储程序对于初学者来说比较少见，一般都是项目做大了，或有特殊要求时，片内不够使用了才将程序存储在片外。</p><p><font face="黑体" color="green" size="4">第7处：RAM存储地址</font><br>RAM存储地址和ROM道理一样，可以分片内和片外。</p><h1 id="六、Output输出"><a href="#六、Output输出" class="headerlink" title="六、Output输出"></a>六、Output输出</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/8.Output%E8%BE%93%E5%87%BA.png?raw=true"><br></table><p>输出分两类：<br><strong>1.输出（创建）可执行文件</strong>：我们下载到处理器里面的程序就是该类；</p><p><strong>2.输出库</strong>：对于初学者来说一般不使用库，但对于很多从事特殊行业技术开发的公司来说，可能比较常用该功能。</p><p><font face="黑体" color="green" size="4">第1处：输出路径</font><br>输出路径就是在工程编译的过程中，输出这些文件保存的文件夹。（Keil V5一般默认是保存在Objects文件夹下面）</p><p><font face="黑体" color="green" size="4">第2处：输出可执行文件名</font><br>输出的可执行文件和库的名称就是在这里定义。比如我们常见输出Hex文件，其名称就是这里定义的。</p><p><font face="黑体" color="green" size="4">第3处：输出可执行文件</font><br>这里和输出库是二选一，选择了输出可执行文件就不能选择输出库。</p><p>Debug Infomation：输出调试信息。勾选上这个选项，我们才可以进行调试。</p><p>Create HEX File：输出可执行Hex文件。很多初学的朋友问：“在哪里设置生成Hex?”，这里勾选上就行了。</p><p>Browse Information：输出浏览信息。勾选上这个我们才能使用go to definition of这个功能。很多人问：“为什么我不能跟踪代码了”，原因就在这里。</p><p>提示：输出这些中间文件都很费时间，如果都不勾选这些选项，编译速度会很快。</p><p><font face="黑体" color="green" size="4">第4处：输出库</font><br>选择输出库，上面可执行文件就不能输出。<br>提示：这里输出（生成）的是静态库，并非动态库。</p><h1 id="七、Listing列表"><a href="#七、Listing列表" class="headerlink" title="七、Listing列表"></a>七、Listing列表</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/9.Listing%E5%88%97%E8%A1%A8.png?raw=true"><br></table><p>这个选项是关于生成列表相关的选项，对代码分析比较透彻的工程师就需要了解这个选项。常见的map地址的分布，就是在这里配置生成的。</p><p><font face="黑体" color="green" size="4">第1处：输出路径、宽高<br></font><br>选择列表文件输出的文件夹。可设置文件页面的宽度，长宽。</p><p><font face="黑体" color="green" size="4">第2处：输出汇编列表</font><br>勾选上会输出汇编列表信息（产生后缀为 .lst的文件）。如果工程中没汇编文件，则不会输出信息。</p><p><font face="黑体" color="green" size="4">第3处：C编译列表</font><br>C编译程序列表选项，勾选上可生成.txt, .i文件。</p><p><font face="黑体" color="green" size="4">第4处：链接列表</font><br>可选择生成或禁止生成.map文件。可设置生成代码的详细信息。可选择性的选取输出MAP文件。</p><h1 id="八、User用户选项"><a href="#八、User用户选项" class="headerlink" title="八、User用户选项"></a>八、User用户选项</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/10.User%E7%94%A8%E6%88%B7%E9%80%89%E9%A1%B9.png?raw=true"><br></table><p>这个选项是针对用户而设计的，方便用户执行一些程序。比如：编译完代码之后，我要将生成的Hex文件拷贝到其它地方。</p><p>纵观上图可以看见，第1、2、3处功能类似，都是让用户运行程序，只是运行的条件不同而已。</p><p>这里可以参看曾在微信公众号分享过的一篇文章<a href="https://mp.weixin.qq.com/s/LIJ7XD33aZyYBFY2Z4nUnw" target="_blank" rel="noopener">《MDK-ARM如何通过配置命令生产Bin文件》</a></p><p><font face="黑体" color="green" size="4">第1处：编辑之前运行用户程序<br></font></p><p><font face="黑体" color="green" size="4">第2处：编译之前运行用户程序<br></font></p><p><font face="黑体" color="green" size="4">第3处：编译之后运行用户程序<br></font></p><p><font face="黑体" color="green" size="4">第4处：编译之后执行条件<br></font><br>Run “After Build” conditionally：执行条件；<br>Beep When Complete：编译完成发出声音；<br>Start Debugging：启动调试程序。</p><h1 id="九、说明"><a href="#九、说明" class="headerlink" title="九、说明"></a>九、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="十、最后"><a href="#十、最后" class="headerlink" title="十、最后"></a>十、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文讲述的内容是“&lt;strong&gt;Options for Target&lt;/strong&gt;”，即&lt;strong&gt;工程目标选项&lt;/strong&gt;的配置内容，也就是我们常见的工程配置内容。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;由于目标配置的选项比较多，我将其分为工程目标选项配置（一）和工程目标选项配置（二）两篇文章来讲述。&lt;/p&gt;
&lt;p&gt;目标选项包含了一个工程目标所有的配置信息，这些信息是保存于我们工程（.uvprojx）和对应的（.uvoptx）文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程.html</id>
    <published>2018-11-16T01:30:00.000Z</published>
    <updated>2018-11-16T01:22:40.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【CANOpen系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_%E5%88%9D%E8%AF%86CAN%E4%B8%8ECANOpen%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9.html">1.CANOpen系列教程01_初识CAN与CANOpen及相关内容</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE.html">2.CANOpen系列教程02_理解CAN总线协议</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8.html">3.CANOpen系列教程03_CAN收发器功能、原理及作用</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.html">4.CANOpen系列教程04_CAN总线波特率、位时序、帧类型及格式说明</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A.html">5.CANOpen系列教程05_CAN总线同步与位填充、优先级的决定</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89.html">6.CANOpen系列教程06_结合代码理解CAN底层收发数据（含STM32例程）</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_CANOpen%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0.html">7.CANOpen系列教程07_CANOpen协议概述</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html">8.CANOpen系列教程08_CANOpen通信接口引导学习</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.html">9.CANOpen系列教程09_CANOpen对象字典</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">10.CANOpen系列教程10_关于Canfestival及对象字典生成工具环境搭建</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html">11.CANOpen系列教程11_深度分析CanFestival_3架构</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E.html">12.CANOpen系列教程12_对象字典编辑器操作说明</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html">13.CANOpen系列教程13_协议源码移植（一）</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【CANOpen系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【EmbeddedDevelop】&lt;/a&gt;，关注微信公众号回复【CANOpen系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程13_协议源码移植（一）</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程13_协议源码移植（一）.html</id>
    <published>2018-11-16T01:00:00.000Z</published>
    <updated>2018-11-16T01:35:17.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　基于Canfestival框架的CANOpen协议栈移植教程网上流传着许多，而且有一份不知道被复制、粘贴了多少遍的“CANOpen移植教程”相信许多朋友都知道。</p><p>　　同时，百度、谷歌还能搜出许多所谓“移植代码”。其实，这许多内容，对初学者并没有多大帮助。相反，我觉得还有误导的作用。</p><p>　　我认为基于Canfestival框架的CANOpen协议栈移植<strong>需要做的工作并不多</strong>，但许多初学者无从下手，究其原因还是<strong>有许多内容没有理解到位</strong>。</p><a id="more"></a><p>　　本教程站在初学者角度，尽量将重要内容讲述到位，后面提供移植好的Demo供大家参考学习。</p><h1 id="二、移植准备"><a href="#二、移植准备" class="headerlink" title="二、移植准备"></a>二、移植准备</h1><p>移植前，先让大家认识一下移植的一些准备条件。</p><h2 id="2-1-硬件"><a href="#2-1-硬件" class="headerlink" title="2.1 硬件"></a>2.1 硬件</h2><p>两块带有MCU、CAN控制器和收发器的板卡。</p><p>该移植教程以STM32F1（自带CAN控制器），带有CAN收发器的开发板为例来讲述。</p><p>条件允许的情况下，可以购买一个CAN总线分析仪。没有分析仪的朋友，可以用我<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89.html">《CANOpen系列教程06》</a>提供的一个例程来抓取CAN总线数据。</p><p>因例程在中断里用串口打印传输数据。所以，用例程抓取的CAN总线传输速率不能太快（建议低于20帧/秒）。</p><h2 id="2-2-MCU资源"><a href="#2-2-MCU资源" class="headerlink" title="2.2 MCU资源"></a>2.2 MCU资源</h2><p><strong>1.CAN：</strong>CAN总线通信（<strong>必备</strong>）；<br><strong>2.TIM：</strong>CANOpen协议调度（<strong>必备</strong>）；<br><strong>3.UART：</strong>调试信息（选配）；<br><strong>4.GPIO：</strong>板卡状态指示灯（选配）；</p><h2 id="2-3-STM32标准外设库-FreeRTOS工程"><a href="#2-3-STM32标准外设库-FreeRTOS工程" class="headerlink" title="2.3 STM32标准外设库+FreeRTOS工程"></a>2.3 STM32标准外设库+FreeRTOS工程</h2><p>本教程基于STM32标准外设库和FreeRTOS系统搭建的工程为例（很早之前我分享过），这里不讲述。</p><p>运行RTOS主要是牵涉到CAN总线数据的发送和接收需要两个线程来处理，以及增加一个CANOpen应用程序线程。</p><p>基于其他MCU以及RTOS原理类似，也可参考本文。</p><h2 id="2-4-下载Canfestival源码并搭建好环境"><a href="#2-4-下载Canfestival源码并搭建好环境" class="headerlink" title="2.4 下载Canfestival源码并搭建好环境"></a>2.4 下载Canfestival源码并搭建好环境</h2><p>这里的内容，如果你不明白，请务必先阅读该教程前几篇相关文章。</p><h1 id="三、生成对象字典"><a href="#三、生成对象字典" class="headerlink" title="三、生成对象字典"></a>三、生成对象字典</h1><p>本移植教程重点是将CANOpen协议源码移植到MCU中，使其成功运行。因此，对象字典只配置最基础的“心跳”。</p><p>下面教大家在对象字典编辑器中生成带“心跳”的对象字典。</p><table><br><strong>1.打开编辑器，文件 -&gt; 新建</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/1.%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%8C%E6%96%B0%E5%BB%BA.png?raw=true"><br></table><table><br><strong>2.新建“主站”节点</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/2.%E6%96%B0%E5%BB%BA%E2%80%9C%E4%B8%BB%E7%AB%99%E2%80%9D%E8%8A%82%E7%82%B9.png?raw=true"><br></table><table><br><strong>3.配置心跳信息</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/3.%E9%85%8D%E7%BD%AE%E5%BF%83%E8%B7%B3%E4%BF%A1%E6%81%AF.png?raw=true"><br></table><table><br><strong>4.保存对象字典：文件 -&gt; 保存 -&gt; 保存在一个指定位置</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/4.%E4%BF%9D%E5%AD%98%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.png?raw=true"><br></table><table><br><strong>5.建立对象字典</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/5.%E5%BB%BA%E7%AB%8B%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.png?raw=true"><br></table><p>到这里就生成了三个文件：<strong>TestMaster.od、 TestMaster.c 和 TestMaster.h</strong>需保存好，在后面需要使用这个对象字典源码。</p><p><strong>提示：</strong><br>A.上面牵涉到三个地方保存名字：节点名字、对象字典工程名字、对象字典源文件名字，建议都一样。</p><p>B.主站和从站的生成原理一样，上面是生成主站TestMaster对象字典，从站TestSlave对象字典请按照同样方式生成即可。</p><h1 id="四、提取CANOpen源码"><a href="#四、提取CANOpen源码" class="headerlink" title="四、提取CANOpen源码"></a>四、提取CANOpen源码</h1><p>本节内容主要针对初学者使其更加理解移植的代码工程，将CanFestival中源代码提取做一定说明，并且尽量将源码文件对应到自己工程下。</p><p>当然，本文按照常规方式提取，你也可以按照自己方式提取。同时，整个工程下其它，如STM32标准外设库、FreeRTOS这些文件在这里不作说明。</p><table><br><strong>1.提取头、源文件（如下图）</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/6.%E6%8F%90%E5%8F%96%E5%A4%B4%E3%80%81%E6%BA%90%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>CANOpen\inc目录下19个.h头文件，来自Canfestival-&gt;include下目录19个头文件；</p><p>CANOpen\inc\stm32目录下3个.h头文件来自Canfestival-&gt;include\cm4；<br>其中canfestival.h文件是函数接口定义（声明），函数内容需要自己实现（位于：App\canopen目录下canopen_drv.c）；</p><p>CANOpen\src目录下12个.c源文件，来自Canfestival-&gt;src目录12个源文件（symbols.c源文件为linux下使用的文件，不需要提取）；<br>其中需要删除dcf.c文件下第59、98行前面的“inline”关键字；</p><table><br><strong>2.头文件说明</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/7.%E5%A4%B4%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E.png?raw=true"><br></table><table><br>要修改一下其中的canfestival.h文件：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/8.%E4%BF%AE%E6%94%B9canfestival%E6%96%87%E4%BB%B6.png?raw=true"><br></table><table><br><strong>3.建立canopen文件夹并提取文件</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/9.%E5%BB%BA%E7%AB%8Bcanopen%E6%96%87%E4%BB%B6%E5%A4%B9%E5%B9%B6%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>在工程下建立canopen文件夹，提取相应的文件，同时建立自己的文件：canopen_app和canopen_drv.</p><p>还需要修改一下congfig.h文件，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/10.%E9%9C%80%E4%BF%AEcongfig%E6%96%87%E4%BB%B6.png?raw=true"><br></table><table><br><strong>4.建立CAN和TIM底层驱动文件</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/11.%E5%BA%95%E5%B1%82%E9%A9%B1%E5%8A%A8.png?raw=true"><br></table><p>在上面canfestival.h文件提供了CAN和TIM的驱动接口，但我们这里不用它那一套接口，自己定义在bsp_can和bsp_timer源代码下。</p><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p>为照顾初学者，将移植过程讲述的更加详细，移植工作在下一篇文章还会继续讲述，提前把移植好的、带有“心跳”的Demo工程给大家下载。</p><p><a href="https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw" target="_blank" rel="noopener">https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw</a><br>提取码：l2dc</p><p><strong>提示</strong>：如果链接失效，公众号回复【CANOpen系列教程】获取更新链接；</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　基于Canfestival框架的CANOpen协议栈移植教程网上流传着许多，而且有一份不知道被复制、粘贴了多少遍的“CANOpen移植教程”相信许多朋友都知道。&lt;/p&gt;
&lt;p&gt;　　同时，百度、谷歌还能搜出许多所谓“移植代码”。其实，这许多内容，对初学者并没有多大帮助。相反，我觉得还有误导的作用。&lt;/p&gt;
&lt;p&gt;　　我认为基于Canfestival框架的CANOpen协议栈移植&lt;strong&gt;需要做的工作并不多&lt;/strong&gt;，但许多初学者无从下手，究其原因还是&lt;strong&gt;有许多内容没有理解到位&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程04_菜单概述</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程04_菜单概述.html</id>
    <published>2018-11-14T04:00:00.000Z</published>
    <updated>2018-11-16T01:53:14.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>Keil菜单如下图所示，本文以Keil MDK-ARM为例，Keil C51菜单的大部分内容一样，因此也适用于Keil C51。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/1.%E8%8F%9C%E5%8D%95%E6%80%BB%E8%A7%88.png?raw=true"><br></table><p>Keil有些菜单在<strong>编辑模式和调试模式</strong>下可能有所不同，也就是说在不同模式下有些功能不能使用。</p><p><strong>提示</strong>：在上一篇教程<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《Keil系列教程03_主窗口和工具栏详细说明》</a>中讲述的工具栏按钮属于各菜单的子菜单内容。</p><a id="more"></a><h1 id="二、File文件菜单"><a href="#二、File文件菜单" class="headerlink" title="二、File文件菜单"></a>二、File文件菜单</h1><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/2.File%E6%96%87%E4%BB%B6%E8%8F%9C%E5%8D%95.png?raw=true"><br></table><p><strong>1.New：</strong>新建文件 Ctrl + N<br><strong>2.Open：</strong>打开文件 Ctrl + O<br><strong>3.Close：</strong>关闭文件 Ctrl + W<br><strong>4.Save：</strong>保存当前文件 Ctrl + S<br><strong>5.Save As：</strong>文件另存为<br><strong>6.Save All：</strong>保存所有（文件及工程设置）<br><strong>7.Device DataBase：</strong>器件数据库（信息）<br><strong>8.License Management：</strong>许可证管理<br><strong>9.Print Setup：</strong>打印设置<br><strong>10.Print：</strong>打印 Ctrl + P<br><strong>11.Print Preview：</strong>打印预览<br><strong>12.Exit：</strong>退出（关闭）软件</p><h2 id="三、Edit编辑"><a href="#三、Edit编辑" class="headerlink" title="三、Edit编辑"></a>三、Edit编辑</h2><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/3.Edit%E7%BC%96%E8%BE%91.png?raw=true"><br></table><p>Edit编辑子菜单的大部分内容都位于该教程上一篇文章讲述的<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《工具栏》</a>按钮，这些子菜单内容使用频率较高，所以很多都有快捷键。</p><p><strong>1.Undo：</strong>撤销编辑 Ctrl + Z<br><strong>2.Redo：</strong>恢复编辑 Ctrl + Y<br><strong>3.Cut：</strong>剪切 Ctrl + X<br><strong>4.Copy：</strong>复制 Ctrl + C<br><strong>5.Paste：</strong>粘贴 Ctrl + V<br><strong>6.Navigate Backwards：</strong>跳转到上一步 Ctrl + -<br><strong>7.Navigate Forwards：</strong>跳转到下一步 Ctrl + Shift + -<br><strong>8.Insert/Remove Bookmark：</strong>插入/移除书签 Ctrl + F2<br><strong>9.Go to Next Bookmark：</strong>跳转到下一个书签 F2<br><strong>10.Go to Previous Bookmark：</strong>跳转到上一个书签 Shift + F2<br><strong>11.Clear All Bookmarks：</strong>清除所有标签 Ctrl + Shift + F2<br><strong>12.Find：</strong>查找 Ctrl + F<br><strong>13.Replace：</strong>替换 Ctrl + H<br><strong>14.Find in Files：</strong>在文件中查找文本 Ctrl + Shift + F<br><strong>15.Incremental Find：</strong>逐个查找文本 Ctrl + I<br><strong>16.OutLining：</strong>提纲（如显示函数名称，隐藏函数体）<br><strong>17.Advanced：</strong>（更多）先进功能<br><strong>18.Configuration：</strong>配置</p><h1 id="四、View视图"><a href="#四、View视图" class="headerlink" title="四、View视图"></a>四、View视图</h1><table><br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/4.View%E8%A7%86%E5%9B%BE.png?raw=true"><br></table><p>View菜单包含<strong>状态栏、工具栏、窗口</strong>等视图，在调试模式下比在编辑模式下要多出一些<strong>调试视图窗口</strong>，而上面常规的视图窗口都一样。</p><p><font face="黑体" color="green" size="5">编辑模式基础菜单</font><br><strong>1.Status Bar：</strong>状态栏<br><strong>2.Toolbars：</strong>工具栏<br><strong>3.Project Window：</strong>工程窗口<br><strong>4.Books Window：</strong>书籍窗口<br><strong>5.Functions Window：</strong>函数窗口<br><strong>6.Templates Window：</strong>模板窗口<br><strong>7.Source Browser Window：</strong>源码浏览窗口<br><strong>8.Build Output Window：</strong>编译信息输出窗口<br><strong>9.Error List Window：</strong>错误列表窗口</p><p><font face="黑体" color="green" size="5">调试模式增加菜单</font><br><strong>10.Command Window：</strong>命令显示窗口<br><strong>11.Disassembly Window：</strong>反汇编窗口<br><strong>12.Symbols Window：</strong>模块窗口<br><strong>13.Registers Window：</strong>寄存器窗口<br><strong>14.Call Stack Window：</strong>被调用函数堆栈窗口<br><strong>15.Watch Windows：</strong>查看（变量）窗口<br><strong>16.Memory Windows：</strong>内存窗口<br><strong>17.Serial Windows：</strong>串行UART窗口<br><strong>18.Analysis Windows：</strong>逻辑分析仪窗口<br><strong>19.Trace：</strong>跟踪窗口<br><strong>20.System Viewer：</strong>系统（外围IO、USART、TIM等）窗口<br><strong>21.Toolbox Window：</strong>工具箱窗口<br><strong>22.Periodic Window Update：</strong>窗口周期更新选择</p><table><br><strong>常规View视图</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/5View%E8%A7%86%E5%9B%BE%EF%BC%88%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%EF%BC%89.gif?raw=true"><br></table><h1 id="五、Project工程"><a href="#五、Project工程" class="headerlink" title="五、Project工程"></a>五、Project工程</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/6.Project%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><p>Project菜单<strong>只能在编辑模式下才能使用</strong>，调试模式为灰色不能用。子菜单里面许多内容在后面会详细讲述。</p><p><strong>1.New μVision Project：</strong>新建工程（单工程）<br><strong>2.New Multi-Project Workspace：</strong>新建工作空间<br><strong>3.Open Project：</strong>打开工程<br><strong>4.Close Project：</strong>关闭工程<br><strong>5.Export：</strong>导出（工程）<br><strong>6.Manage：</strong>管理（工程）<br><strong>7.Select Device for Target：</strong>选择工程目标<br><strong>8.Remove item：</strong>移除目标<br><strong>9.Options for Target：</strong>工程目标选项配置 Alt + F7<br><strong>10.Clean Targets：</strong>清除工程<br><strong>11.Build Target：</strong>编译工程目标 F7<br><strong>12.Rebuild all Target files：</strong>重新编译所有目标文件<br><strong>13.Batch Build：</strong>分批编译（多工程编译）<br><strong>14.Translate：</strong>编译当前活动文件 Ctrl + F7<br><strong>15.Stop Build：</strong>停止编译（正在编译时有效）</p><h1 id="六、Flash编程"><a href="#六、Flash编程" class="headerlink" title="六、Flash编程"></a>六、Flash编程</h1><table><br><img align="left" width="150" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/7.Flash%E7%BC%96%E7%A8%8B.png?raw=true"><br></table><p>Flash菜单只有在编辑模式下可以使用，比较简答</p><p><strong>1.Download：</strong>下载程序 F8<br><strong>2.Earse：</strong>擦除芯片FLASH<br><strong>3.Configure Flash Tools：</strong>配置FLASH工具（打开目标对话框选项）</p><h1 id="七、Debug调试"><a href="#七、Debug调试" class="headerlink" title="七、Debug调试"></a>七、Debug调试</h1><table><br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/8.Debug%E8%B0%83%E8%AF%95.png?raw=true"><br></table><p>Debug菜单在两种模式下差异很大，该菜单<strong>基本上用于调试模式</strong>。</p><p><strong>1.Start/Stop Debug Sesion：</strong>开始/停止调试 Ctrl + F5<br><strong>2.Reset CUP：</strong>复位CPU<br><strong>3.Run：</strong>全速运行 F5<br><strong>4.Stop：</strong>停止运行<br><strong>5.Step：</strong>单步调试（进入函数） F11<br><strong>6.Step Over：</strong>逐步调试（跳过函数） F10<br><strong>7.Step Out：</strong>跳出调试（跳出函数） Ctrl + F11<br><strong>8.Run to Cursor Line：</strong>运行到光标处 Ctrl + F10<br><strong>9.Show Next Statemt：</strong>显示正在执行的代码行<br><strong>10.Breakpoints：</strong>查看工程中所有的断点 Ctrl + B<br><strong>11.Insert/Remove Breakpoint：</strong>插入/移除断点 F9<br><strong>12.Enable/Disable Breakpoint：</strong>使能/失能断点 Ctrl + F9<br><strong>13.Disable All Breakpoint：</strong>失能所有断点 Ctrl + Shift + F9<br><strong>14.Kill All Breakpoint：</strong>取消所有断点<br><strong>15.OS Support：</strong>系统支持（打开子菜单访问事件查看器和RTX任务和系统信息）<br><strong>16.Execution Profiling：</strong>执行分析<br><strong>17.Memory Map：</strong>内存映射<br><strong>18.Inline Assembly：</strong>内联汇编<br><strong>19.Function Editor：</strong>函数编辑器<br><strong>20.Debug Setting：</strong>调试设置</p><h1 id="八、Peripherals外设"><a href="#八、Peripherals外设" class="headerlink" title="八、Peripherals外设"></a>八、Peripherals外设</h1><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/9.Peripherals%E5%A4%96%E8%AE%BE.png?raw=true"><br></table><p>Peripherals菜单<strong>只能在调试模式</strong>下使用。Peripherals外设直白的意思就是查看这些寄存器的值。</p><p><strong>1.System Viewer：</strong>查看系统外设<br><strong>2.Core Peripherals：</strong>内核外设</p><h1 id="九、Tools工具"><a href="#九、Tools工具" class="headerlink" title="九、Tools工具"></a>九、Tools工具</h1><table><br><img align="left" width="150" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/10.Tools%E5%B7%A5%E5%85%B7.png?raw=true"><br></table><p>Tools菜单在两种模式下差不多，复杂且不常用，只简述。</p><p><strong>1.Setup PC-Lint：</strong>配置PC-Lint<br><strong>2.Lint：</strong>PC-Lint运行在当前编辑器文件<br><strong>3.Lint all C Source Files：</strong>在您的项目中运行PC-Line C源文件<br><strong>4.Configure Merge Tool：</strong>配置合并工具帮助迁移RTE软件组件文件的特定于应用程序的设置<br><strong>5.Customize Tools Menu：</strong>自定义工具菜单。</p><p>这里相对来说常用一点的就第5项“Customize Tools Menu”，可以自定义工具菜单。比如：我之前在公众号分享过一篇文章<a href="https://mp.weixin.qq.com/s/pqjeq06EWahTxGZHwrdHNg" target="_blank" rel="noopener">《MDK-ARM代码格式化插件AStyle》</a>，就是添加一个自定义的工具菜单。</p><h1 id="十、SVCS版本管理"><a href="#十、SVCS版本管理" class="headerlink" title="十、SVCS版本管理"></a>十、SVCS版本管理</h1><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/11.SVCS%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.png?raw=true"><br></table><p><strong>1.Configure Software Version Control：</strong>配置软件版本控制</p><p>我们一般都不使用这个自带的版本控制系统，较常用的版本管理软件“TortoiseSVN”和“Git”。</p><h1 id="十一、Window窗口"><a href="#十一、Window窗口" class="headerlink" title="十一、Window窗口"></a>十一、Window窗口</h1><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/12.Window%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><p>Window菜单在两种模式下差不多，Window窗口菜单要和前面View视图菜单区别开来。</p><p><strong>1.Reset View to Defaults：</strong>重置窗口布局（µVision默认的Look &amp; Feel)<br><strong>2.Split：</strong>活动编辑器文件分割成两个水平或垂直窗格。<br><strong>3.Close All：</strong>关闭所有打开的编辑器。</p><table><br><strong>重置窗口布局</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/13.%E5%A4%8D%E4%BD%8D%E7%AA%97%E5%8F%A3.gif?raw=true"><br></table><h1 id="十二、Help帮助"><a href="#十二、Help帮助" class="headerlink" title="十二、Help帮助"></a>十二、Help帮助</h1><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/14.Help%E5%B8%AE%E5%8A%A9.png?raw=true"><br></table><p>我写的这系列文章大多数也是参考这里Help帮助菜单，只是这个帮助文档都是英文的。当然，很多内容也是根据我的经验而写成。建议大家有不懂的地方多参考这里的帮助文档。</p><p><strong>1.µVision Help：</strong>打开帮助文档<br><strong>2.Open Books Window：</strong>打开帮助书籍<br><strong>3.Simulated Peripherals for object：</strong>关于外设仿真信息<br><strong>4.Contact Support：</strong>联络支持<br><strong>5.About µVision：</strong>关于</p><h1 id="十三、说明"><a href="#十三、说明" class="headerlink" title="十三、说明"></a>十三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="十四、最后"><a href="#十四、最后" class="headerlink" title="十四、最后"></a>十四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;Keil菜单如下图所示，本文以Keil MDK-ARM为例，Keil C51菜单的大部分内容一样，因此也适用于Keil C51。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/1.%E8%8F%9C%E5%8D%95%E6%80%BB%E8%A7%88.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;Keil有些菜单在&lt;strong&gt;编辑模式和调试模式&lt;/strong&gt;下可能有所不同，也就是说在不同模式下有些功能不能使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：在上一篇教程&lt;a href=&quot;https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html&quot;&gt;《Keil系列教程03_主窗口和工具栏详细说明》&lt;/a&gt;中讲述的工具栏按钮属于各菜单的子菜单内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程03_主窗口和工具栏详细说明</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程03_主窗口和工具栏详细说明.html</id>
    <published>2018-11-05T09:00:00.000Z</published>
    <updated>2018-11-07T09:11:21.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文先让大家简单认识一下Keil的主窗口界面，然后再进一步<strong>认识Keil的文件、编译和调试工具栏</strong>。</p><p>　　<strong>Toolbars工具栏</strong>就是在菜单下面的两行快捷图标按钮，这些快捷按钮之所以在工具栏里面，在于<strong>它们使用的频率较高</strong>。比如保存按钮、编译按钮、下载按钮等。</p><p>　　本文讲述的Toolbars工具栏和大部分上位机软件的工具栏类似，就是一些常用的快捷按钮。</p><p>　　本文以Keil MDK-ARM为例，因Keil C51的工具栏和MDK-ARM类似。因此，本文大部分内容也适用于Keil C51。</p><a id="more"></a><h1 id="二、主窗口界面"><a href="#二、主窗口界面" class="headerlink" title="二、主窗口界面"></a>二、主窗口界面</h1><p>为了让大家对Keil集成开发环境有一个大概的了解，这里先概述一下Keil 默认编辑状态（模式）主窗口界面下各个窗口的含义。</p><p><strong>说明</strong>：Keil主窗口界面在<strong>编辑状态与调试状态</strong>下存在一定差异，本章节主要基于【编辑状态】进行简单的概述，里面详细的内容、以及调试状态下的窗口在该系列教材后续会逐步讲述。</p><p>在编辑模式下，一般会出现类似下图的主窗口界面，如下图：</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/1.%E4%B8%BB%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p><strong>1.Menu Bar菜单栏</strong><br>相信大家对菜单栏都不陌生，包含<strong>File文件、 Edit编辑、 View视图、 Project工程、 Help帮助</strong>等这样的一栏窗口。</p><p>菜单栏是 Keil 比较重要的一个窗口，几乎 Keil 所有操作的内容都包含在里面。同时。在<strong>编辑状态和调试状态</strong>下存在一些不同，后续会详细讲述。</p><p><strong>2.Tool Bar工具栏</strong><br>该窗口是一些常见的快捷按钮，本文<strong>下面会重点讲述</strong>。</p><p><strong>3.Project工程窗口</strong><br>一个工作空间可以包含多个工程，该窗口主要<strong>显示工作空间下面工程项目的内容</strong>（工程、 组、 源代码文件等）。 后续也会讲述新建多工程。</p><p><strong>4.Edit Window编辑窗口</strong><br>该窗口不用多解释，就是我们平时编辑代码的窗口。</p><p><strong>5.Message Window信息窗口</strong><br>该窗口包括编译信息、调试信息、查找信息等一些信息的窗口。</p><p><strong>6.Status Bar状态栏</strong><br>该窗口包含就绪状态、错误警告数量、光标行列、字符编码、键盘Num锁定等一些状态信息。</p><h1 id="三、工具栏"><a href="#三、工具栏" class="headerlink" title="三、工具栏"></a>三、工具栏</h1><p>Keil的Toolbars工具栏共有三种：<strong>File Toolbar文件工具栏、 Build Toolbar编译工具栏、 Debug Toolbar调试工具栏</strong>。</p><p>在两种状态（模式）下呈现不同工具栏。在<strong>编辑状态</strong>时，呈现文件、编译两种工具栏；在<strong>调试状态</strong>时，呈现文件、调试两种工具栏。</p><h2 id="3-1-两种状态下的工具栏"><a href="#3-1-两种状态下的工具栏" class="headerlink" title="3.1 两种状态下的工具栏"></a>3.1 两种状态下的工具栏</h2><table><br><strong>1.编辑状态</strong>包含：File Toolbar文件工具栏、 Build Toolbar编译工具栏；<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/2.%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true"><br></table><table><br><strong>2.调试状态包含</strong>：File Toolbar文件工具栏、 Debug Toolbar调试工具栏；<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/3.%E8%B0%83%E8%AF%95%E8%BE%91%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true"><br></table><h2 id="3-2-工具栏详细内容"><a href="#3-2-工具栏详细内容" class="headerlink" title="3.2 工具栏详细内容"></a>3.2 工具栏详细内容</h2><p>如下图，将编辑状态和调试状态的工具栏按钮分为12类，下面将这12类工具栏按钮依次进行详细说明。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/4.%E5%B7%A5%E5%85%B7%E6%A0%8F%E5%86%85%E5%AE%B9.png?raw=true"><br></table><h3 id="1-文件操作类按钮"><a href="#1-文件操作类按钮" class="headerlink" title="1.文件操作类按钮"></a>1.文件操作类按钮</h3><p>这一类按钮可以说在大部分上位机软件都可见，比较简单，不过多描述。<br><img align="left" width="190" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/5.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%B1%BB.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>New…</td><td>新建文件</td><td>Ctrl + N</td></tr><tr><td>Open</td><td>打开</td><td>Ctrl + O</td></tr><tr><td>Save</td><td>保存当前文件</td><td>Ctrl + S</td></tr><tr><td>Save All</td><td>保存所有文件</td><td>–</td></tr><tr><td>Cut</td><td>剪切</td><td>Ctrl + X</td></tr><tr><td>Copy</td><td>复制</td><td>Ctrl + C</td></tr><tr><td>Paste</td><td>粘贴</td><td>Ctrl + V</td></tr></tbody></table><h3 id="2-文件编辑跳转类按钮"><a href="#2-文件编辑跳转类按钮" class="headerlink" title="2.文件编辑跳转类按钮"></a>2.文件编辑跳转类按钮</h3><p>撤销恢复按钮比较常用，可以使用快捷键代替。<br><img align="left" width="120" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/6.%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91%E8%B7%B3%E8%BD%AC%E7%B1%BB%E6%8C%89%E9%92%AE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Undo</td><td>撤销编辑</td><td>Ctrl + Z</td></tr><tr><td>Redo</td><td>恢复编辑</td><td>Ctrl + Y</td></tr><tr><td>Navigate Backwards</td><td>跳转到上一步</td><td>Ctrl + -</td></tr><tr><td>Navigate Forwards</td><td>跳转到下一步</td><td>Ctrl + Shift + -</td></tr></tbody></table><table><br><strong>撤销恢复</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/7.%E6%92%A4%E9%94%80%E6%81%A2%E5%A4%8D.gif?raw=true"><br></table><table><br><strong>跳转</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/8.%E8%B7%B3%E8%BD%AC.gif?raw=true"><br></table><h3 id="3-书签类按钮"><a href="#3-书签类按钮" class="headerlink" title="3.书签类按钮"></a>3.书签类按钮</h3><p>书签的作用主要是标记位置方便查看。<br><img align="left" width="120" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/9.%E4%B9%A6%E7%AD%BE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Insert/Remove Bookmark</td><td>插入/移除书签</td><td>Ctrl + F2</td></tr><tr><td>Go to Next Bookmark</td><td>跳转到上一个书签</td><td>Shift + F2</td></tr><tr><td>Go to Previous Bookmark</td><td>跳转到下一个书签</td><td>F2</td></tr><tr><td>Clear All Bookmarks</td><td>清空所有书签</td><td>Ctrl + Shift + F2</td></tr></tbody></table><table><br><strong>书签</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/10.%E4%B9%A6%E7%AD%BE.gif?raw=true"><br></table><h3 id="4-选中行操作类按钮"><a href="#4-选中行操作类按钮" class="headerlink" title="4.选中行操作类按钮"></a>4.选中行操作类按钮</h3><p>选中行操作的作用主要就是为了使选中行缩进、注释。<br><img align="left" width="120" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/11.%E9%80%89%E4%B8%AD%E8%A1%8C%E6%93%8D%E4%BD%9C.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Indent Selection</td><td>插入缩进</td><td>Tab</td></tr><tr><td>Unindent Selection</td><td>取消缩进</td><td>Shift + Tab</td></tr><tr><td>Comment Selection</td><td>确定注释</td><td>–</td></tr><tr><td>Uncomment Selection</td><td>取消注释</td><td>–</td></tr></tbody></table><table><br><strong>缩进</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/12.%E7%BC%A9%E8%BF%9B.gif?raw=true"><br></table><table><br><strong>注释</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/13.%E6%B3%A8%E9%87%8A.gif?raw=true"><br></table><h3 id="5-查找文本类按钮"><a href="#5-查找文本类按钮" class="headerlink" title="5.查找文本类按钮"></a>5.查找文本类按钮</h3><p>查找文本意思就是搜索，比较简单，也比较常用。<br><img align="left" width="240" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/14.%E6%9F%A5%E6%89%BE%E6%96%87%E6%9C%AC.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Find in Files</td><td>在文件中查找文本</td><td>Ctrl + Shift + F</td></tr><tr><td>–</td><td>查找文本输入框</td><td>–</td></tr><tr><td>Find</td><td>查找单个文本</td><td>Ctrl + F</td></tr><tr><td>Incremental Find</td><td>逐个查找文本</td><td>Ctrl + I</td></tr></tbody></table><h3 id="6-仿真类按钮"><a href="#6-仿真类按钮" class="headerlink" title="6.仿真类按钮"></a>6.仿真类按钮</h3><p>这些按钮针对仿真时，具有断电标记作用。<br><img align="left" width="150" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/15.%E5%85%B3%E4%BA%8E%E4%BB%BF%E7%9C%9F.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Start/Stop Debug Session</td><td>开始/停止调试</td><td>Ctrl + F5</td></tr><tr><td>Insert/Remove Breakpoint</td><td>插入/移除断点</td><td>F9</td></tr><tr><td>Enable/Disable Breakpoint</td><td>使能/失能断点</td><td>Ctrl + F9</td></tr><tr><td>Disable All Breakpoints</td><td>失能所有断点</td><td>–</td></tr><tr><td>Kill All Breakpoints</td><td>取消所有断点</td><td>Ctrl + Shift + F9</td></tr></tbody></table><h3 id="7-窗口配置类按钮"><a href="#7-窗口配置类按钮" class="headerlink" title="7.窗口配置类按钮"></a>7.窗口配置类按钮</h3><p><img align="left" width="100" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/16.%E7%AA%97%E5%8F%A3%E9%85%8D%E7%BD%AE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Project Windows</td><td>工程窗口</td><td>–</td></tr><tr><td>Configuration</td><td>配置</td><td>–</td></tr></tbody></table><p>工程窗口按钮支持快速打开/关闭某些窗口，和View视图菜单功能一样，工程窗口内容下图：</p><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/17.%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%86%85%E5%AE%B9.png?raw=true"><br></table><h3 id="8-编译类按钮"><a href="#8-编译类按钮" class="headerlink" title="8.编译类按钮"></a>8.编译类按钮</h3><p>这些按钮使用频率较高，特别是编译目标F7快捷键。<br><img align="left" width="165" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/18.%E5%85%B3%E4%BA%8E%E7%BC%96%E8%AF%91.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Translate</td><td>编译当前文件</td><td>Ctrl + F7</td></tr><tr><td>Build Target</td><td>编译工程目标</td><td>F7</td></tr><tr><td>Rebuild all Target files</td><td>重新编译所有目标文件</td><td>–</td></tr><tr><td>Stop Build</td><td>停止编译（正在编译时有效）</td><td>–</td></tr><tr><td>Batch Build</td><td>分批编译(多工程)</td><td>–</td></tr><tr><td>Download</td><td>下载</td><td>F8</td></tr></tbody></table><h3 id="9-工程选项类按钮"><a href="#9-工程选项类按钮" class="headerlink" title="9.工程选项类按钮"></a>9.工程选项类按钮</h3><p><img align="left" width="190" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/19.%E5%B7%A5%E7%A8%8B%E9%80%89%E9%A1%B9.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>–</td><td>工程目标选择框</td><td>–</td></tr><tr><td>Options for Target</td><td>工程目标选项(配置)</td><td>Alt + F7</td></tr></tbody></table><p>一个工程下面可以建立多个目标，<strong>工程目标选择框的目标（STM32F103ZE）也就是当前所选中（使用）的工程目标</strong>（后期会讲述多目标）。</p><p>Options for Target即对选中目标（STM32F103ZE）的配置。</p><h3 id="10-工程项目管理类按钮"><a href="#10-工程项目管理类按钮" class="headerlink" title="10.工程项目管理类按钮"></a>10.工程项目管理类按钮</h3><p><img align="left" width="135" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/20.%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Manage Project Items</td><td>单工程管理</td><td>–</td></tr><tr><td>Manage Multi-Project</td><td>多工程管理</td><td>–</td></tr><tr><td>Manage Run-Time</td><td>管理运行时环境</td><td>–</td></tr><tr><td>Select Software Packs</td><td>选择软件包</td><td>–</td></tr><tr><td>Pack Installer</td><td>软件包安装</td><td>–</td></tr></tbody></table><h3 id="11-调试按钮"><a href="#11-调试按钮" class="headerlink" title="11.调试按钮"></a>11.调试按钮</h3><p><img align="left" width="230" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/21.%E8%B0%83%E8%AF%95%E6%8C%89%E9%92%AE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Reset</td><td>复位</td><td>–</td></tr><tr><td>Run</td><td>全速运行</td><td>F5</td></tr><tr><td>Stop</td><td>停止运行</td><td>–</td></tr><tr><td>Step</td><td>单步运行</td><td>F11</td></tr><tr><td>Step Over</td><td>逐步运行</td><td>F10</td></tr><tr><td>Step Out</td><td>跳出运行</td><td>Ctrl + F11</td></tr><tr><td>Run to Cursor Line</td><td>运行到光标行</td><td>Ctrl + F10</td></tr><tr><td>Show Next Statement</td><td>跳转到暂停行</td><td>-</td></tr></tbody></table><h3 id="12-调试窗口开关按钮"><a href="#12-调试窗口开关按钮" class="headerlink" title="12.调试窗口开关按钮"></a>12.调试窗口开关按钮</h3><p>调试视图窗口开关按钮这里就不说了，<strong>快捷按钮内容就是View视图菜单下的内容</strong>（如下图）。在后面《菜单》、《调试》还会继续讲述。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/23.%E8%B0%83%E8%AF%95%E8%A7%86%E5%9B%BE%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文先让大家简单认识一下Keil的主窗口界面，然后再进一步&lt;strong&gt;认识Keil的文件、编译和调试工具栏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Toolbars工具栏&lt;/strong&gt;就是在菜单下面的两行快捷图标按钮，这些快捷按钮之所以在工具栏里面，在于&lt;strong&gt;它们使用的频率较高&lt;/strong&gt;。比如保存按钮、编译按钮、下载按钮等。&lt;/p&gt;
&lt;p&gt;　　本文讲述的Toolbars工具栏和大部分上位机软件的工具栏类似，就是一些常用的快捷按钮。&lt;/p&gt;
&lt;p&gt;　　本文以Keil MDK-ARM为例，因Keil C51的工具栏和MDK-ARM类似。因此，本文大部分内容也适用于Keil C51。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程12_对象字典编辑器操作说明</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程12_对象字典编辑器操作说明.html</id>
    <published>2018-11-05T05:00:00.000Z</published>
    <updated>2018-11-05T09:41:09.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　教程前面文章讲述了<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《对象字典生成工具环境搭建》</a>，因为对象字典在CANOpen中的分量比较重。所以，关于对象字典的内容，及对象字典编辑工具也需要我们深入了解。</p><p>　　对象字典编辑器这个工具的操作并不难，这里需要强调两点：<strong>1.先了解</strong><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html">「CANOpen通信接口」</a>相关知识； <strong>2.理论结合实践</strong>，只看不动手实践操作，想要掌握这些知识就很难。</p><p>　　本文讲述的内容在该教程前一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html">《CanFestival_3架构》</a>中“开发一个新节点”就有提到。本文将更加全面讲解这部分内容。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、对象字典编辑器操作步骤"><a href="#二、对象字典编辑器操作步骤" class="headerlink" title="二、对象字典编辑器操作步骤"></a>二、对象字典编辑器操作步骤</h1><p>依然，针对初学的朋友，讲述的非常基础，希望初学的朋友先阅读该教程前面的文章。我们基于Windows的GUI图形化界面为例，</p><h2 id="1-下载并搭建好环境"><a href="#1-下载并搭建好环境" class="headerlink" title="1.下载并搭建好环境"></a>1.下载并搭建好环境</h2><p>请参看<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《对象字典生成工具环境搭建》</a>！</p><h2 id="2-运行对象字典编辑器"><a href="#2-运行对象字典编辑器" class="headerlink" title="2.运行对象字典编辑器"></a>2.运行对象字典编辑器</h2><p>保证环境搭建没有问题，双击objdictgen目录下的objdictedit.py（或进入该目录，以命令方式运行）：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/1.%E6%88%90%E5%8A%9F%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8.png?raw=true"><br></table><h2 id="3-创建一个新节点"><a href="#3-创建一个新节点" class="headerlink" title="3.创建一个新节点"></a>3.创建一个新节点</h2><p><strong>文件 -&gt; 新建</strong>，出现创建节点界面，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/2.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E8%8A%82%E7%82%B9.png?raw=true"><br></table><p><strong>A.类型</strong>：可选主、从节点；<br><strong>B.名字</strong>：自己定义节点名称；<br><strong>C.Profile</strong>：配置，如DS401等；<br><strong>D.网络管理</strong>：是否选择相关网络管理（请先了解网络管理）；</p><p>初学者可以从基础学起，如上图最简单方式配置，这里以新建从节点“SlaveNode”为例。</p><p><strong>提示</strong>：这里SlaveNode是从节点的名字，是<strong>生成对象字典（代码）的名字</strong>，和保存的名字有区别。</p><h2 id="4-配置对象字典"><a href="#4-配置对象字典" class="headerlink" title="4.配置对象字典"></a>4.配置对象字典</h2><p>创建节点确认后，会进入对象字典配置界面。此时，你会发现里面内容就是之前讲述的对象字典索引，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/3.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%B4%A2%E5%BC%95.png?raw=true"><br></table><p>对象字典内容很多，大概就分为如上图几类。图形化界面，配置方式可以说很简单。也就是对字典的16 位索引和 8 位子索引进行配置。</p><p>当然，我这里不会一一讲述每项内容，后面会结合例程，针对性讲述相关内容。配置方法大致如下三步骤：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/4.%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BB%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><h2 id="5-保存对象字典"><a href="#5-保存对象字典" class="headerlink" title="5.保存对象字典"></a>5.保存对象字典</h2><p><strong>文件 -&gt; 保存，输入对象字典（工程）名称</strong>。</p><p>我们这里的名称，我把叫做其“工程名称”，建议与前面创建节点名字一样（当然，这两个名字意义不一样，所以也可以不一样）。</p><p>这个对象字典（工程）是用于后面升级或者更改使用，所以建议保存好。</p><h2 id="6-生产对象字典"><a href="#6-生产对象字典" class="headerlink" title="6.生产对象字典"></a>6.生产对象字典</h2><p><strong>文件 -&gt; 建立词典，选择保存的路径</strong>。</p><p>此时，就会看到两个源代码文件：SlaveNode.c和SlaveNode.h文件。这两个文件就是我们最终需要的对象字典源文件。</p><h2 id="7-其他操作"><a href="#7-其他操作" class="headerlink" title="7.其他操作"></a>7.其他操作</h2><p><strong>A.文件 -&gt; 导出成EDS文件</strong>，这里可以到处EDS用于其他对象编辑工具使用；<br><strong>B.帮助</strong>，关于这个工具很多内容，都可以通过帮助菜单找到答案。</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　教程前面文章讲述了&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html&quot;&gt;《对象字典生成工具环境搭建》&lt;/a&gt;，因为对象字典在CANOpen中的分量比较重。所以，关于对象字典的内容，及对象字典编辑工具也需要我们深入了解。&lt;/p&gt;
&lt;p&gt;　　对象字典编辑器这个工具的操作并不难，这里需要强调两点：&lt;strong&gt;1.先了解&lt;/strong&gt;&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html&quot;&gt;「CANOpen通信接口」&lt;/a&gt;相关知识； &lt;strong&gt;2.理论结合实践&lt;/strong&gt;，只看不动手实践操作，想要掌握这些知识就很难。&lt;/p&gt;
&lt;p&gt;　　本文讲述的内容在该教程前一篇文章&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html&quot;&gt;《CanFestival_3架构》&lt;/a&gt;中“开发一个新节点”就有提到。本文将更加全面讲解这部分内容。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程02_新建基础软件工程</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程02_新建基础软件工程.html</id>
    <published>2018-11-01T07:00:00.000Z</published>
    <updated>2018-11-01T07:33:26.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　目前Keil的四款产品（软件）：<strong>MDK-ARM、C51、C251、C166</strong>，在用法上极为相似，包括本文讲述的新建软件工程。</p><p>　　本文以目前（2018年10月）<strong>最新Keil MDK-ARM V5.26、STM32F103标准外设库为例</strong>，来给大家讲述新建软件工程的具体步骤。</p><p>　　本文讲述的新建软件工程，只是最基础的软件工程（一个工程，一个目标）。其中只修改了必要的配置，大部分配置默认。</p><p>　　如果你是Keil C51、或者其它MCU器件，本文也适用，只是针对MCU器件有略微差异。</p><a id="more"></a><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><p>俗话说“磨刀不误砍柴工”，做好了准备工作，后面新建基础软件工程的工作就很容易实现了。</p><p>这里针对STM32会下载“标准外设库”这个准备工作，如果你是C51，或者不用库，这个准备工作就可略过。</p><h2 id="2-1-下载安装Keil工具"><a href="#2-1-下载安装Keil工具" class="headerlink" title="2.1 下载安装Keil工具"></a>2.1 下载安装Keil工具</h2><p>本文必备工具，详情请参看该系列教程上一篇文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C.html">《Keil系列教程01_Keil介绍、下载、安装与注册》</a>。</p><h2 id="2-2-下载STM32标准外设库"><a href="#2-2-下载STM32标准外设库" class="headerlink" title="2.2 下载STM32标准外设库"></a>2.2 下载STM32标准外设库</h2><p>这一节是准备源代码（库），如果你使用C51、寄存器开发，本节内容可以略过。下面提供官方下载链接，嫌麻烦的朋友可以在我百度网盘下载。</p><p><strong>A.官网下载</strong><br><a href="http://www.st.com/content/st_com/en/products/embedded-software/mcus-embedded-software/stm32-embedded-software.html?querycriteria=productId=SC961" target="_blank" rel="noopener">http://www.st.com/content/st_com/en/products/embedded-software/mcus-embedded-software/stm32-embedded-software.html?querycriteria=productId=SC961</a></p><p>根据芯片型号下载对应的标准外设库（如芯片为STM32F103ZE，则下载对应的<strong>STM32F10x_StdPeriph_Lib</strong>），如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/1.ST%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E4%B8%8B%E8%BD%BD.png?raw=true"><br></table><p><strong>B.百度网盘</strong><br><a href="http://pan.baidu.com/s/1qYbBKMK" target="_blank" rel="noopener">http://pan.baidu.com/s/1qYbBKMK</a></p><p><strong>提示</strong>：如果以上链接失效，可以关注微信公众号，获取更新链接。</p><h2 id="2-3-整理工程文件夹"><a href="#2-3-整理工程文件夹" class="headerlink" title="2.3 整理工程文件夹"></a>2.3 整理工程文件夹</h2><p>这一小节的内容可根据自己习惯来整理，我整理的文件及文件夹结构是按照常规的整理方式。你如果觉得合理，可以引用；</p><p>首先建立一个存放工程文件的总文件夹：<strong>STM32F103ZE（Keil）_Demo</strong></p><p><strong>A.提取ST标准外设库文件</strong><br>ST标准外设库里面源代码文件我们只需要使用部分文件。因此，提取需要使用的文件及文件夹到我们的工程中。</p><p>解压“STM32F10x_StdPeriph_Lib”，可以看到在主目录下面有四个文件夹：<br><strong>_htmresc</strong>：图片文件夹（不提取）<br><strong>Libraries</strong>：库文件夹（<strong>提取大部分</strong>）<br><strong>Project</strong>：  示例工程（<strong>提取少部分</strong>）<br><strong>Utilities</strong>： 公共代码、评估板代码（不提取）</p><p>我们需要使用Libraries和Project目录下的文件，但也有部分不用。因此，我们需要删除不用的文件。（具体保留了哪些，可以下载我提供例程查看）</p><p><strong>B.新建文件和文件夹</strong><br>除了上面提取的文件之外，我们需要建立存放自己代码的文件和文件夹。我这里主要新建三个文件夹：<br><strong>App</strong>: 应用部分代码<br><strong>Bsp</strong>: 底层部分代码<br><strong>Doc</strong>: 说明文档</p><p>在新建的文件夹下面还需要新建自己的源文件，源文件里面添加源代码。我们提供的Demo工程，实现的一个LED闪烁的功能。（这里不描述）。</p><p>上面两个步骤完成之后，我们就可以看到在“STM32F103ZE（Keil）_Demo”下面整理的文件夹：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2.%E5%B7%A5%E7%A8%8B%E4%B8%BB%E7%9B%AE%E5%BD%95.png?raw=true"><br></table><p>至此，准备工作算完成了，上面提取的文件、新建的文件里面具体的内容请下载Demo工程查看。</p><h1 id="三、新建软件工程"><a href="#三、新建软件工程" class="headerlink" title="三、新建软件工程"></a>三、新建软件工程</h1><p>新建一个简单、基础的软件工程大概需要有三个步骤：<strong>建立工程、添加文件和配置工程</strong>。</p><p>上面的准备工作做好之后，就可新建自己的软件工程了，下面将一步一步讲述从零开始新建一个软件工程的详细过程。</p><h2 id="3-1-建立工程"><a href="#3-1-建立工程" class="headerlink" title="3.1 建立工程"></a>3.1 建立工程</h2><p>建立工程的步骤是基础，也比较简单，下面一步一步教大家新建一个空的工程。</p><table><br><strong>A.打开软件,新建立工程</strong>（Project -&gt; New uVision Project）<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/3.%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><table><br><strong>B.选择保存路径，保存名称</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/4.%E4%BF%9D%E5%AD%98%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6.png?raw=true"><br></table><table><br><strong>C.选择芯片型号</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/5.%E9%80%89%E4%B8%AD%E8%8A%AF%E7%89%87%E5%9E%8B%E5%8F%B7.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/6.%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83.png?raw=true"><br></table><table><br><strong>D.基础工程</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/7.%E7%A9%BA%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><p>一个基础的工程就完成了，但还不够，还需要下面的步骤。</p><h2 id="3-2-添加文件"><a href="#3-2-添加文件" class="headerlink" title="3.2 添加文件"></a>3.2 添加文件</h2><p>准确的来说，应该是<strong>添加组（文件夹）和添加文件</strong>。直接的说，就是将你自己的源代码（前面提取的库、新建的文件等）添加到工程中。</p><p>这里的工程项目管理可根据自己的想法来定义（类似于自己分类、命名文件夹和文件），我这里按照常规的方式进行管理项目。</p><p>点击<strong>“项目管理”快捷按钮</strong>，或者Project -&gt; Manage -&gt; Project Items 进入“项目管理”界面。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/8.%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%8C%89%E9%92%AE.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/9.%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%AF%B4%E6%98%8E.png?raw=true"><br></table><p>·<br>·</p><table><br>一步一步添加，直到最后完成<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/10.%E6%B7%BB%E5%8A%A0%E7%BB%84%E5%92%8C%E6%96%87%E4%BB%B6%EF%BC%88%E5%8A%A8%E7%94%BB%EF%BC%89.gif?raw=true"><br></table><br>·<br>·<br><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/11.%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%AE%8C%E6%88%90.png?raw=true"><br></table><h2 id="3-3-配置工程"><a href="#3-3-配置工程" class="headerlink" title="3.3 配置工程"></a>3.3 配置工程</h2><p>配置工程对于初学者来说，大部分内容只需要默认即可，这里只讲述几个常见的配置，能满足基本的功能。</p><table><br><strong>A.点击“工程目标选项”进入配置</strong>（或Project -&gt; Options for Target）<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/12.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E6%8C%89%E9%92%AE%E5%BF%AB%E6%8D%B7%E6%8C%89%E9%92%AE.png?raw=true"><br></table><p><strong>B.输出Hex文件</strong><br>很多朋友初学的朋友都会问怎么输出Hex，只需要勾选上【Project -&gt; Options for Target -&gt; Output】“Create HEX File”即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/13.%E8%BE%93%E5%87%BAHEX.png?raw=true"><br></table><p><strong>C.C/C++配置</strong><br>这个选项的配置参数比较多，对于大型项目来说比较重要，但对于初学者来说，只需要简单配置两项就行。</p><p><strong>第一处配置—预定义：</strong><br>【这里以STM32F103大容量芯片为例】</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/14.%E9%A2%84%E5%AE%9A%E4%B9%89.png?raw=true"><br></table><p>预定义STM32F10X_HD，等同于#define STM32F10X_HD.</p><p>有些工程还预定义USE_STDPERIPH_DRIVER。由于都是使用“标准外设库”，我个人习惯把USE_STDPERIPH_DRIVER，定义在stm32f10x.h文件里面，所以在这里就看不到我定义的这一项了。</p><p><strong>第二处配置—包含路径：</strong><br>由于我们前面工程中有很多文件夹，因此需要添加对应的路径，这样编译器才能找得到。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/15.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E6%8C%89%E9%92%AE.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/16.%E7%82%B9%E5%87%BB%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84.png?raw=true"><br></table><p>·<br>·</p><table><br>一步一步添加，直到最后完成<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/17.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%EF%BC%88%E5%8A%A8%E7%94%BB%EF%BC%89.gif?raw=true"><br></table><br>·<br>·<br><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/18.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E5%AE%8C%E6%88%90.png?raw=true"><br></table><p><strong>D.选择下载调试工具</strong><br>这个选项根据自己的下载调试器来选择（比如：ST-Link）</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/19.%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BD%E5%99%A8.png?raw=true"><br></table><p><strong>E.下载复位并运行设置</strong><br>有些初学的朋友说“为什么我下载程序之后，需要按一下复位键才能运行？”，只需要在工程中勾选上“Reset and Run”就可实现，下载完程序马上运行了。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/20.%E5%A4%8D%E4%BD%8D%E8%BF%90%E8%A1%8C%E8%AE%BE%E7%BD%AE1.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/21.%E5%A4%8D%E4%BD%8D%E8%BF%90%E8%A1%8C%E8%AE%BE%E7%BD%AE2.png?raw=true"><br></table><p>至此，一个新建立的工程就算完成了（当然，我新建的文件是添加了正确的源代码），只需要编译，接上下载器就可以下载运行了。</p><h1 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h1><p>为方便广大STM32学习者，我将常见的STM32“Demo软件工程”已经建好，里面还包含EWARM建立的工程供大家下载。</p><p>STM32F0工程模板:<br><a href="http://pan.baidu.com/s/1pKSkSxt" target="_blank" rel="noopener">http://pan.baidu.com/s/1pKSkSxt</a></p><p>STM32F1工程模板:<br><a href="http://pan.baidu.com/s/1c1AWupM" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1AWupM</a></p><p>STM32F2工程模板:<br><a href="http://pan.baidu.com/s/1o8yGWg6" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8yGWg6</a></p><p>STM32F3工程模板:<br><a href="http://pan.baidu.com/s/1boVXh2f" target="_blank" rel="noopener">http://pan.baidu.com/s/1boVXh2f</a></p><p>STM32F4工程模板:<br><a href="http://pan.baidu.com/s/1qYzYMuS" target="_blank" rel="noopener">http://pan.baidu.com/s/1qYzYMuS</a></p><p>STM32L1工程模板:<br><a href="https://pan.baidu.com/s/1rNPC3JQD7iLchVUEJlTjCQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1rNPC3JQD7iLchVUEJlTjCQ</a></p><p><strong>提示</strong>：如果以上链接失效，可以关注微信公众号，获取更新链接。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　目前Keil的四款产品（软件）：&lt;strong&gt;MDK-ARM、C51、C251、C166&lt;/strong&gt;，在用法上极为相似，包括本文讲述的新建软件工程。&lt;/p&gt;
&lt;p&gt;　　本文以目前（2018年10月）&lt;strong&gt;最新Keil MDK-ARM V5.26、STM32F103标准外设库为例&lt;/strong&gt;，来给大家讲述新建软件工程的具体步骤。&lt;/p&gt;
&lt;p&gt;　　本文讲述的新建软件工程，只是最基础的软件工程（一个工程，一个目标）。其中只修改了必要的配置，大部分配置默认。&lt;/p&gt;
&lt;p&gt;　　如果你是Keil C51、或者其它MCU器件，本文也适用，只是针对MCU器件有略微差异。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程11_深度分析CanFestival_3架构</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程11_深度分析CanFestival_3架构.html</id>
    <published>2018-11-01T06:00:00.000Z</published>
    <updated>2018-11-01T07:20:05.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　教程上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《关于Canfestival及对象字典生成工具环境搭建》</a>中我们简单认识了一下Canfestival这套免费开源CANOpen协议的框架。</p><p>　　那么，本文将会以下载的PDF手册（源码里面也有）为导向，来深入解析Canfestival这套框架。</p><p>　　本文大概分两部分来讲述：<br>　　1.manual手册概要内容；<br>　　2.解析Canfestival源码；</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、manual手册概要内容"><a href="#二、manual手册概要内容" class="headerlink" title="二、manual手册概要内容"></a>二、manual手册概要内容</h1><p>请先下载我们教程上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《关于Canfestival及对象字典生成工具环境搭建》</a>提到的PDF手册（解压源码，在目录objdictgen\doc下面也有manual_en.pdf手册文档）。</p><p>打开PDF手册，我们可以清楚的看到手册共有12章。对于使用STM32开发的初学者来说，相对重要一点的章节有：2, 3, 4, 9这些章节。</p><p>为了照顾初学者，这里先把每一章节内容概述一下，后面在重点讲述部分的内容。</p><h2 id="2-1-内容概要"><a href="#2-1-内容概要" class="headerlink" title="2.1 内容概要"></a>2.1 内容概要</h2><p><strong>第1章Introduction介绍</strong><br>主要介绍了CanFestival是一个开源(LGPL和GPL) CANopen框架，CanFestival项目的起源及支持。同时，也介绍了什么是CANOpen协议，以及协议相关的规范。</p><p><strong>第2章CanFestival特征</strong><br>1.工具：提供对象字典GUI图形化编辑器、代码生成，以及脚本等配套工具；<br>2.多平台：库源代码是ANSI标准C，支持多平台编译和开发；<br>3.CANopen标准：支持DS-301、302、305等标准的CANOpen协议。</p><p><strong>第3章How to start如何开始</strong><br>这一章节其实主要就是对一些环境的要求和配置，及如何获取CanFestival等。</p><p>其实，对我我们使用MCU开发的人来说，重要的就是对象字典编辑和生成工具的环境（具体请参看教程上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《对象字典生成工具环境搭建》</a>）。其它基于Windows、Linux开发的环境，大家可以参考文档配置一下，这里不讲述。</p><p><strong>第4章理解Canfestival</strong><br>主要讲述：理解源代码文件目录划分情况、在应用程序中实现CanFestival以及源文件结构关系、CAN底层驱动接口的调用和实现、对事件调度的实现方法。</p><p>本章节内容直接牵涉源代码相关内容，所以说比较重要，下面章节将进一步详解。</p><p><strong>第5、6章</strong><br>这两章节主要是针对Linux、Windows平台的配置和开发相关内容，感兴趣朋友可以认真研究一下，这里不讲述。</p><p><strong>第7章</strong><br>主要讲述源码提供的HCS12例程相关的编译、下载、硬件连接以及演示。这里参考意义也不大，如果你有对应的板卡，可以参考进行演示一下。</p><p><strong>第8章例程和测试程序</strong><br>这一章节讲述了配套提供的一些例程的相关说明。比如TestMasterSlave主从站测试例程中心跳发生器时间为1000毫秒等。</p><p>这些说明在源代码中也有，通过查看提供的源代码一目了然。所以，参看价值也不是很大。</p><p><strong>第9章开发一个新节点</strong><br>这一章比较重要，我们开发一个新的节点，就需要编辑其对象字典，那么就需要通过编辑器编辑对象字典并生成代码。</p><p>简单的说，这章节的重要内容就是让你学会<strong>如何使用这个对象字典编辑器工具</strong>。</p><p><strong>第10章FAQ常见问题</strong><br>这一章节，初学者能看懂的还建议看下有些问题可能对你有帮助，比如：CanFestival3是否符合DS301 V4.02版本?</p><p><strong>第11章文档资源</strong><br>主要就是一些参考网址。</p><p><strong>第12章关于这个项目</strong><br>不是重点，可以了解一下这些信息。</p><h1 id="三、解析Canfestival源码"><a href="#三、解析Canfestival源码" class="headerlink" title="三、解析Canfestival源码"></a>三、解析Canfestival源码</h1><h2 id="3-1-源文件目录"><a href="#3-1-源文件目录" class="headerlink" title="3.1 源文件目录"></a>3.1 源文件目录</h2><p>解压下载的源码压缩包，会看到如下图文件及文件夹：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84/1.%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p>我们主要需要的三个.c .h源文件目录：<br><strong>drivers</strong>：底层驱动；<br><strong>include</strong>：.h头文件；<br><strong>src</strong>：.c源代码；</p><p>一个对象字典生成工具：<br><strong>objdictgen</strong>：object dictionary generate.</p><p><strong>examples</strong>：例程，初学者可以参考；</p><h2 id="3-2-源代码结构关系及应用程序如何实现"><a href="#3-2-源代码结构关系及应用程序如何实现" class="headerlink" title="3.2 源代码结构关系及应用程序如何实现"></a>3.2 源代码结构关系及应用程序如何实现</h2><p>这里有一张源文件的结构关系图，大致就是将源文件按照其作用进行了划分，初学者需要多看多理解。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84/2.%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB.png?raw=true"><br></table><p>从图中我们可以看出，将源代码划分成三块。中间的Library库文件我们不会去动它。主要修改左右两边的代码。</p><p>左边CAN底层驱动接口（前面我提供过STM32例程）。Target目标接口，如定时器。</p><p>右边底部对象字典，我们需要通过工具事先配置好，不需要人为编写。最后就是我们通过调用API函数，实现应用程序。</p><p>提示：最右边的英文希望大家理解一下，对初学者有帮助，如打开CAN接口（也可以叫初始化）、初始化定时器……等。</p><h2 id="3-3-CAN底层接口实现和要求"><a href="#3-3-CAN底层接口实现和要求" class="headerlink" title="3.3 CAN底层接口实现和要求"></a>3.3 CAN底层接口实现和要求</h2><p>我们底层发送要求非阻塞的方式实现，一般我建议跑一个操作系统，加一个队列的方式实现。</p><p>需要一个发送线程、一个接收线程，同时需要定时器实现事件的调度。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84/3.%E4%BA%8B%E4%BB%B6%E8%B0%83%E5%BA%A6.png?raw=true"><br></table><p>这一节的内容，对于初学者理解起来相对较难，可以先了解，有一个概念，后面我会结合代码让大家更容易理解其中含义。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　教程上一篇文章&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html&quot;&gt;《关于Canfestival及对象字典生成工具环境搭建》&lt;/a&gt;中我们简单认识了一下Canfestival这套免费开源CANOpen协议的框架。&lt;/p&gt;
&lt;p&gt;　　那么，本文将会以下载的PDF手册（源码里面也有）为导向，来深入解析Canfestival这套框架。&lt;/p&gt;
&lt;p&gt;　　本文大概分两部分来讲述：&lt;br&gt;　　1.manual手册概要内容；&lt;br&gt;　　2.解析Canfestival源码；&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程01_Keil介绍、下载、安装与注册</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程01_Keil介绍、下载、安装与注册.html</id>
    <published>2018-10-26T02:00:00.000Z</published>
    <updated>2018-10-26T03:02:51.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　对于学习单片机和嵌入式开发的朋友来说，掌握Keil这款软件可以说是必备的技能。鉴于目前网上没有完整的Keil教程，因此我打算整理一套完整的Keil系列教程。</p><p>　　目前Keil有四种产品（软件）：<strong>MDK-ARM、C51、C251、C166</strong>。四种软件都是基于µVision，在用法上极为相似。</p><p>　　所以，该系列教程结合目前使用最多的MDK-ARM来讲述，大部分内容也适用于其它三种软件。</p><a id="more"></a><h1 id="二、Keil介绍"><a href="#二、Keil介绍" class="headerlink" title="二、Keil介绍"></a>二、Keil介绍</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>对于我们程序员来说，大家常说的Keil，其实指的是一款开发工具。同时，Keil也是一家公司名称。</p><p>Keil公司是一家业界领先的微控制器（MCU）软件开发工具的独立供应商。Keil公司由两家私人公司联合运营，分别是德国慕尼黑的Keil Elektronik GmbH和美国德克萨斯的Keil Software Inc。</p><p>Keil公司2005年由ARM公司收购。其两家公司分别更名为ARM Germany GmbH和ARM Inc。</p><h2 id="2-2-MDK-ARM"><a href="#2-2-MDK-ARM" class="headerlink" title="2.2 MDK-ARM"></a>2.2 MDK-ARM</h2><p>MDK-ARM软件为基于Cortex-M、Cortex-R4、ARM7、ARM9处理器设备提供了一个完整的开发环境。 MDK-ARM专为微控制器应用而设计，而且功能强大，能够满足大多数苛刻的嵌入式应用。</p><p>与Keil MDK4及之前版本不同，<strong>Keil MDK5分成MDK Core和Software Packs两部分</strong>。MDK Core主要包含uVision5 IDE集成开发环境和ARM Compiler5。Software Packs则可以在不更换MDK Core的情况下，单独管理（下载、更新、移除）设备支持包和中间件更新包。</p><p>MDK-ARM有四个可用版本，分别是<strong>MDK-Lite（免费评估版）、MDK-Essential（基础版）、MDK-Plus（标准版）、MDK-Professional（专业版）</strong>。所有版本均提供一个完善的C / C++开发环境，其中MDK-Professional还包含大量的中间库。</p><table><br><strong>MDK产品组件：</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/1.MDK%E4%BA%A7%E5%93%81%E7%BB%84%E4%BB%B6.png?raw=true"><br></table><p>关于MDK-ARM的更多详细介绍，及四个版本的差异，请参看我之前在公众号分享的一篇文章<a href="https://mp.weixin.qq.com/s/kaeI81tcCxzQ26WalUQRBQ" target="_blank" rel="noopener">《你们都认真了解过MDK-ARM吗？》</a></p><h2 id="2-3-支持芯片"><a href="#2-3-支持芯片" class="headerlink" title="2.3 支持芯片"></a>2.3 支持芯片</h2><p>Keil MDK-ARM 支持的器件包含 Cortex-M、 Cortex-R、 ARM7、 ARM9、 Cortex-A8系列等多达几千种。</p><p>官方支持芯片地址： <a href="http://www.keil.com/dd2" target="_blank" rel="noopener">http://www.keil.com/dd2</a></p><h1 id="三、下载"><a href="#三、下载" class="headerlink" title="三、下载"></a>三、下载</h1><p>Keil MDK-ARM这个软件建议到官网下载最新版本，我这里也提供百度网盘下载地址（和官网一样）。</p><p>上面说了：Keil MDK5分成<strong>MDK Core和Software Packs</strong>两部分，也就是安装包和支持包。</p><h2 id="3-1-MDK-ARM安装包下载"><a href="#3-1-MDK-ARM安装包下载" class="headerlink" title="3.1 MDK-ARM安装包下载"></a>3.1 MDK-ARM安装包下载</h2><p>目前（2018年10月）Keil MDK-ARM官方最新版本是V5.26，更多老版本及MDK-ARM V4版本，可以在我百度网盘下载【定期更新】。</p><p>官方网站：<a href="http://www.keil.com/download/product" target="_blank" rel="noopener">http://www.keil.com/download/product</a><br>百度网盘：<a href="http://pan.baidu.com/s/1eRLbgIY" target="_blank" rel="noopener">http://pan.baidu.com/s/1eRLbgIY</a></p><h2 id="3-2-MDK-ARM支持包下载"><a href="#3-2-MDK-ARM支持包下载" class="headerlink" title="3.2 MDK-ARM支持包下载"></a>3.2 MDK-ARM支持包下载</h2><p>MDK-ARM V4 和 V5版本在安装的时候最大的区别在于：<strong>V4版本安装包里面集成器件的支持包，而V5版本是独立出来，自己下载安装的</strong>。</p><p>因此需要下载自己芯片型号对应的器件支持包（我百度网盘提供STM32的器件支持包供大家下载）。</p><p>官方网站：<a href="http://www.keil.com/dd2/Pack" target="_blank" rel="noopener">http://www.keil.com/dd2/Pack</a><br>百度网盘：<a href="http://pan.baidu.com/s/1o8fd6jS" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8fd6jS</a></p><p>提示：如果下载链接失效，可关注公众号回复【Keil系列教程】查看更新链接。</p><h1 id="四、安装软件"><a href="#四、安装软件" class="headerlink" title="四、安装软件"></a>四、安装软件</h1><h2 id="4-1-支持的操作系统"><a href="#4-1-支持的操作系统" class="headerlink" title="4.1 支持的操作系统"></a>4.1 支持的操作系统</h2><p>目前（2018年10月）最新版本MDK-ARM V5.26只支持Windows 7、 Windows 8 和 Windows 10这三个版本操作系统。<strong>已经不再支持Windows Vista和 Windows XP系统了</strong>。</p><p>我记得MDK-ARM V5前面几个版本（好像是V5.19之前版本）还能安装在Windows Vista和 Windows XP这种老系统上，只是部分功能兼容性不好，但也能用。</p><p>目前最新版本Keil软件支持的操作系统，可以参看官网说明：<br><a href="http://www2.keil.com/system-requirements" target="_blank" rel="noopener">http://www2.keil.com/system-requirements</a></p><h2 id="4-2-安装详细步骤"><a href="#4-2-安装详细步骤" class="headerlink" title="4.2 安装详细步骤"></a>4.2 安装详细步骤</h2><p>Keil四款软件（MDK-ARM、C51、C251、C166）安装方法基本一样，很简单，一路Next下去就行了。</p><p>本章节主要针对初学者，下面以图文方式讲述一下安装全过程。</p><table><br>1.以管理员身份运行软件， 进入安装向导界面， 点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/2.%E8%BF%9B%E5%85%A5%E5%AE%89%E8%A3%85%E5%90%91%E5%AF%BC.png?raw=true"><br></table><table><br>2.勾选“I agree to…”，许可同意，点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/3.%E8%AE%B8%E5%8F%AF%E5%90%8C%E6%84%8F.png?raw=true"><br></table><table><br>3.选择软件和支持包安装路径（可以默认），点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/4.%E9%80%89%E6%8B%A9%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%94%AF%E6%8C%81%E5%8C%85%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.png?raw=true"><br></table><table><br>4.填写客户信息（可以随便填写），点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/5.%E5%A1%AB%E5%86%99%E5%AE%A2%E6%88%B7%E4%BF%A1%E6%81%AF.png?raw=true"><br></table><table><br>5.安装过程需要等待几分钟<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/6.%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E9%9C%80%E8%A6%81%E7%AD%89%E5%BE%85%E5%87%A0%E5%88%86%E9%92%9F.png?raw=true"><br></table><table><br>6.安装完成，点击“Finish”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/7.%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png?raw=true"><br></table><table><br>7.自动更新“支持包”列表，可以直接退出，自己下载安装。<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/8.%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E2%80%9C%E6%94%AF%E6%8C%81%E5%8C%85%E2%80%9D%E5%88%97%E8%A1%A8.png?raw=true"><br></table><table><br>安装软件之后，如果我们不关闭上面自动更新，自动更新完成之后，就会出现“支持包”列表，如下图：<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/9.%E2%80%9C%E6%94%AF%E6%8C%81%E5%8C%85%E2%80%9D%E5%88%97%E8%A1%A8.png?raw=true"><br></table><h1 id="五、安装支持包"><a href="#五、安装支持包" class="headerlink" title="五、安装支持包"></a>五、安装支持包</h1><p>我把MDK-ARM中用于支持MCU芯片的软件包叫“器件支持包”，所以，我简称“支持包”。</p><p>支持包可以通过在线安装，或者下载离线包自己离线安装，这两种安装方式。</p><h2 id="5-1-在线安装"><a href="#5-1-在线安装" class="headerlink" title="5.1 在线安装"></a>5.1 在线安装</h2><table><br>1.打开MDK-ARM软件，点击“软件支持包”按钮<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/10.%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85.png?raw=true"><br></table><table><br>2.更新列表，选择芯片，安装<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/11.%E5%9C%A8%E7%BA%BF%E6%9B%B4%E6%96%B0%E6%94%AF%E6%8C%81%E5%8C%85.png?raw=true"><br></table><p>在线安装过程就上面几个步骤，点击“Install”之后，需要等待一会儿，下面状态栏有提示，提示安装完成即可直接使用。</p><h2 id="5-2-离线安装"><a href="#5-2-离线安装" class="headerlink" title="5.2 离线安装"></a>5.2 离线安装</h2><p>离线安装支持包就如安装软件一样：下载支持包（上面提供下载），双击下载好的离线包，此时会识别安装路径（前提是已经安装MDK），点击“Next”，一会儿就安装完成。</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/12.%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%94%AF%E6%8C%81%E5%8C%85.png?raw=true"><br></table><h1 id="六、注册"><a href="#六、注册" class="headerlink" title="六、注册"></a>六、注册</h1><p>Keil MDK是一个收费的软件，官方严厉打击盗版，若你是商业用途，建议购买正版软件。</p><p>针对个人学习的朋友，可以使用MDK-Lite免费评估版，只是代码大小有32KB的限制。如果还不能满足你自己需求，建议自行在网上查找注册机或购买正版软件。</p><p>同时，ST意法半导体与ARM公司合作，<strong>使用MDK-ARM开发STM32F0和L0系列芯片，可以免费获取License</strong>。具体请参看：<br><a href="http://www2.keil.com/stmicroelectronics-stm32/mdk" target="_blank" rel="noopener">http://www2.keil.com/stmicroelectronics-stm32/mdk</a></p><p>在国内由米尔科技、亿道电子、英倍特提供Keil 的销售和技术支持服务。具体如何购买Keil正版软件，以及它的价格，可以向这些经销商咨询。</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　对于学习单片机和嵌入式开发的朋友来说，掌握Keil这款软件可以说是必备的技能。鉴于目前网上没有完整的Keil教程，因此我打算整理一套完整的Keil系列教程。&lt;/p&gt;
&lt;p&gt;　　目前Keil有四种产品（软件）：&lt;strong&gt;MDK-ARM、C51、C251、C166&lt;/strong&gt;。四种软件都是基于µVision，在用法上极为相似。&lt;/p&gt;
&lt;p&gt;　　所以，该系列教程结合目前使用最多的MDK-ARM来讲述，大部分内容也适用于其它三种软件。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程10_关于Canfestival及对象字典生成工具环境搭建</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程10_关于Canfestival及对象字典生成工具环境搭建.html</id>
    <published>2018-10-26T01:00:00.000Z</published>
    <updated>2018-10-26T02:59:56.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　这一篇文章讲述如标题所描述的两大知识点，<strong>这两点内容对于初学者来说非常重要，希望想学习CANOpen协议的朋友认真把文章看完</strong>。</p><p>　　1.讲述Canfestival框架、官网简述，及衍生出的CANOpen源码基础知识；</p><p>　　2.基于Canfestival框架中对象字典生成工具的环境搭建。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、关于Canfestival"><a href="#二、关于Canfestival" class="headerlink" title="二、关于Canfestival"></a>二、关于Canfestival</h1><p>Canfestival是一套<strong>免费开源的CANOpen协议栈框架</strong>，遵循ANSI-C，支持多平台，我们完全可以借助这一套开源框架来学会CANOpen。</p><p>官方主页：<a href="https://canfestival.org/index.html.en" target="_blank" rel="noopener">https://canfestival.org/index.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.Canfestival%E4%B8%BB%E9%A1%B5.png?raw=true"><br></table><p>从上面主页可以看得出来，网址主要包含三部分内容：<strong>Code源码、Documentation文档、Applications应用</strong>。</p><p>这个网站目前访问有点慢，但还是能访问。可能是因为服务器在法国（IP地址），及这套协议免费开源，没有得到更多资金支持。</p><p>下面我将针对初学者，重点讲述一下这三部分内容，以及我们需要重点关注的内容。</p><h2 id="2-1-Code源码"><a href="#2-1-Code源码" class="headerlink" title="2.1 Code源码"></a>2.1 Code源码</h2><p>网址：<a href="https://canfestival.org/code.html.en" target="_blank" rel="noopener">https://canfestival.org/code.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.Coed%E4%BB%A3%E7%A0%81.png?raw=true"><br></table><p>Code代码提供4个资源库（如上图），<strong>4个资源库中CANOpen协议源码都沿用一套，简单说协议源码大致相同</strong>。</p><p>推荐下载第2个的原因：<br>1.有人负责更新维护，目前（2018年）版本最新；<br>2.提供STM32F0、F1、F4系列驱动代码；<br>（下面提供下载）</p><h2 id="2-2-Documentation文档"><a href="#2-2-Documentation文档" class="headerlink" title="2.2 Documentation文档"></a>2.2 Documentation文档</h2><p>网址：<a href="https://canfestival.org/doc.html.en" target="_blank" rel="noopener">https://canfestival.org/doc.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.Documentation%E6%96%87%E6%A1%A3.png?raw=true"><br></table><p>这一项里面主要讲述Canfestival这套框架里面的一些内容，如遵循许可、CanFestival提供了一些GUI和命令行工具，帮助创建一个新的CANOpen节点并编辑对象字典，供主从使用。</p><p>我们需要获取的重要内容，<strong>都在那个PDF手册里面</strong>，建议下载仔细阅读。（这个手册在源码压缩包里面也有：manual_en.pdf）</p><h2 id="2-3-Applications应用"><a href="#2-3-Applications应用" class="headerlink" title="2.3 Applications应用"></a>2.3 Applications应用</h2><p>网址：<a href="https://canfestival.org/apps.html.en" target="_blank" rel="noopener">https://canfestival.org/apps.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.Applications%E5%BA%94%E7%94%A8.png?raw=true"><br></table><p>这里的“应用”，不是说教你如何编写应用程序，<strong>主要是Canfestival应用在哪些地方</strong>。如Product产品、Research研究方面。</p><p>Beremiz是法国一家公司开发的一款开源的PLC编程工具。在Beremiz里面就集成了CanFestival这套框架（相信折腾过CANOpen的都知道Beremiz）。<br>（这里的“应用”大家可以不用过多深究）</p><h1 id="三、CANOpen源码说明及下载"><a href="#三、CANOpen源码说明及下载" class="headerlink" title="三、CANOpen源码说明及下载"></a>三、CANOpen源码说明及下载</h1><h2 id="3-1-CANOpen源码说明"><a href="#3-1-CANOpen源码说明" class="headerlink" title="3.1 CANOpen源码说明"></a>3.1 CANOpen源码说明</h2><p>许多初学者都有这么一个疑问：<strong>CANOpen协议的源码我们必须要用CanFestival的吗</strong>？</p><p>因为CANOpen协议是遵循CiA301、302、CiA401…这些协议，我们的源代码只要符合这些协议规范即可。</p><p>CANOpen协议源码也可以自己写，但是耗时耗力完全没必要。所以，我们就使用了免费开源的CanFestival。当然，也可以购买商业化的CANOpen协议源码来开发产品。</p><p>不管我们使用免费的CanFestival，还是购买的源码，只要支持CANOpen协议，我们就能与支持CANOpen协议的设备通信。</p><h2 id="3-2-下载"><a href="#3-2-下载" class="headerlink" title="3.2 下载"></a>3.2 下载</h2><p>我们从官网的“Code”进去，会出现4个选项，我推荐下载第2个（上面有说明为什么下载第2个）。进去之后，会看到如下图一些描述：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.%E6%BA%90%E7%A0%81%E6%8F%8F%E8%BF%B0.png?raw=true"><br></table><p>对于关注我的朋友，大部分都在使用STM32，提供相关的源码参看，想必会有更浓学习的兴趣。</p><p>这个源码有多人在更新和维护，所以你会看到有许多分支，我们下载最新版本即可。</p><p>下载地址：<a href="https://bitbucket.org/Mongo/canfestival-3-asc/downloads" target="_blank" rel="noopener">https://bitbucket.org/Mongo/canfestival-3-asc/downloads</a></p><p>百度网盘下载：<a href="https://pan.baidu.com/s/1b9K0vIzu_EVWK1BLURJEPQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1b9K0vIzu_EVWK1BLURJEPQ</a></p><p>提取码：j2w2</p><h1 id="四、对象字典生成工具的环境搭建"><a href="#四、对象字典生成工具的环境搭建" class="headerlink" title="四、对象字典生成工具的环境搭建"></a>四、对象字典生成工具的环境搭建</h1><p>这里的环境搭建可以参考Canfestival手册（manual_en.pdf）里面的指导，具体位置在3.1.1节：Object Dictionary Editor GUI.</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/6.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%9D%A1%E4%BB%B6.png?raw=true"><br></table><p>我们需要下载安装第1，2个，第3个就不用单独下载了。</p><p>因为我们是在STM32上进行开发，手册中3.1.2节Linux、3.1.3节Windows这些内容我们就不用管了。</p><h2 id="4-1-下载Python和wxPython"><a href="#4-1-下载Python和wxPython" class="headerlink" title="4.1 下载Python和wxPython"></a>4.1 下载Python和wxPython</h2><p>因为和其它工具兼容性的原因，我目前在Win10系统上安装可使用的是python-2.7.15 + wxPython2.8。</p><p>其它高版本的Python 3我之前试过好像不行，还有32位和64的也有差异。这里提供给大家（我安装的版本）下载，大家有时间可以在官网下载其它版本试试。</p><p><strong>1.百度网盘</strong><br>链接：<a href="https://pan.baidu.com/s/1bRS403m4B31m4ovSJ-_HwA" target="_blank" rel="noopener">https://pan.baidu.com/s/1bRS403m4B31m4ovSJ-_HwA</a><br>提取码：38sn</p><p><strong>2.官方下载</strong><br>Python：<a href="https://www.python.org/downloads" target="_blank" rel="noopener">https://www.python.org/downloads</a><br>wxPython：<a href="https://wxpython.org/pages/downloads" target="_blank" rel="noopener">https://wxpython.org/pages/downloads</a><br>wxPython镜像：<a href="https://sourceforge.net/projects/wxpython/files/wxPython" target="_blank" rel="noopener">https://sourceforge.net/projects/wxpython/files/wxPython</a></p><h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><p><strong>1.Python安装</strong><br>Python的安装需要注意两点：1.以管理员身份运行； 2.添加（环境变量）路径。</p><p>具体可以参看我公众号之前推送文章《工具下载、环境搭建》中3.2 安装Python.</p><p><strong>2.wxPython安装</strong><br>可以通过下载离线包直接安装，也可以通过命令行直接安装。（请看上面给的地址）</p><h2 id="4-3-如何成功运行"><a href="#4-3-如何成功运行" class="headerlink" title="4.3 如何成功运行"></a>4.3 如何成功运行</h2><p>1.解压（上面3.2 下载的）Canfestival-3；<br>2.在解压objdictgen目录下的Gnosis_Utils-current.tar.gz</p><table><br>3.将第2步解压目录下的<strong>gnosis</strong>拷贝到<strong>objdictgen</strong>目录下（注意路径），如下图：<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/7.%E6%8B%B7%E8%B4%9Dgnosis%E5%B7%A5%E5%85%B7.png?raw=true"><br></table><table><br>4.双击，或者以命令方式运行<strong>objdictgen</strong>下的objdictedit.py，如果环境没问题，此时就会出现如下界面：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/8.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8.png?raw=true"><br></table><p>如果不能出现上面界面，请检查环境是否搭建成功。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　这一篇文章讲述如标题所描述的两大知识点，&lt;strong&gt;这两点内容对于初学者来说非常重要，希望想学习CANOpen协议的朋友认真把文章看完&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　1.讲述Canfestival框架、官网简述，及衍生出的CANOpen源码基础知识；&lt;/p&gt;
&lt;p&gt;　　2.基于Canfestival框架中对象字典生成工具的环境搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程09_CANOpen对象字典</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程09_CANOpen对象字典.html</id>
    <published>2018-10-23T02:00:00.000Z</published>
    <updated>2018-10-23T02:34:45.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　上一篇文章主要是引导大家学习CANOpen协议通信接口的相关内容。通信接口的内容有点多，对于初学者来说，如果看不懂，请多看几遍（最好有个印象）。</p><p>　　CANopen设备最重要的一个部分就是对象字典。对象字典本质上是一种被预先安排的对象序列，可通过网络访问。<strong>字典里面的每一对象均可使用一个16-bit主索引和8-bit子索引寻址到</strong>。</p><p>　　初学者学习如果难理解通信接口（上一篇）有些内容，如：PDO、SDO及网络管理对象，可以结合对象字典索引来学习和记忆。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、对象字典重要内容"><a href="#二、对象字典重要内容" class="headerlink" title="二、对象字典重要内容"></a>二、对象字典重要内容</h1><p><strong>对象字典OD</strong>：Object dictionary。</p><p>一组带有 16 位索引和 8 位子索引的数据或对象。对象字典下面主要包含：<strong>数据类型、通信对象、应用对象</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/1.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86.png?raw=true"><br></table><p><strong>对象字典主索引</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/2.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E4%B8%BB%E7%B4%A2%E5%BC%95.png?raw=true"><br></table><h2 id="2-1-通信子协议区"><a href="#2-1-通信子协议区" class="headerlink" title="2.1 通信子协议区"></a>2.1 通信子协议区</h2><p>通信子协议区，如上图1000h 到 1FFFh这个区域。也就是通信接口（或通信对象）协议区。</p><p>对于初学者来说，<strong>通信对象子协议区</strong>是比较重要的一个区域，牵涉到上一篇文章《通信接口》讲述的大部分内容。同时，这之间的关系也非常紧密。</p><p><strong>通讯对象子协议区</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/3.%E9%80%9A%E8%AE%AF%E5%AF%B9%E8%B1%A1%E5%AD%90%E5%8D%8F%E8%AE%AE%E5%8C%BA.png?raw=true"><br></table><p>如上图，通讯对象子协议区又划分为几个区域，而其中的1000h 到 1029h为通用通讯对象。</p><p>通用通讯对象里面的内容已经被约定好，如果我们需要用到，可直接配置使用即可。</p><p>通用通讯对象内容：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/4.%E9%80%9A%E7%94%A8%E9%80%9A%E8%AE%AF%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AE%B91.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/5.%E9%80%9A%E7%94%A8%E9%80%9A%E8%AE%AF%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AE%B92.png?raw=true"><br></table><p>通信子协议区的内容非常重要，也比较多，需要拆分并一个一个掌握。可结合周立功提供相关教程，以及前面提到的CiA 301手册理解。</p><p>我这里就不一一列出来了，简单再列一个<strong>通信子协议区中PDO通信参数（对象）与映射参数</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/6.PDO%E9%80%9A%E4%BF%A1%E5%8F%82%E6%95%B0%E4%B8%8E%E6%98%A0%E5%B0%84%E5%8F%82%E6%95%B0.png?raw=true"><br></table><p>写到这里，想必很多朋友都能理解，也能明白这些内容。更多的内容，可以结合这种拆分的思路去理解。</p><h1 id="三、对象字典生成工具"><a href="#三、对象字典生成工具" class="headerlink" title="三、对象字典生成工具"></a>三、对象字典生成工具</h1><p>上面介绍了对象字典的一些内容，可能还是有很多初学者不明白。同时，也就可能会产生疑问：这个对象字典我们需要字典和我们代码有什么关系呢？</p><p>可以简单来说，就是一些16位索引和8位子索引对应的变量数据，来下看下代码（下面两图），加深理解：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/7.%E4%BB%A3%E7%A0%81_%E4%B8%BB%E7%B4%A2%E5%BC%95.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/8.%E4%BB%A3%E7%A0%81_SDO.png?raw=true"><br></table><h2 id="3-1-对象字典的代码需要自己写吗？"><a href="#3-1-对象字典的代码需要自己写吗？" class="headerlink" title="3.1 对象字典的代码需要自己写吗？"></a>3.1 对象字典的代码需要自己写吗？</h2><p>很多初学者，包括我（之前初学时）也会产生疑问：对象字典的代码需要我们自己写吗？</p><p>答案：不用自己写。</p><p>当然，对象字典的代码可以自己写，但完全没必要。1.自己写不一定正确；2.有现成工具可以节约大量时间。</p><h2 id="3-2-Canfestival对象字典生成工具"><a href="#3-2-Canfestival对象字典生成工具" class="headerlink" title="3.2 Canfestival对象字典生成工具"></a>3.2 Canfestival对象字典生成工具</h2><p>我微信公众号分享《CANOpen系列教程》的封面中有一行英文：Canfestival.相信学过CANOpen的朋友都应该知道我接下来会结合这套<strong>Canfestival免费开源的CANOpen架构</strong>来讲述。</p><p>其中，Canfestival里面包含我们需要的<strong>CANOpen协议源码和对象字典生成工具</strong>。</p><p>有了对象字典生成工具，对象字典的代码就可以通过它来自动生成。搭建Canfestival对象字典生成工具的环境是一个重点。</p><p>对于很多初学者来说搭建环境也是一个难点，不少初学者就卡在这一关，然后，学习CANOpen就没有继续下去了。</p><p>简单的说，搭建对象字典生成工具的环境步骤不多，可能会因为诸多因素导致搭建失败。搭建成功，运行之后会出现如下图界面：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/9.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p>在学习对象字典生成工具时，会看见一个词：EDS，<strong>即Electronic Data Sheet电子数据单</strong>。</p><p>像周立功的CANOpen从站模块就配有工具生成EDS文件。当然，Canfestival提供的工具也能导出EDS文件。</p><p>Canfestival对象字典生成工具搭建过程，及相关内容我将在下一篇文章详细讲述。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档部分内容来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　上一篇文章主要是引导大家学习CANOpen协议通信接口的相关内容。通信接口的内容有点多，对于初学者来说，如果看不懂，请多看几遍（最好有个印象）。&lt;/p&gt;
&lt;p&gt;　　CANopen设备最重要的一个部分就是对象字典。对象字典本质上是一种被预先安排的对象序列，可通过网络访问。&lt;strong&gt;字典里面的每一对象均可使用一个16-bit主索引和8-bit子索引寻址到&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　初学者学习如果难理解通信接口（上一篇）有些内容，如：PDO、SDO及网络管理对象，可以结合对象字典索引来学习和记忆。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
</feed>
