<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmbeddedDevelop</title>
  
  <subtitle>作者：strongerHuang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.strongerhuang.com/"/>
  <updated>2019-02-20T06:09:22.614Z</updated>
  <id>http://www.strongerhuang.com/</id>
  
  <author>
    <name>strongerHuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ST-Link资料</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%99.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料.html</id>
    <published>2019-02-20T06:00:00.000Z</published>
    <updated>2019-02-20T06:09:22.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【ST-Link资料】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【嵌入式专栏】</a>，关注微信公众号回复【ST-Link资料】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料01_ST-Link介绍，认识各版本硬件及特征.html">ST-Link资料01_ST-Link介绍，认识各版本硬件及特征</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料02_ST-Link固件介绍，及固件命名规则.html">ST-Link资料02_ST-Link固件介绍，及固件命名规则</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料03_ST-Link固件升级、驱动下载安装方法.html">ST-Link资料03_ST-Link固件升级、驱动下载安装方法</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料04_ST-Link编程应用，以及指示灯说明.html">ST-Link资料04_ST-Link编程应用，以及指示灯说明</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【ST-Link资料】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【嵌入式专栏】&lt;/a&gt;，关注微信公众号回复【ST-Link资料】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ST-Link资料04_ST-Link编程应用，以及指示灯说明</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%9904_ST-Link%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料04_ST-Link编程应用，以及指示灯说明.html</id>
    <published>2019-02-20T05:30:00.000Z</published>
    <updated>2019-02-20T06:16:30.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>这篇写的是关于ST-Link的实际<strong>编程和调试应用的场景</strong>，以及概述一下ST-Link上面两种颜色LED亮灭，及闪烁的含义。</p><p>这篇文章贴近实际应用，初学者有必要掌握这些知识。</p><a id="more"></a><h1 id="二、ST-Link编程和调试应用"><a href="#二、ST-Link编程和调试应用" class="headerlink" title="二、ST-Link编程和调试应用"></a>二、ST-Link编程和调试应用</h1><p>下面罗列一些关于ST-Link<strong>常见的编程和调试应用</strong>，看看你知道哪些？</p><h2 id="2-1-STM32CubeProg编程"><a href="#2-1-STM32CubeProg编程" class="headerlink" title="2.1 STM32CubeProg编程"></a>2.1 STM32CubeProg编程</h2><p>地址：<br><a href="https://www.st.com/en/development-tools/stm32cubeprog.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stm32cubeprog.html</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9904_ST-Link%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%B4%E6%98%8E/1.STM32CubeProg%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p>STM32CubeProg的<strong>主要功能就是编程（下载）</strong>，支持Windows、 Linux、 macOS操作系统。</p><p>同时，需要安装JRE环境，安装地址：<br><a href="https://www.java.com/zh_CN/download" target="_blank" rel="noopener">https://www.java.com/zh_CN/download</a></p><p>更多介绍可以参看我公众号的一篇文章：<a href="https://mp.weixin.qq.com/s/exJFtnjYgAB3OsHFIGg6Zw" target="_blank" rel="noopener">几点关于STM32CubeProgrammer的内容</a>。</p><p><strong>STM32CubeProg编程</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9904_ST-Link%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%B4%E6%98%8E/2.STM32CubeProg%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8.png?raw=true"><br></table><h2 id="2-2-STM32-ST-LINK-Utility编程"><a href="#2-2-STM32-ST-LINK-Utility编程" class="headerlink" title="2.2 STM32 ST-LINK Utility编程"></a>2.2 STM32 ST-LINK Utility编程</h2><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link004.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link004.html</a></p><p>STM32 ST-LINK Utility的功能比STM32CubeProg要稍微简单一些，其主要功能也是<strong>编程（下载）</strong>。</p><p>打开需要下载的可执行文件（hex或bin）,或者直接将文件拖到其中，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9904_ST-Link%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%B4%E6%98%8E/3.ST-LINK%20Utility%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>菜单Target -&gt; Program，或点击编程按钮（如下图），点击Start开始下载，直到完成。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9904_ST-Link%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%B4%E6%98%8E/4.ST-LINK%20Utility%E4%B8%8B%E8%BD%BD.png?raw=true"><br></table><p><strong>提示：</strong>如果是bin文件，这里起始地址可以修改。</p><h2 id="2-3-STVP编程"><a href="#2-3-STVP编程" class="headerlink" title="2.3 STVP编程"></a>2.3 STVP编程</h2><p>地址：<br><a href="https://www.st.com/en/development-tools/stvp-stm8.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stvp-stm8.html</a></p><p><a href="https://www.st.com/en/development-tools/stvp-stm32.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stvp-stm32.html</a></p><p>这里下载的一个集成的工具包sttoolset，包含STVD和STVP两种工具。<br><strong>STVD：ST Visual Develop，</strong>可视化开发环境（类似Keil和IAR用于编码的IDE）;</p><p><strong>STVP：ST Visual Programmer，</strong>可视化编程，和上面STM32CubeProg类似；</p><p>这里主要讲下STVP编程工具，这个编程工具与上面STM32CubeProg、ST-LINK Utility有共同特点：<strong>主要用于编程</strong>。</p><p>但区别在于这个工具可以对STM8，以及较老的ST7编程，同样也是使用ST-Link编程器。</p><table><br><strong>STVP下载配置</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9904_ST-Link%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%B4%E6%98%8E/5.STVP%E4%B8%8B%E8%BD%BD%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>这款工具主要是集成之前ST7，再到这后面STM8，32。如果你是对STM32量产编程，不建议使用该工具（建议使用STM32CubeProg）。</p><p><strong>说明：</strong><br>这个工具就是STM8和32同时都可以编程的工具，<strong>上面STM32CubeProg和STM32 ST-LINK Utility只针对于STM32</strong>。</p><h2 id="2-4-编程和调试"><a href="#2-4-编程和调试" class="headerlink" title="2.4 编程和调试"></a>2.4 编程和调试</h2><p>这里说下ST-Link的调试应用，一般调试都是基于如STVD、Keil、 IAR等这种集成开发环境（IDE）。</p><p>同样，这类集成开发环境具有编程（下载）的功能，编译好代码之后，可直接下载。</p><table><br><strong>如DMK-ARM的下载和调试：</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9904_ST-Link%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%B4%E6%98%8E/6.MDK-ARM%E4%B8%8B%E8%BD%BD%E3%80%81%E8%B0%83%E8%AF%95.png?raw=true"><br></table><p>这里推荐阅读我的Keil和IAR系列教程：<br><a href="https://mp.weixin.qq.com/s/o1XLOrLGJ_Xj76zaIn6uXA" target="_blank" rel="noopener">1.【专栏】 Keil系列教程</a></p><p><a href="https://mp.weixin.qq.com/s/L3bhSE-qL-mReNLe4Po-Vg" target="_blank" rel="noopener">2.【专栏】 IAR系列教程</a></p><h1 id="三、ST-Link的LED指示灯说明"><a href="#三、ST-Link的LED指示灯说明" class="headerlink" title="三、ST-Link的LED指示灯说明"></a>三、ST-Link的LED指示灯说明</h1><p>自ST-LINK/V2以来的所有ST-LINK板都实现了一个标有“COM”的LED(无论是在外壳上还是在PCB上)。</p><p>一般“COM”是<strong>由红、绿两个LED组合</strong>，有常亮、常灭、闪烁等，两个LED同时亮呈现橙色。</p><p>ST-Link的LED显示不同状态，代表不同的含义：<br><strong>LED闪烁红色：</strong>USB与PC正在枚举。<br><strong>LED为红色：</strong>建立PC与ST-LINK之间的通信(枚举结束)。<br><strong>LED闪烁绿色和红色交替：</strong>数据在目标和PC之间交换。<br><strong>LED为绿色：</strong>上次通信成功。<br><strong>LED为橙色：</strong>ST-Link和目标芯片通信失败。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;这篇写的是关于ST-Link的实际&lt;strong&gt;编程和调试应用的场景&lt;/strong&gt;，以及概述一下ST-Link上面两种颜色LED亮灭，及闪烁的含义。&lt;/p&gt;
&lt;p&gt;这篇文章贴近实际应用，初学者有必要掌握这些知识。&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ST-Link资料03_ST-Link固件升级、驱动下载安装方法</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料03_ST-Link固件升级、驱动下载安装方法.html</id>
    <published>2019-02-19T07:30:00.000Z</published>
    <updated>2019-02-20T03:27:28.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>前两篇文章讲述的都是关于ST-Link的一些理论知识，建议初学者看看：<br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料01_ST-Link介绍，认识各版本硬件及特征.html">ST-Link资料01_ST-Link介绍，认识各版本硬件及特征</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料02_ST-Link固件介绍，及固件命名规则.html">ST-Link资料02_ST-Link固件介绍，及固件命名规则</a></p><p>本文讲述的就是实践内容：<strong>升级固件和安装驱动</strong>。这些内容大部分人都没在意过，这里就带领大家了解一下。</p><a id="more"></a><h1 id="二、固件升级"><a href="#二、固件升级" class="headerlink" title="二、固件升级"></a>二、固件升级</h1><p>升级固件的方法有很多，比如通过STM32CubePro、 MDK-ARM进行升级等。</p><p><strong>这些升级方法有什么不同呢？ 升级之后对ST-Link有什么影响？</strong></p><p>想必有很多人存在疑问，不知道答案。下面罗列一些固件升级方法。</p><h2 id="2-1-下载官网固件工具包升级（推荐）"><a href="#2-1-下载官网固件工具包升级（推荐）" class="headerlink" title="2.1 下载官网固件工具包升级（推荐）"></a>2.1 下载官网固件工具包升级（推荐）</h2><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link007.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link007.html</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/1.%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E5%8C%85.png?raw=true"><br></table><p>目前（2019年02月）官网最新版本为V2.33.25，包含ST-LINK, ST-LINK/V2, ST-LINK/V2-1, STLINK-V3最新的固件升级工具包。（<strong>如果想升级最新的固件，建议到官网下载，其它地方都是集成了这里的工具包</strong>）</p><p>最新固件（2019年02月）：<br><strong>ST-LINK：</strong>V1J13S4.<br><strong>ST-LINK/V2：</strong>V2J33S7.<br><strong>ST-LINK/V2-1：</strong>V2J33M25 (STM32) 或 V2M25S7 (STM8).<br><strong>STLINK-V3SET：</strong>V3J3M2B3S1.</p><p>解压固件升级工具包，可以看到两种升级工具平台：<strong>Windows和AllPlatforms</strong>。</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2.%E5%B7%A5%E5%85%B7%E5%8C%85%E5%B9%B3%E5%8F%B0.png?raw=true"><br></table><h3 id="2-1-1-Windows平台"><a href="#2-1-1-Windows平台" class="headerlink" title="2.1.1 Windows平台"></a>2.1.1 Windows平台</h3><p>直接双击工具就可运行升级工具，连接ST-Link -&gt; “Device Connect”连接ST-Link设备 -&gt; 点击“Yes”进入升级。</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/3.%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87.png?raw=true"><br></table><p>最后出现<strong>“Upgrade is successful”</strong>就升级成功了。</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/4.%E5%8D%87%E7%BA%A7%E6%88%90%E5%8A%9F%E6%8F%90%E7%A4%BA.png?raw=true"><br></table><p><strong>提示：</strong><br>上面以V2版本ST-Link为例，<strong>自动识别硬件类型</strong>；</p><h3 id="2-1-2-AllPlatforms"><a href="#2-1-2-AllPlatforms" class="headerlink" title="2.1.2 AllPlatforms"></a>2.1.2 AllPlatforms</h3><p>这是一个基于Java的新GUI，支持Windows、Linux和MacOS操作系统。</p><p>因此，需要在你系统中<strong>安装JRE V7u51</strong>(或更新版本)。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/5.%E5%85%A8%E5%B9%B3%E5%8F%B0%E5%8D%87%E7%BA%A7.png?raw=true"><br></table><p>同样，出现“Upgrade successful”说明升级成功。</p><h2 id="2-2-通过STM32-ST-LINK-Utility升级"><a href="#2-2-通过STM32-ST-LINK-Utility升级" class="headerlink" title="2.2 通过STM32 ST-LINK Utility升级"></a>2.2 通过STM32 ST-LINK Utility升级</h2><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link004.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link004.html</a></p><p>使用过STM32 ST-LINK Utility的人，基本都知道ST-LINK菜单。<strong>通过下面子菜单Firmware update</strong>（如下图），即可进去升级界面。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/6.STM32%20ST-LINK%20Utility%E5%8D%87%E7%BA%A7%E5%9B%BA%E4%BB%B6.png?raw=true"><br></table><p>STM32 ST-LINK Utility是基于Windows平台的一个编程软件，通过上述方式进入升级界面和上面Windows平台一样。</p><p><strong>提示：</strong><br>STM32 ST-LINK Utility工具中<strong>集成的ST-Link固件</strong>，版本可能不是最新的。</p><h2 id="2-3-通过STM32CubeProg升级固件"><a href="#2-3-通过STM32CubeProg升级固件" class="headerlink" title="2.3 通过STM32CubeProg升级固件"></a>2.3 通过STM32CubeProg升级固件</h2><p>地址：<br><a href="https://www.st.com/en/development-tools/stm32cubeprog.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stm32cubeprog.html</a></p><p>这个STM32CubeProg和上面STM32 ST-LINK Utility类似，都是一个编程软件，只是这个STM32CubeProg工具中集成的ST-Link升级工具是“全平台”版本。</p><table><br><img align="left" width="700" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/7.STM32CubeProg%E5%8D%87%E7%BA%A7%E5%9B%BA%E4%BB%B6.png?raw=true"><br></table><p>同样，这里的固件也可能不是最新的版本的。</p><h2 id="2-4-通过MDK-ARM升级固件"><a href="#2-4-通过MDK-ARM升级固件" class="headerlink" title="2.4 通过MDK-ARM升级固件"></a>2.4 通过MDK-ARM升级固件</h2><p>Project -&gt; Options for Target -&gt; Debug -&gt; Setting可以看见如下界面：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/8.%E9%80%9A%E8%BF%87MDK-ARM%E5%8D%87%E7%BA%A7%E5%9B%BA%E4%BB%B6.png?raw=true"><br></table><p>这里集成的升级工具是<strong>基于Windows</strong>平台，所以，点击Update之后，和上面Windows平台操作方式一样。</p><p>像这种开发STM32的IDE中很多都集成了这个升级工具，比如EWARM同样也有。</p><p>同样，这里的固件也可能<strong>不是最新的版本的</strong>。因此，推荐使用第一种方法下载官网最新的固件。</p><h2 id="2-5-升级提示"><a href="#2-5-升级提示" class="headerlink" title="2.5 升级提示"></a>2.5 升级提示</h2><p><strong>A.</strong>通过类似STM32CubePro集成的固件不一定是最新的；</p><p><strong>B.</strong>ST-Link可以从低版本升级到高版本，<strong>也可以从高版本 -&gt; 低版本</strong>；</p><p><strong>C.</strong>ST-Link可以自由升级不影响，如果山寨J-Link升级就需要谨慎。</p><h1 id="三、驱动下载安装"><a href="#三、驱动下载安装" class="headerlink" title="三、驱动下载安装"></a>三、驱动下载安装</h1><p>有些人ST-Link不能使用，<strong>有可能就是USB驱动有问题导致的</strong>。所以，如果你的ST-Link有问题了，可以更新一下驱动，看看是不是驱动导致的。</p><p>同样，ST-Link驱动的安装方法有很多种，依然建议大家通过下载官方最新的ST-Link驱动。</p><h2 id="3-1-下载官方最新驱动"><a href="#3-1-下载官方最新驱动" class="headerlink" title="3.1 下载官方最新驱动"></a>3.1 下载官方最新驱动</h2><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link009.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link009.html</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/9.%E4%B8%8B%E8%BD%BD%E5%AE%98%E6%96%B9%E6%9C%80%E6%96%B0%E9%A9%B1%E5%8A%A8.png?raw=true"><br></table><p>目前（2019年02月）官网最新驱动版本为V2.0.1,基于<strong>ST-LINK， ST-LINK/V2， ST-LINK/V2-1， ST-LINK-V3</strong>，支持32或64位<strong>Windows 7、 8、 10</strong>操作系统。</p><p>如果连接ST-Link到电脑，在你的设备管理器中出现类似“未知设备”这种情况，可以选择“更新驱动程序”。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/10.%E6%9B%B4%E6%96%B0%E9%A9%B1%E5%8A%A8.png?raw=true"><br></table><h2 id="3-2-其他安装方式"><a href="#3-2-其他安装方式" class="headerlink" title="3.2 其他安装方式"></a>3.2 其他安装方式</h2><p>我们上面说了固件升级的多种方式，其实，在<strong>STM32 ST-LINK Utility、 STM32CubeProg</strong>编程软件，以及<strong>MDK-ARM、 EWARM</strong>这类IDE中同样也<strong>集成了ST-Link的USB驱动程序</strong>，一般在安装这些软件的时候会提示安装驱动。</p><table><br>如下图，提示安装驱动：<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/11.%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8.png?raw=true"><br></table><table><br>安装成功：<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9903_ST-Link%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E3%80%81%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/12.%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8%E5%AE%8C%E6%88%90.png?raw=true"><br></table><p>同样，这些工具中<strong>集成的USB驱动</strong>不一定是最新的，建议在官网下载最新驱动。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;前两篇文章讲述的都是关于ST-Link的一些理论知识，建议初学者看看：&lt;br&gt;&lt;a href=&quot;https://www.strongerhuang.com/ST-Link/ST-Link资料01_ST-Link介绍，认识各版本硬件及特征.html&quot;&gt;ST-Link资料01_ST-Link介绍，认识各版本硬件及特征&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.strongerhuang.com/ST-Link/ST-Link资料02_ST-Link固件介绍，及固件命名规则.html&quot;&gt;ST-Link资料02_ST-Link固件介绍，及固件命名规则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文讲述的就是实践内容：&lt;strong&gt;升级固件和安装驱动&lt;/strong&gt;。这些内容大部分人都没在意过，这里就带领大家了解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ST-Link资料02_ST-Link固件介绍，及固件命名规则</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%9902_ST-Link%E5%9B%BA%E4%BB%B6%E4%BB%8B%E7%BB%8D%EF%BC%8C%E5%8F%8A%E5%9B%BA%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料02_ST-Link固件介绍，及固件命名规则.html</id>
    <published>2019-02-19T01:30:00.000Z</published>
    <updated>2019-02-19T01:29:37.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>一些人可能看了上一篇关于ST-Link的内容，就会产生疑惑。。。</p><p>ST-Link有那么多硬件版本，那么<strong>里面的软件（固件）都一样吗？</strong></p><p>我的ST-Link<strong>可以升级不同版本的固件吗？</strong></p><a id="more"></a><h1 id="二、关于ST-Link固件"><a href="#二、关于ST-Link固件" class="headerlink" title="二、关于ST-Link固件"></a>二、关于ST-Link固件</h1><p><strong>固件Firmware</strong>，一般指写入硬件（芯片）里面的程序。</p><p>相信大家都看到过ST-Link硬件，里面的MCU就是一块STM32F103R8或RB芯片（不同硬件有差异）。</p><p>其实，里面就是STM32程序 ，我们称<strong>里面的程序为ST-Link固件</strong>。</p><p>所以，只要你有固件，设计一样的硬件，就可以做成一个ST-Link了，这就是所谓的山寨ST-Link（后续文章讲述如何自制ST-Link）。</p><h1 id="三、ST-Link命名规则"><a href="#三、ST-Link命名规则" class="headerlink" title="三、ST-Link命名规则"></a>三、ST-Link命名规则</h1><p>由于ST-link硬件和功能的多样性，ST-Link的固件同样也具有多样性，也就是有多种版本。</p><p>比如，在升级的时候，我们会看到类似如下<strong>版本信息V2.J33.S7</strong>，你们知道这代表什么吗？</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9902_ST-Link%E5%9B%BA%E4%BB%B6%E4%BB%8B%E7%BB%8D%EF%BC%8C%E5%8F%8A%E5%9B%BA%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/1.ST-Link%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.png?raw=true"><br></table><p>ST-Link固件命名遵循一定规则，相信很多朋友都没有关注过这个问题，下面详细讲述。</p><h2 id="3-1-命名规则"><a href="#3-1-命名规则" class="headerlink" title="3.1 命名规则"></a>3.1 命名规则</h2><p><strong>主要版本</strong><br><strong>1：</strong>代表ST-LINK/V1<br><strong>2：</strong>代表ST-LINK/V2， ST-LINK/V2-1，ST-LINK/V2-A和 ST-LINK/V2-B<br><strong>3：</strong>代表STLINK-V3SET 和 STLINK-V3E</p><p>比如V2.J33.S7就是属于V2版本的ST-Link。</p><p><strong>次要版本</strong><br><strong>J：</strong>支持STM32调试接口的版本(JTAG和SWD协议)。值0表示不支持该接口(对于STM8的Discovery板，如：V2.J0.S4)。</p><p><strong>S：</strong>支持STM8调试接口的版本(SWIM协议)。值0表示不支持该接口(对于某些STM32的Discovery和Eval板，如：V2.J33.S0)</p><p><strong>M：</strong>用于大容量存储和虚拟COM端口接口的版本（如：V2.J33.M25）。</p><p><strong>B：</strong>桥接界面版本（V3.J1.M1.B1.S1）。</p><h2 id="3-2-举例说明"><a href="#3-2-举例说明" class="headerlink" title="3.2 举例说明"></a>3.2 举例说明</h2><p>为了让大家进一步了解，下面举几个例说明一下。<br><strong>V1.J13.S4：</strong>是ST-LINK/V1独立版本。</p><p><strong>V2.J27.S6：</strong>是ST-LINK/V2独立版本(具有STM32和STM8调试接口)。</p><p><strong>V2.J27.S0：</strong>是32F401CDISCOVERY开发板自带ST-Link(具有STM32调试接口，没有STM8调试接口，没有大容量存储接口，没有虚拟COM端口)的版本。</p><p><strong>V2.J27.M15：</strong>是用于核板和其他ST-LINK/V2-1、ST-LINK/V2-A、ST-LINK/V2-B板(具有STM32调试接口、大容量存储接口、虚拟COM端口)的版本。</p><p><strong>V3.J1.M1.B1.S1：</strong>是STLINK-V3SET的一个版本(具有STM8和STM32调试接口、大容量存储接口、虚拟COM端口、网桥接口)。</p><h2 id="3-3-强调说明"><a href="#3-3-强调说明" class="headerlink" title="3.3 强调说明"></a>3.3 强调说明</h2><p>ST-Link固件的类型与硬件紧密相连。因此，<strong>不可能更改给定板的固件类型</strong>(例如：从V2.J27.S6更改为V2.J27.M15)。<strong>只能更新同一类型固件的版本</strong>(例如：V2.J25.M14到V2.J27.M15)。</p><p>所以，ST-Link升级时，固件类型是升级工具<strong>自动识别类型</strong>，一般不能更改的类型。（后面文章讲述升级相关内容）。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;一些人可能看了上一篇关于ST-Link的内容，就会产生疑惑。。。&lt;/p&gt;
&lt;p&gt;ST-Link有那么多硬件版本，那么&lt;strong&gt;里面的软件（固件）都一样吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的ST-Link&lt;strong&gt;可以升级不同版本的固件吗？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ST-Link资料01_ST-Link介绍，认识各版本硬件及特征</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料01_ST-Link介绍，认识各版本硬件及特征.html</id>
    <published>2019-02-19T01:00:00.000Z</published>
    <updated>2019-02-19T04:07:08.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>想必学习过STM32的朋友都应该知道ST-Link这个工具，但大部分人对它的认识仅仅处于表面，只知道它有在线调试、编程（下载）功能。</p><p>我一路过来，对ST-Link也<strong>积累了一些“扩展”知识</strong>，所以特地写下几篇关于ST-Link的专栏文章。</p><p>该专栏以简单、基础为原则，重点突出其中内容，相信该专栏文章对你有所帮助。</p><a id="more"></a><h1 id="二、ST-Link介绍"><a href="#二、ST-Link介绍" class="headerlink" title="二、ST-Link介绍"></a>二、ST-Link介绍</h1><p>ST-Link是用于STM8和STM32微控制器的<strong>在线调试器和编程器</strong>，也是大家口中的<strong>下载器</strong>。</p><p>ST-Link具有SWIM、JTAG / SWD等通信接口，用于与STM8或STM32微控制器进行通信（各版本有差异）。</p><p>三种接口说明：<br><strong>· SWIM：</strong>Single Wire Interface Module，单线接口模块。<br><strong>· JTAG：</strong>Joint Test Action Group，联合测试工作组，是一种国际标准测试协议。<br><strong>· SWD：</strong>Serial Wire Debugging，串行调试接口。</p><p>STM8使用USB全速接口与<strong>ST Visual Develop（STVD集成开发环境）或ST Visual Program（STVP编程软件）</strong>进行通信。</p><p>STM32使用USB全速接口与<strong>ATOLLIC®，IAR™，KEIL™或TASKING™</strong>集成开发环境进行通信。同时，与<strong>STVP、STM32 ST-LINK utility、STM32CubeProg</strong>编程软件进行通信。</p><h1 id="三、ST-Link硬件"><a href="#三、ST-Link硬件" class="headerlink" title="三、ST-Link硬件"></a>三、ST-Link硬件</h1><p>ST-Link的硬件，官方推出了三大版本：<strong>V1、V2和V3</strong>。同时，在ST开发板上也自带有ST-Link工具，但其ST-Link版本因开发板不同而各有不同。</p><p>ST-Link三大版本硬件上差异还是比较大，所以相应功能也有差异，后续逐渐讲述，下面认识一下各版本硬件。</p><h2 id="3-1-ST-Link-V1"><a href="#3-1-ST-Link-V1" class="headerlink" title="3.1 ST-Link V1"></a>3.1 ST-Link V1</h2><p>官方地址：<br><a href="https://www.st.com/en/development-tools/st-link.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/st-link.html</a></p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/1.ST-Link%20V1.jpg?raw=true"><br></table><p>V1是比较老的版本，目前市面上很少看见有V1版，基本被V2版取代了。</p><h2 id="3-2-ST-Link-V2"><a href="#3-2-ST-Link-V2" class="headerlink" title="3.2 ST-Link V2"></a>3.2 ST-Link V2</h2><p>官方地址：<br><a href="https://www.st.com/en/development-tools/st-link-v2.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/st-link-v2.html</a></p><table><br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/2.ST-Link%20V2.jpg?raw=true"><br></table><p>V2包含两个版本：<strong>ST-LINK/V2</strong>（标准版） 和 <strong>ST-LINK/V2-ISOL</strong>（隔离版）。</p><p>隔离版具有信号隔离功能，但价格要比标准版贵几倍。</p><h2 id="3-3-ST-Link-V3"><a href="#3-3-ST-Link-V3" class="headerlink" title="3.3 ST-Link V3"></a>3.3 ST-Link V3</h2><p>官方地址：<br><a href="https://www.st.com/en/development-tools/stlink-v3set.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stlink-v3set.html</a></p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/3.ST-Link%20V3.jpg?raw=true"><br></table><p>V3是18年下半年新推出的一个版本，功能、速度上也是有很大差异。目前（19年1月）官网指导价35美元，市面上普及率还不是很高。</p><h2 id="3-4-开发板自带ST-Link"><a href="#3-4-开发板自带ST-Link" class="headerlink" title="3.4 开发板自带ST-Link"></a>3.4 开发板自带ST-Link</h2><p>ST原厂推出的各种Nucleo、Discovery Kits、Eval Boards开发板基本都自带有一个ST-link。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/4.%E5%BC%80%E5%8F%91%E6%9D%BF%E8%87%AA%E5%B8%A6ST-Link.png?raw=true"><br></table><p>这些板子上自带的ST-Link版本各有不同，像以前一些较老的开发板自带的ST-Link为V1版本。这后面新推出的开发板自带的ST-Link基本都是V2及V2的衍生版本。</p><h2 id="3-5-山寨ST-link"><a href="#3-5-山寨ST-link" class="headerlink" title="3.5 山寨ST-link"></a>3.5 山寨ST-link</h2><p>相信10个使用S-Link的人中，有9个都用过山寨ST-link（我也不例外）。目前市面上山寨的ST-Link，大部分是<strong>山寨V2标准版</strong>。</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/5.%E5%B1%B1%E5%AF%A8ST-Link.png?raw=true"><br></table><p>山寨的ST-Link主要的特点就是便宜，一般某宝上10~20元就能买一个。<strong>里面固件一般没什么问题，可以直接升级ST官方的固件，最大差异就是硬件</strong>。</p><p>如果运气好，能用很久。我有一个山寨货，用了好几年，期间电源短路、芯片发烫等各种折磨，至今都是好的。</p><p>当然，如果运气差，可能买回来下载一次就不坏了，而且还有可能损坏你的目标芯片（STM8/32）。</p><h1 id="四、ST-Link各版本特征"><a href="#四、ST-Link各版本特征" class="headerlink" title="四、ST-Link各版本特征"></a>四、ST-Link各版本特征</h1><p>ST-Link站在硬件的角度，目前（2019年02月）官网还将其分为以下6各版本：<br><strong>·ST-LINK/V1</strong><br><strong>·ST-LINK/V2</strong><br><strong>·ST-LINK/V2-1</strong><br><strong>·ST-LINK/V2-A</strong><br><strong>·ST-LINK/V2-B</strong><br><strong>·ST-LINK-V3SET</strong></p><p>这些版本就是位于上面章节说的ST-Link硬件中，主要就是V2衍生出了几个版本，嵌入到Nucleo、Discovery Kits、Eval Boards这些开发板中。</p><p>这是站在硬件角度来分的几个版本，其实站在软件角度（固件），也是可以分很多版本（后续文章讲述）。</p><p>为了让大家更加了解这几个版本，下面给出这几个版本主要特征（来自ST官网信息）。</p><h2 id="4-1-ST-LINK-V1特征"><a href="#4-1-ST-LINK-V1特征" class="headerlink" title="4.1 ST-LINK/V1特征"></a>4.1 ST-LINK/V1特征</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/6.V1%E7%89%B9%E5%BE%81.png?raw=true"><br></table><h2 id="4-2-ST-LINK-V2特征"><a href="#4-2-ST-LINK-V2特征" class="headerlink" title="4.2 ST-LINK/V2特征"></a>4.2 ST-LINK/V2特征</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/7.V2%E7%89%B9%E5%BE%81.png?raw=true"><br></table><h2 id="4-3-ST-LINK-V2-1特征"><a href="#4-3-ST-LINK-V2-1特征" class="headerlink" title="4.3 ST-LINK/V2-1特征"></a>4.3 ST-LINK/V2-1特征</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/8.V2-1%E7%89%B9%E5%BE%81.png?raw=true"><br></table><h2 id="4-4-ST-LINK-V2-A特征"><a href="#4-4-ST-LINK-V2-A特征" class="headerlink" title="4.4 ST-LINK/V2-A特征"></a>4.4 ST-LINK/V2-A特征</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/9.V2-A%E7%89%B9%E5%BE%81.png?raw=true"><br></table><h2 id="4-5-ST-LINK-V2-B特征"><a href="#4-5-ST-LINK-V2-B特征" class="headerlink" title="4.5 ST-LINK/V2-B特征"></a>4.5 ST-LINK/V2-B特征</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/10.V2-B%E7%89%B9%E5%BE%81.png?raw=true"><br></table><h2 id="4-6-ST-LINK-V3SET特征"><a href="#4-6-ST-LINK-V3SET特征" class="headerlink" title="4.6 ST-LINK-V3SET特征"></a>4.6 ST-LINK-V3SET特征</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9901_ST-Link%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%AE%A4%E8%AF%86%E5%90%84%E7%89%88%E6%9C%AC%E7%A1%AC%E4%BB%B6%E5%8F%8A%E7%89%B9%E5%BE%81/11.V3SET%E7%89%B9%E5%BE%81.png?raw=true"><br></table><h2 id="4-7-简述各版本来历"><a href="#4-7-简述各版本来历" class="headerlink" title="4.7 简述各版本来历"></a>4.7 简述各版本来历</h2><p>ST-Link是随着时间的推移，功能和版本逐渐在更新。ST-Link的前两个版本都是独立的，并嵌入到Discovery和Eval Boards开发板中。</p><p>这两个版本是：<br><strong>·ST-LINK/V1</strong><br><strong>·ST-LINK/V2</strong></p><p>第三个ST-Link版本<strong>ST-LINK/V2-1</strong>是ST-LINK/V2的演化，<strong>增加了USB接口(大容量存储接口和虚拟COM端口)</strong>，在应用板中对STM32单片机进行了更好的电源管理控制。</p><p>为了支持ST-LINK/V2版本的一些功能，后来又实现了ST-LINK/V2版本的另外两个版本:<br><strong>·ST-LINK/V2-A：</strong>用于大容量存储<br><strong>·ST-LINK/V2-B：</strong>用于大容量存储和虚拟COM端口</p><p><strong>ST-LINK-V3</strong>是目前（2019年02月）<strong>最新、功能最强大的一款</strong>。它首先作为一个模块化的独立探针(STLINK-V3SET)引入，也可以嵌入到演示板(STLINK-V3E)中。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;想必学习过STM32的朋友都应该知道ST-Link这个工具，但大部分人对它的认识仅仅处于表面，只知道它有在线调试、编程（下载）功能。&lt;/p&gt;
&lt;p&gt;我一路过来，对ST-Link也&lt;strong&gt;积累了一些“扩展”知识&lt;/strong&gt;，所以特地写下几篇关于ST-Link的专栏文章。&lt;/p&gt;
&lt;p&gt;该专栏以简单、基础为原则，重点突出其中内容，相信该专栏文章对你有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程.html</id>
    <published>2019-01-15T10:00:00.000Z</published>
    <updated>2019-01-15T09:49:28.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【Keil系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【Keil系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C.html">Keil系列教程01_Keil介绍、下载、安装与注册</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">Keil系列教程02_新建基础软件工程</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">Keil系列教程03_主窗口和工具栏详细说明</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">Keil系列教程04_菜单概述</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程05_工程目标选项配置（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程06_工程目标选项配置（二）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程07_Configuration（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程08_Configuration（二）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F.html">Keil系列教程09_调试仿真</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0.html">Keil系列教程10_文件类型及相关描述</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E.html">Keil系列教程11_工程窗口图标说明</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90.html">Keil系列教程12_map文件全面解析</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B.html">Keil系列教程13_创建多目标工程</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4.html">Keil系列教程14_创建多工程工作空间</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E.html">Keil系列教程15_编辑窗口右键菜单选项说明</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【Keil系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【EmbeddedDevelop】&lt;/a&gt;，关注微信公众号回复【Keil系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程15_编辑窗口右键菜单选项说明</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程15_编辑窗口右键菜单选项说明.html</id>
    <published>2019-01-15T09:30:00.000Z</published>
    <updated>2019-01-15T10:04:09.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>在<strong>编辑窗口</strong>中，点击鼠标右键，会出现一个菜单选项（<strong>右键菜单</strong>），里面包含多项菜单内容。但在不同位置，出现的菜单选项可能不同。</p><p><strong>右键菜单属于一种快捷操作</strong>，比较常用，大部分内容在我们的Menu菜单中都能找到，以及在快捷按钮、快捷键也能找到。同一种菜单它们具有相同的功能。</p><p>在编辑窗口中大致分为两类，一类是<strong>文件名右键菜单</strong>，另一类是<strong>编辑文本右键菜单</strong>。</p><a id="more"></a><table><br><strong>右键菜单内容</strong>动画效果：<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/1.%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.gif?raw=true"><br></table><h1 id="二、文件名右键菜单"><a href="#二、文件名右键菜单" class="headerlink" title="二、文件名右键菜单"></a>二、文件名右键菜单</h1><p>文件名右键菜单在打开<strong>单个文件和多个文件呈现菜单选项不同</strong>。如下图，打开多个文件时，会多出两个菜单。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/2.%E6%96%87%E4%BB%B6%E5%90%8D%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.png?raw=true"><br></table><p>1.Colse：关闭当前文件<br>2.Colse All But This：关闭所有文件，除当前文件之外<br>3.Colse All：关闭所有文件</p><p>4.Copy Full Path：复制当前文件路径<br>5.Open Containing Folder：打开当前文件所在文件夹</p><p>6.New Horizontal Tab Group：新建水平编辑窗口<br>7.New Vertical Tab Group：新建垂直编辑窗口</p><table><br><strong>文件名右键菜单567</strong>动画效果：<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/3.%E6%96%87%E4%BB%B6%E5%90%8D%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95567%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h1 id="三、编辑文本右键菜单"><a href="#三、编辑文本右键菜单" class="headerlink" title="三、编辑文本右键菜单"></a>三、编辑文本右键菜单</h1><p>编辑文本右键菜单类似上面，在不同情况下，菜单选项呈现不同的内容。比如：同样在空白处，<strong>在.h和.c文件下，二者会有差异</strong>，但大部分内容还是一样。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/4.%E7%BC%96%E8%BE%91%E6%96%87%E6%9C%AC%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%AF%B9%E6%AF%94.png?raw=true"><br></table><p>相信使用过Keil的朋友都知道，在编辑文本的时候，点击右键，会出现类似如上图的菜单选项，只是大部分人没有关注过这些菜单选项的差异。</p><p>当然，作为用户，我们不必关心这些右键菜单选项的差异，只需要知道如何使用即可。</p><p><strong>1.Split Window horizontally：水平分割窗口</strong><br>这个类似新建水平编辑窗口，只是这里是将同一个文件分割在两个窗口。</p><table><br><strong>水平分割窗口</strong>动画效果：<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/5.%E6%B0%B4%E5%B9%B3%E5%88%86%E5%89%B2%E7%AA%97%E5%8F%A3%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><p><strong>2.Open Document “bsp.h”：打开文档bsp.h</strong><br>这个菜单选项需要在「#include “xxx.h”」处点击右键才会出现，也就是我们平时打开头文件。</p><p><strong>3.Insert ‘#include file’：插入‘包含文件’</strong><br>这个容易理解，就是在光标所在行，插入「#include “xxx.h”」，但是后面有个扩展菜单，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/6.%E6%8F%92%E5%85%A5Include%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>提示：</strong>后面stm32f10x.h与你工程目标器件型号有关（这里是STM32F103ZE）。如果器件型号是STM32F407ZE，后面会显示stm32f4xx.h。</p><p><strong>4.Go to Headerfile：转向头文件</strong><br>这个功能类似于「上面第2点 打开文档bsp.h」，只有在源文件（c/c++）才有，在头文件（.h）中没有。</p><table><br><strong>转向头文件</strong>动画效果：<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/7.%E8%BD%AC%E5%90%91%E5%A4%B4%E6%96%87%E4%BB%B6%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><p><strong>5.Insert/Remove Breakpoint：插入/移除断点</strong></p><p><strong>6.Enable/Disable Breakpoint：使能/失能断点</strong><br>这两个关于断点的功能，用于调试，可以参看我之前的文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F.html">《Keil系列教程09_调试仿真》</a>四个断点按钮章节。</p><p><strong>7.Insert/Remove Bookmark：插入/移除书签</strong></p><p><strong>8.Undo：撤销编辑</strong></p><p><strong>9.Redo：恢复编辑</strong></p><p><strong>10.Cut：剪切</strong></p><p><strong>11.Copy：复制</strong></p><p><strong>12.Paste：粘贴</strong></p><p><strong>13.Save All：保存所有文件</strong><br>上面7~13的七项详细内容可以参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《Keil系列教程03_主窗口和工具栏详细说明》</a>。</p><p><strong>14.Outlining：提纲，概要</strong><br>这个菜单选项有多级扩展子菜单，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/8.Outlining%E6%89%A9%E5%B1%95%E9%80%89%E9%A1%B9.png?raw=true"><br></table><p><strong>Show All Outlining：</strong>显示所有提纲<br><strong>Hile All Outlining：</strong>隐藏所有提纲<br><strong>Expand All Definitions：</strong>展开所有定义<br><strong>Collapse All Definitions：</strong>折叠所有定义<br><strong>Collapse Current Block：</strong>折叠当前块<br><strong>Collapse Current Procedure：</strong>折叠当前程序</p><table><br><strong>Outlining提纲</strong>动画效果：<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/9.Outlining%E6%8F%90%E7%BA%B2%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><p><strong>15.Advanced：高级功能</strong><br>这个菜单同样有多个扩展子菜单，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/10.Advanced%E6%89%A9%E5%B1%95%E9%80%89%E9%A1%B9.png?raw=true"><br></table><p><strong>Go To Line：</strong>跳转到指定行<br><strong>Select Text between Matching Braces：</strong>在匹配的括号中选择文本<br><strong>Go To Matching Braces：</strong>转到匹配括号<br><strong>Tabify Selection：</strong>将选中的空格符替换为Tab制表符<br><strong>Untabify Selection：</strong>将选中的Tab制表符替换为空格符（转换）<br><strong>Make Uppercase：</strong>将需选中文本替换为大写<br><strong>Make Lowercase：</strong>将需选中文本替换为小写<br><strong>Comment Selection：</strong>注释选中内容<br><strong>Uncomment Selection：</strong>取消注释选中内容<br><strong>Indent Selection：</strong>选中内容缩进<br><strong>Unindent Selection：</strong>选中内容取消缩进<br><strong>Indent Selection with Text：</strong>在xxx文本前缩进<br><strong>Unindent Selection with Text：</strong>在xxx文本前取消缩进<br><strong>Delete Trailing White Space：</strong>删除选中内容每行最后空格<br><strong>Delete Horizontal White Space：</strong>删除水平空格<br><strong>Cut Current Line：</strong>剪切当前行<br><strong>Go To Definition of current Word：</strong>转到当前字定义<br><strong>Go To Next Reference of current Word：</strong>转到当前字下一个引用<br><strong>Go To Previous Reference of current Word：</strong>转到当前字上一个引用<br><strong>Go To Declaration of current Word：</strong>转到当前字申明<br><strong>Show All Reference of current Word：</strong>显示当前字所有申明<br><strong>Refresh Source Browser View：</strong>刷新所有浏览信息<br><strong>Toggle Text Editor/Configuration Wizard：</strong>切换文本编辑器/配置向导</p><p>以上菜单选项内容，有部分使用的比较频繁，有部分很少使用，根据大家平时习惯，有些常用菜单可以通过快捷键实现（也可以配置快捷键）。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;在&lt;strong&gt;编辑窗口&lt;/strong&gt;中，点击鼠标右键，会出现一个菜单选项（&lt;strong&gt;右键菜单&lt;/strong&gt;），里面包含多项菜单内容。但在不同位置，出现的菜单选项可能不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;右键菜单属于一种快捷操作&lt;/strong&gt;，比较常用，大部分内容在我们的Menu菜单中都能找到，以及在快捷按钮、快捷键也能找到。同一种菜单它们具有相同的功能。&lt;/p&gt;
&lt;p&gt;在编辑窗口中大致分为两类，一类是&lt;strong&gt;文件名右键菜单&lt;/strong&gt;，另一类是&lt;strong&gt;编辑文本右键菜单&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程14_创建多工程工作空间</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程14_创建多工程工作空间.html</id>
    <published>2018-12-18T10:00:00.000Z</published>
    <updated>2018-12-18T09:57:38.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>继上一篇文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B.html">《Keil系列教程13_创建多目标工程》</a>，本文接着讲述<strong>创建多工程的工作空间</strong>。</p><p>本文「创建多工程工作空间」主要的内容不多，会讲述一部分<strong>额外的相关内容</strong>。</p><p>创建多工程工作空间一般用于项目中有多个工程，<strong>为了统一管理项目</strong>。一般初学者不常用。</p><a id="more"></a><h1 id="二、工作空间与工程的关系"><a href="#二、工作空间与工程的关系" class="headerlink" title="二、工作空间与工程的关系"></a>二、工作空间与工程的关系</h1><p>本章节算是回顾前面讲述过的知识点：<strong>工作空间与工程的包含关系，一个工作空间可以包含多个工程</strong>。</p><p>下图是<strong>工作空间、 工程、 目标</strong>三者的关系：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/4.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E3%80%81%E5%B7%A5%E7%A8%8B%E3%80%81%E7%9B%AE%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png?raw=true"><br></table><p><strong>提示：</strong><br><strong>在Keil中叫Target（目标）</strong>，而在IAR中叫Node（节点）。其实这两者意思一样，都是隶属于工程的下一级。</p><h1 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h1><p>创建工作空间可以说没有什么难度，其实难点在于<strong>创建工程，以及工程目标相关的配置工作</strong>。</p><p>而创建工程、工程目标选项配置这些内容在前面都有讲述，请参看前面文章：<br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">Keil系列教程02_新建基础软件工程</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程05_工程目标选项配置（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程06_工程目标选项配置（二）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B.html">Keil系列教程13_创建多目标工程</a></p><p>参考上面4篇文章创<strong>建好工程、配置好工程目标</strong>，再创建工作空间，最后在工作空间中添加工程即可。</p><p>本文默认已经创建并配置好了3个工程：<strong>Project1、Project2、Project3</strong>。将这个3个工程添加到我们创建的工作空间<strong>Workspace</strong>中。</p><p><strong>提示：</strong><br>1.本文只是方便大家理解，提供的3个简单工程Project1、2、3<strong>源代码和功能都类似</strong>。</p><p>2.三个工程都是基础软件工程，它们使用公共的标准外设库Libraries。</p><p>3.一般实际项目源码和功能不会相同，同时Project1、Workspace命名方式也请根据实际情况而定。</p><p>4.文末将提供这个例子代码供大家下载。</p><h1 id="四、创建工作空间"><a href="#四、创建工作空间" class="headerlink" title="四、创建工作空间"></a>四、创建工作空间</h1><p>创建多目标工作空间，就是<strong>先创建一个工作空间（Workspace），再将创建好的工程（Project）添加带工作空间即可</strong>。</p><p>这一章节讲述<strong>创建工作空间，添加工程的基本操作</strong>，下一章节讲述多工程的相关内容。</p><h2 id="4-1-整理文件夹及文件"><a href="#4-1-整理文件夹及文件" class="headerlink" title="4.1 整理文件夹及文件"></a>4.1 整理文件夹及文件</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/1.%E6%95%B4%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%8A%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>我们这里3个工程<strong>使用公共的库Libraries</strong>，一般在实际应用中也存在类似情况，比如多个工程共同使用一些源代码、算法库等。</p><h2 id="4-2-创建工作空间"><a href="#4-2-创建工作空间" class="headerlink" title="4.2 创建工作空间"></a>4.2 创建工作空间</h2><p>打开Keil软件 -&gt; Project -&gt; New Multi-Project Workspace：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/2.%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4.png?raw=true"><br></table><h2 id="4-3-保存工作空间"><a href="#4-3-保存工作空间" class="headerlink" title="4.3 保存工作空间"></a>4.3 保存工作空间</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/3.%E4%BF%9D%E5%AD%98%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4.png?raw=true"><br></table><h2 id="4-4-添加工程"><a href="#4-4-添加工程" class="headerlink" title="4.4 添加工程"></a>4.4 添加工程</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/4.%E6%B7%BB%E5%8A%A0%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><table><br>添加工程动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/5.%E6%B7%BB%E5%8A%A0%E5%B7%A5%E7%A8%8B%EF%BC%88%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%EF%BC%89.gif?raw=true"><br></table><h2 id="4-5-添加完成多工程"><a href="#4-5-添加完成多工程" class="headerlink" title="4.5 添加完成多工程"></a>4.5 添加完成多工程</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/6.%E6%B7%BB%E5%8A%A0%E5%AE%8C%E6%88%90%E5%A4%9A%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><p>到这里，包含多个工程的工作空间就创建完成了。如果前面创建的3个工程没有问题，则可直接在该工作空间选择工程进行编译、下载等操作。</p><h1 id="五、多工程相关内容"><a href="#五、多工程相关内容" class="headerlink" title="五、多工程相关内容"></a>五、多工程相关内容</h1><p>这一章节讲述多工程工作空间相关的一些内容：工作空间管理、激活工程、编译选项等。</p><h2 id="5-1-工作空间管理"><a href="#5-1-工作空间管理" class="headerlink" title="5.1 工作空间管理"></a>5.1 工作空间管理</h2><p>进入工作空间管理有多种方式：<br><strong>1.快捷按钮</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/7.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%E5%BF%AB%E6%8D%B7%E6%8C%89%E9%92%AE.png?raw=true"><br></table><p><strong>2.菜单</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/8.%E8%8F%9C%E5%8D%95%E8%BF%9B%E5%85%A5%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86.png?raw=true"><br></table><p><strong>工作空间管理</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/9.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86.png?raw=true"><br></table><p>工作空间管理，主要就是<strong>添加、删除、上下移动工程，以及设置“选中”工程为活动（当前使用）工程</strong>。</p><h2 id="5-2-激活工程"><a href="#5-2-激活工程" class="headerlink" title="5.2 激活工程"></a>5.2 激活工程</h2><p>我们工作空间中一般有多个工程，但我们一个时间只能编译、下载、调试一个工程。</p><p>那么，我们就需要选中其中一个作为当前使用的工程，简单说就是需要激活一个工程。</p><p>激活的方法可以在上面工程管理点击“Set as Active Project”实现，也可以通过如下图方式实现：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/10.%E6%BF%80%E6%B4%BB%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><h2 id="5-3-编译选项"><a href="#5-3-编译选项" class="headerlink" title="5.3 编译选项"></a>5.3 编译选项</h2><p>在该教程3,4中讲述工具栏按钮和菜单时，讲过关于编译的几个选项，其中一个「Batch Build分批编译」就是用于本文的多工程。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/11.%E8%BF%9B%E5%85%A5%E5%88%86%E6%89%B9%E7%BC%96%E8%AF%91%E8%AE%BE%E7%BD%AE.png?raw=true"><br></table><p>进入分批编译设置：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/12.%E5%88%86%E6%89%B9%E7%BC%96%E8%AF%91%E8%AE%BE%E7%BD%AE.png?raw=true"><br></table><p>如果你勾选了所有工程，编译的时候会把工作空间下所有工程都进行编译。大家试一下就明白，很好理解的。</p><h1 id="六、下载"><a href="#六、下载" class="headerlink" title="六、下载"></a>六、下载</h1><p>为方便大家学习，我这里提供可直接编译运行的源代码工程供大家下载。</p><p>百度网盘下载地址：<a href="https://pan.baidu.com/s/1s_1t7EuvUP0j6ekzizpvVA" target="_blank" rel="noopener">https://pan.baidu.com/s/1s_1t7EuvUP0j6ekzizpvVA</a><br>密码：itly</p><p>GitHub下载地址：<a href="https://github.com/EmbeddedDevelop/Keil-MDK-ARM_Multi-Project.git" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop/Keil-MDK-ARM_Multi-Project.git</a></p><p>（提示：下载链接后期可能会失效， 请关注微信公众号获取最新消息）</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;继上一篇文章&lt;a href=&quot;https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B.html&quot;&gt;《Keil系列教程13_创建多目标工程》&lt;/a&gt;，本文接着讲述&lt;strong&gt;创建多工程的工作空间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文「创建多工程工作空间」主要的内容不多，会讲述一部分&lt;strong&gt;额外的相关内容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;创建多工程工作空间一般用于项目中有多个工程，&lt;strong&gt;为了统一管理项目&lt;/strong&gt;。一般初学者不常用。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程.html</id>
    <published>2018-12-13T02:00:00.000Z</published>
    <updated>2018-12-13T02:18:34.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【CANOpen系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_%E5%88%9D%E8%AF%86CAN%E4%B8%8ECANOpen%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9.html">CANOpen系列教程01_初识CAN与CANOpen及相关内容</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE.html">CANOpen系列教程02_理解CAN总线协议</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8.html">CANOpen系列教程03_CAN收发器功能、原理及作用</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.html">CANOpen系列教程04_CAN总线波特率、位时序、帧类型及格式说明</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A.html">CANOpen系列教程05_CAN总线同步与位填充、优先级的决定</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89.html">CANOpen系列教程06_结合代码理解CAN底层收发数据（含STM32例程）</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_CANOpen%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0.html">CANOpen系列教程07_CANOpen协议概述</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html">CANOpen系列教程08_CANOpen通信接口引导学习</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.html">CANOpen系列教程09_CANOpen对象字典</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">CANOpen系列教程10_关于Canfestival及对象字典生成工具环境搭建</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html">CANOpen系列教程11_深度分析CanFestival_3架构</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E.html">CANOpen系列教程12_对象字典编辑器操作说明</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html">CANOpen系列教程13_协议源码移植（一）</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89.html">CANOpen系列教程14_协议源码移植（二）</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_NMT%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E8%AF%B4%E6%98%8E.html">CANOpen系列教程15_NMT网络管理和相关源码说明</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【CANOpen系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【EmbeddedDevelop】&lt;/a&gt;，关注微信公众号回复【CANOpen系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程15_NMT网络管理和相关源码说明</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_NMT%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程15_NMT网络管理和相关源码说明.html</id>
    <published>2018-12-13T01:30:00.000Z</published>
    <updated>2018-12-13T02:06:02.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>该系列教程13、14讲述了移植相关内容，以及提供给大家可直接编译、下载运行的源码工程，想必你已经掌握了一些基础的知识了。</p><p>在<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html">《CANOpen系列教程08_CANOpen通信接口引导学习》</a>中，引导大家参看<strong>《CANopen轻松入门》</strong>通信接口的相关知识。而没有在文中具体描述关于<strong>CANOpen通信接口</strong>的知识。</p><p>原因在于通信接口的内容太多，单纯的去看这些内容，容易让人产生更多困惑。</p><p>对于程序员来说，<strong>结合源代码来理解相关理论知识更加容易</strong>。所以，我将其留在了这后面来讲述。</p><p>下面结合移植好的源代码，讲述<strong>CANOpen网络管理（NMT：Network management）</strong>的相关知识。</p><a id="more"></a><h1 id="二、关于网络管理NMT"><a href="#二、关于网络管理NMT" class="headerlink" title="二、关于网络管理NMT"></a>二、关于网络管理NMT</h1><p>在CANOpen网络中，分主站和从站，而通常由主站来管理整个网络。比如：复位、停止等。</p><p>《CANopen轻松入门》中军队的例子说的很好：一个军队，如果没有指挥员来管理，下面士兵岂不乱套了。</p><p>例子中<strong>指挥员就是CANOpen中的网络管理主站，士兵就是从站</strong>。</p><p>重要的一点：<strong>每个 CANopen 从节点的 CANopen 协议栈中，必须具备 NMT 管理的相应代码</strong>。也就是说从站是被接收管理。</p><p>当然，我们使用的Canfestival这套免费框架，大家不必担心，肯定是具有相关代码，我们需要明白怎么使用这套源码即可。</p><h1 id="三、NMT网络管理节点状态"><a href="#三、NMT网络管理节点状态" class="headerlink" title="三、NMT网络管理节点状态"></a>三、NMT网络管理节点状态</h1><h2 id="3-1-6种节点状态"><a href="#3-1-6种节点状态" class="headerlink" title="3.1 6种节点状态"></a>3.1 6种节点状态</h2><p>NMT网络管理主要包含以下<strong>6种状态</strong>：<br><strong>1.初始化（Initializing）：</strong>节点上电后对功能部件包括 CAN 控制器进行初始化；</p><p><strong>2.应用层复位（Application Reset）：</strong>节点中的应用程序复位（开始），比如开关量输出、模拟量输出的初始值；</p><p><strong>3.通讯复位（Communication reset）：</strong>节点中的CANopen通讯复位（开始），从这个时刻起，此节点就可以进行CANopen通讯了；</p><p><strong>4.预操作状态（Pre-operational）：</strong>节点的CANopen通讯处于操作就绪状态，此时此节点不能进行PDO通信，而可以进行SDO进行参数配置和NMT网络管理的操作；</p><p><strong>5.操作状态（operational）：</strong>节点收到NMT主机发来的启动命令后， CANopen通讯被激活， PDO通信启动后， 按照对象字典里面规定的规则进行传输，同样SDO也可以对节点进行数据传输和参数修改；</p><p><strong>6.停止状态（Stopped）： </strong>节点收到NMT主机发来的停止命令后，节点的PDO通信被停止，但SDO和NMT网络管理依然可以对节点进行操作；</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_NMT%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E8%AF%B4%E6%98%8E/1.%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%8A%B6%E6%80%81.png?raw=true"><br></table><p>NMT网络管理6种状态如上图所示，其中1 — 15各处代表含义：<br><strong>(1)：</strong>Power on上电初始化</p><p><strong>(2)：</strong>Automatic switch to Pre-operational自动切换预操作状态</p><p><strong>(3) 、(6)：</strong>NMT switch to Operational网络管理切换到操作状态</p><p><strong>(4)、(7)：</strong>NMT switch to Pre-operational网络管理切换到预操作状态</p><p><strong>(5)、(8)：</strong>NMT switch to Stopped网络管理切换到停止状态</p><p><strong>(9)、(10)、(11)：</strong>NMT switch to Application reset网络管理切换到应用层复位状态</p><p><strong>(12)、(13)、(14)：</strong>NMT switch to Communication reset网络管理切换到通讯复位状态</p><p><strong>(15)：</strong>Power-off or hardware reset掉电或硬件复位</p><h2 id="3-2-源码说明"><a href="#3-2-源码说明" class="headerlink" title="3.2 源码说明"></a>3.2 源码说明</h2><p>通过上面描述，需要知道两点重要内容：<strong>主站进行网络管理，网络各个节点有多种状态</strong>。当然，一个时刻只能一种状态。</p><p>在Canfestival框架源码中，主站可通过<strong>masterSendNMTstateChange</strong>这个函数接口来管理网络节点的状态。可以理解为：<strong>主站控制，或切换从站节点的状态</strong>。</p><p>这里需要理解masterSendNMTstateChange这个函数接口的用法，也就是说接口含义，以及参数。</p><p>比如：主站上电之后，让网络中节点0x01复位：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_NMT%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E8%AF%B4%E6%98%8E/2.%E4%B8%BB%E7%AB%99%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%EF%BC%8C%E5%A4%8D%E4%BD%8D%E8%8A%82%E7%82%B9.png?raw=true"><br></table><p>这里我们结合<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html">《CANOpen系列教程13》</a>提供的代码基础上，添加一行管理节点0x01的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterSendNMTstateChange(&amp;TestMaster_Data, 0x01, NMT_Reset_Node);</span><br></pre></td></tr></table></figure></p><p><strong>第1个参数TestMaster_Data：</strong>主站对象字典<br><strong>第2个参数0x01：</strong>节点（从站）ID<br><strong>第3个参数NMT_Reset_Node：</strong>复位节点</p><p>第1,2个参数很好理解，第3个参数是通过宏定义在def.h中，总共5种状态，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_NMT%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E8%AF%B4%E6%98%8E/3.%E8%8A%82%E7%82%B9%E7%8A%B6%E6%80%81%E5%AE%8F%E5%AE%9A%E4%B9%89.png?raw=true"><br></table><p>写到这里，相信大家对网络管理节点有一定认识了，初学者可以多结合代码理解。</p><h1 id="四、NMT网络管理节点上线报文"><a href="#四、NMT网络管理节点上线报文" class="headerlink" title="四、NMT网络管理节点上线报文"></a>四、NMT网络管理节点上线报文</h1><p>该教程上一篇文章末尾讲述运行效果时，提供了一张运行时CAN总线数据的截图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/10.%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C%EF%BC%88%E6%80%BB%E7%BA%BF%E6%95%B0%E6%8D%AE%EF%BC%89.png?raw=true"><br></table><p>任何一个 CANopen 从站上线后，为了提示主站它已经加入网络（便于热插拔），或者避免与其他从站 Node-ID 冲突。这个从站必须发出节点上线报文（boot-up）。</p><p>节点上线报文的 ID 为：<strong>700h + Node-ID</strong>， 数据规定为<strong>0</strong>。 生产者（Producer）为 CANopen 从站。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_NMT%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E8%AF%B4%E6%98%8E/4.%E4%B8%8A%E7%BA%BF%E6%8A%A5%E6%96%87.png?raw=true"><br></table><h1 id="五、NMT网络管理心跳报文"><a href="#五、NMT网络管理心跳报文" class="headerlink" title="五、NMT网络管理心跳报文"></a>五、NMT网络管理心跳报文</h1><p>为了<strong>监控 CANopen 节点是否在线与目前的节点状态</strong>。 CANopen 应用中通常都要求在线上电的从站定时发送状态报文（心跳报文），以便于主站确认从站是否故障、是否脱离网络。</p><p>格式：<br><strong>CAN-ID：</strong>700h + Node-ID<br><strong>数据：</strong>一字节状态</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B15_NMT%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E8%AF%B4%E6%98%8E/5.%E5%BF%83%E8%B7%B3%E6%8A%A5%E6%96%87.png?raw=true"><br></table><p>在<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html">《CANOpen系列教程13》</a>提供例程中，就是包含一个心跳报文。心跳报文比较简单，请结合上图理解。</p><p><strong>注意：</strong><br>1.CANopen从站按其<strong>对象字典中 1017h 中填写的心跳生产时间</strong>（ms）进行心跳报文的发送。</p><p>2.CANopen主站则会按其 <strong>1016h 中填写的心跳消费时间进行检查</strong>，假设超过诺干次心跳消费时间没有收到从站的心跳报文，则认为从站已经离线或者损坏。</p><p>还有一些网络管理相关内容，大家可以结合这种思路去理解，建议参看：<br><strong>1.CiA 301 V4.2.0网络管理章节</strong><br><strong>2.周立功的CANOpen轻松入门</strong></p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;该系列教程13、14讲述了移植相关内容，以及提供给大家可直接编译、下载运行的源码工程，想必你已经掌握了一些基础的知识了。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html&quot;&gt;《CANOpen系列教程08_CANOpen通信接口引导学习》&lt;/a&gt;中，引导大家参看&lt;strong&gt;《CANopen轻松入门》&lt;/strong&gt;通信接口的相关知识。而没有在文中具体描述关于&lt;strong&gt;CANOpen通信接口&lt;/strong&gt;的知识。&lt;/p&gt;
&lt;p&gt;原因在于通信接口的内容太多，单纯的去看这些内容，容易让人产生更多困惑。&lt;/p&gt;
&lt;p&gt;对于程序员来说，&lt;strong&gt;结合源代码来理解相关理论知识更加容易&lt;/strong&gt;。所以，我将其留在了这后面来讲述。&lt;/p&gt;
&lt;p&gt;下面结合移植好的源代码，讲述&lt;strong&gt;CANOpen网络管理（NMT：Network management）&lt;/strong&gt;的相关知识。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程14_协议源码移植（二）</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程14_协议源码移植（二）.html</id>
    <published>2018-12-13T01:00:00.000Z</published>
    <updated>2018-12-13T02:15:19.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>该系列教程上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html">《协议源码移植（一）》</a>算是对CANOpen移植的准备工作，如果想要理解移植过程的知识，其实还有许多内容得了解。</p><p>本文挑一些重点来讲述，从协议源码添加到工程，源代码理解，到最后输出效果。</p><p><strong>提示：</strong>该系列教程基于：CanFestival架构、STM32F1芯片、FreeRTOS操作系统、Keil MDK-ARM开发环境。</p><a id="more"></a><h1 id="二、添加源码、路径"><a href="#二、添加源码、路径" class="headerlink" title="二、添加源码、路径"></a>二、添加源码、路径</h1><p>本节内容针对初学者做出简要描述，相关内容可参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">《Keil系列教程02_新建基础软件工程》</a>。</p><h2 id="2-1-添加组、文件"><a href="#2-1-添加组、文件" class="headerlink" title="2.1 添加组、文件"></a>2.1 添加组、文件</h2><p>简单来说，就是在你已建好的工程中添加与CANOpen相关的组和文件，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/1.%E6%B7%BB%E5%8A%A0%E7%BB%84%E3%80%81%E6%96%87%E4%BB%B6.png?raw=true"><br></table><h2 id="2-2-添加路径"><a href="#2-2-添加路径" class="headerlink" title="2.2 添加路径"></a>2.2 添加路径</h2><p>添加CANOpen源码的inc头文件等相关路径，编译的时候才能找到对应文件。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/2.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84.png?raw=true"><br></table><h1 id="三、添加代码及分析"><a href="#三、添加代码及分析" class="headerlink" title="三、添加代码及分析"></a>三、添加代码及分析</h1><p>移植的重要过程就是添加、删除和修改源代码这一步骤。从教程上一篇文章下载，并看过源代码的朋友就会发现，其实我们需要添加的代码并不多，<strong>主要就是需要实现几个底层的驱动函数</strong>。</p><p>下面将重要的几点罗列出来。</p><h2 id="1-修改canfestival-h文件"><a href="#1-修改canfestival-h文件" class="headerlink" title="1.修改canfestival.h文件"></a>1.修改canfestival.h文件</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/3.%E4%BF%AE%E6%94%B9canfestival.h%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>上文说了一下：添加三行语句，防止递归包含。</p><p>这里就是CANOpen定义的底层驱动接口，接口函数具体代码需要我们自己实现。</p><p><strong>canSend</strong>这个函数被CANOpen源代码调用的最多，我们最好不修改函数接口，同时需要我们实现（我在canopen_drv.c中实现的）。</p><p>其它<strong>initTimer、 canInit</strong>等函数接口，在源码中没有调用，我也没有按照这套接口来实现（初始化我在bsp下实现的）。</p><h2 id="2-底层驱动初始化代码"><a href="#2-底层驱动初始化代码" class="headerlink" title="2.底层驱动初始化代码"></a>2.底层驱动初始化代码</h2><p>上面说的initTimer、 canInit初始化，我这边为了与我代码一致，使用<strong>TIM_Initializes、CAN_Initializes</strong>替代。</p><p>分别位于<strong>bsp_timer.c 和 bsp_can.c</strong>下面，实现的具体内容这里不描述，具体可以下载源码工程参看。</p><h2 id="3-定时器调度相关接口"><a href="#3-定时器调度相关接口" class="headerlink" title="3.定时器调度相关接口"></a>3.定时器调度相关接口</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/4.%E5%AE%9A%E6%97%B6%E5%99%A8%E8%B0%83%E5%BA%A6%E7%9B%B8%E5%85%B3%E6%8E%A5%E5%8F%A3.png?raw=true"><br></table><p>其中<strong>setTimer和getElapsedTime</strong>这两个函数会被timer.c协议源文件调用。在timer.h里面有什么（如下图），但函数体没有实现，需要我们自己实现。</p><p>同时，TimeDispatch函数已经实现，定义在timer.c，但需要被定时调用（调度）。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/6.CAN%E5%8F%91%E9%80%81%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0.png?raw=true"><br></table><h2 id="4-CAN发送接口函数canSend"><a href="#4-CAN发送接口函数canSend" class="headerlink" title="4.CAN发送接口函数canSend"></a>4.CAN发送接口函数canSend</h2><p>这个CAN发送函数相当重要，接口最好不要自定义，因为scr下面多个源文件都调用了该函数。</p><p>同时，发送函数会被定时调度。所以，如果你调度方式像我例程那样，使用定时器中断的方式实现。那么，你就<strong>要考虑在中断函数里面发送的情况</strong>。</p><p>以上就是CANOpen移植，底层驱动相关的一些接口实现和说明。这部分内容，CanFestival框架提供源码是定义在drivers下面，比如STM32F1的就是cm3下面的cm3.c：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/7.cm3.png?raw=true"><br></table><p>我单独提出来实现这些驱动函数是因为我跑了一个FreeRTOS系统。当然，你的驱动也可按照drivers下面那样实现。</p><h2 id="5-其它"><a href="#5-其它" class="headerlink" title="5.其它"></a>5.其它</h2><p><strong>A.发送和接收缓存</strong><br>我这边是通过队列来实现发送和接收缓存，而cm3.c是通过MessBuf_Write和MessBuf_Read来实现缓存。</p><p><strong>B.中断接收</strong><br>我使用CAN中断接收数据，和定时器中断调度。</p><p><strong>提示：</strong>我中断入口函数是宏定义实现的，需要包含宏定义头文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define CAN_RX_IRQHandler  USB_LP_CAN1_RX0_IRQHandler</span><br><span class="line">#define CANOPEN_TIM_IRQ_Handler TIM2_IRQHandler</span><br></pre></td></tr></table></figure></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/8.%E4%B8%AD%E6%96%AD.png?raw=true"><br></table><p><strong>C.配置节点</strong><br>配置节点ID，节点的状态，这里只是简单的Demo，没有添加应用代码。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/9.%E9%85%8D%E7%BD%AE%E8%8A%82%E7%82%B9.png?raw=true"><br></table><h1 id="四、工程下载及运行效果"><a href="#四、工程下载及运行效果" class="headerlink" title="四、工程下载及运行效果"></a>四、工程下载及运行效果</h1><h2 id="1-下载工程“CANOpen工程模板（含主、从站-心跳）”"><a href="#1-下载工程“CANOpen工程模板（含主、从站-心跳）”" class="headerlink" title="1.下载工程“CANOpen工程模板（含主、从站-心跳）”"></a>1.下载工程“CANOpen工程模板（含主、从站-心跳）”</h2><p><a href="https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw" target="_blank" rel="noopener">https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw</a><br>提取码：l2dc</p><p>提示：如果链接失效，公众号回复【CANOpen系列教程】获取更新链接；</p><h2 id="2-运行效果"><a href="#2-运行效果" class="headerlink" title="2.运行效果"></a>2.运行效果</h2><p>我提供的这个Demo工程是一个只有心跳（间隔时间我们配置的1000ms），所以，启动之后，你会发现<strong>总线上间隔1秒有一个心跳</strong>。</p><p>下图是我通过CAN分析仪抓取的CAN总线数据（如果你没有分析仪，可以用我系列教程6提供的例程，通过串口打印）</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B14_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%BA%8C%EF%BC%89/10.%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C%EF%BC%88%E6%80%BB%E7%BA%BF%E6%95%B0%E6%8D%AE%EF%BC%89.png?raw=true"><br></table><p>这是先启动一会儿主站，然后关闭，再启动从站的数据，重要信息我都标记出来了。<br><strong>A.上线报文：</strong>ID：0x700  Data：0</p><p><strong>B.网络管理：</strong>ID：0x000  Data：00代表管理所有节点 Data：80代表复位节点</p><p><strong>C.心跳报文：</strong>ID：0x700  Data：05代表Operational操作状态</p><p><strong>提示：</strong>主站具有网络管理，而从站没有。同时，数据值（如81、05）的含义可参看CiA 301手册网络管理的章节（后期进行讲述）。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;该系列教程上一篇文章&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html&quot;&gt;《协议源码移植（一）》&lt;/a&gt;算是对CANOpen移植的准备工作，如果想要理解移植过程的知识，其实还有许多内容得了解。&lt;/p&gt;
&lt;p&gt;本文挑一些重点来讲述，从协议源码添加到工程，源代码理解，到最后输出效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;该系列教程基于：CanFestival架构、STM32F1芯片、FreeRTOS操作系统、Keil MDK-ARM开发环境。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程13_创建多目标工程</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程13_创建多目标工程.html</id>
    <published>2018-12-11T08:00:00.000Z</published>
    <updated>2018-12-18T02:05:31.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>相信大家都看到过带有<strong>Debug和Release</strong>两个不同目标的工程。</p><p>比如：大家熟知的VC、IAR创建工程时，默认会有这么两个<strong>Debug和Release</strong>“目标”。</p><p>还比如：我们使用Keil打开STM32的IAP例程，会看见类似如下图（多目标）的工程：</p><a id="more"></a><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/1.IAP%E7%9A%84%E5%A4%9A%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>你想过为什么会有Debug和Release，及IAP这样的多目标工程吗？ 请继续往下看。</p><h1 id="二、什么是多目标工程？"><a href="#二、什么是多目标工程？" class="headerlink" title="二、什么是多目标工程？"></a>二、什么是多目标工程？</h1><p>简单的说：就是有多个目标的工程。</p><p>在Keil中，需要理解几个名词：<strong>工作空间、工程、目标</strong>。</p><p>该教程<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">《Keil系列教程05_工程目标选项配置（一）》</a>有讲述这三个名词的含义和区别。简单的说就是一种包含关系，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/4.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E3%80%81%E5%B7%A5%E7%A8%8B%E3%80%81%E7%9B%AE%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png?raw=true"><br></table><p><strong>提示：</strong><br><strong>在Keil中叫Target（目标）</strong>，而在IAR中叫Node（节点）。其实这两者意思一样，都是隶属于工程的下一级。</p><h1 id="三、为什么要创建多目标的工程"><a href="#三、为什么要创建多目标的工程" class="headerlink" title="三、为什么要创建多目标的工程"></a>三、为什么要创建多目标的工程</h1><p>我们只有带着问题去学习，才会更加容易学会知识。创建多目标工程在实际应用中比较常见，且有着重大意义。下面举两个大家熟悉的例子（文末提供下载链接）。</p><h2 id="3-1-Debug和Release"><a href="#3-1-Debug和Release" class="headerlink" title="3.1 Debug和Release"></a>3.1 Debug和Release</h2><p>开篇说了，在我们熟悉的VC和IAR开发环境中默认就有Debug和Release两个工程目标。但很多人却不知道他们的区别。</p><p>两个目标的区别：<br><strong>Debug（调试）</strong>：主要用于调试使用，包含调试信息。<br><strong>Release（释放）</strong>：主要用于生成（正式）程序文件（如：Hex，Bin等），不包含调试信息。</p><p>当我们平时调试的时候就用Debug目标。调试好之后，生成程序文件，使用Release目标。使用Release目标的好处在于<strong>没有调试信息，编译速度也比较快</strong>。</p><h2 id="3-2-不同版本产品"><a href="#3-2-不同版本产品" class="headerlink" title="3.2 不同版本产品"></a>3.2 不同版本产品</h2><p>假如我们开发一款产品，有两个版本：<strong>低级版（Low）和高级版（High）</strong>。</p><p>这两个版本在功能上大体相同，但在硬件或软件上有略微差异。此时，就需要建立多目标工程。</p><p>比如：低级版我们使用STM32F103R8，高级版使用STM32F103ZE，且高级版多了一些显示的功能。</p><p>多目标工程的应用在不同场景下要求不同，所以，还有很多种可能。</p><h2 id="3-3-多目标工程主要意义"><a href="#3-3-多目标工程主要意义" class="headerlink" title="3.3 多目标工程主要意义"></a>3.3 多目标工程主要意义</h2><p>假如上面Debug和Release使用两个独立的工程，我们每修改Debug一个地方，那么Release也会进行相应修改。</p><p>如果我们都在一个工程里面进行编辑代码、管理工程，那么就不会出现上面重复的问题。</p><p>因此，多目标工程主要意义在于<strong>方便管理工程</strong>。</p><p><strong>提示：</strong>这些不同的目标，区别在于<strong>目标选项配置不同</strong>。</p><h1 id="四、如何创建多目标工程"><a href="#四、如何创建多目标工程" class="headerlink" title="四、如何创建多目标工程"></a>四、如何创建多目标工程</h1><p>上面让大家大概了解了一下多目标相关的知识，多目标存在的差异主要在于<strong>“Target目标”选项配置</strong>上有一定差异。</p><p>这里需要大家对<strong>工程目标选项配置</strong>有一定的了解，可以参看该教程文章：<br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程05_工程目标选项配置（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程06_工程目标选项配置（二）</a></p><p>下面结合上一章节Debug和Release、不同版本产品例子来讲述创建多目标需要修改那些配置。</p><h2 id="4-1-新建目标"><a href="#4-1-新建目标" class="headerlink" title="4.1 新建目标"></a>4.1 新建目标</h2><p>在该教程<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">《Keil系列教程02_新建基础软件工程》</a>中新建的基础工程，其实就是只有一个目标的工程。</p><p>接下来就在该工程基础上新建一个目标，首先进入工程管理界面：<strong>Project -&gt; Manage -&gt; Project Items</strong>，或点击<strong>工程管理快捷图标</strong>，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/2.%E6%96%B0%E5%BB%BA%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>假如我们的基础工程为Debug，<strong>点击新建目标</strong>（如图虚线方框）按钮，就新增一个目标，我们将新建的目标命名为Release（输入Release）。</p><p>新建之后，就会出现上面截图中Debug和Release两个目标。此时，<strong>Release目标只是Debug的一个拷贝</strong>，也就说Debug和Release两个目标的各项配置一样。只是名称不一样而已。</p><p>这里只是新增了一个Release目标，还需要进一步修改其中的配置。大体分为：<strong>工程管理、文件选项配置、（Group）组选项配置、目标选项配置</strong>。</p><p><strong>提示：</strong>以上四项内容不一定全都修改，不同需求，修改地方不同，一般需要修改的地方不多。</p><h2 id="4-2-工程管理"><a href="#4-2-工程管理" class="headerlink" title="4.2 工程管理"></a>4.2 工程管理</h2><p>工程管理里面Project Items下面的Groups组、Files文件都是公用的一套。<br>比如：我工程中有两个目标，分别用STM32F103R8、103ZE，则需要包含startup_stm32f10x_md.s和10x_hd.s。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/3.%E5%85%AC%E7%94%A8Groups%E5%92%8CFiles.png?raw=true"><br></table><p>这里公用的的意思：只要工程（目标）用到的<strong>Groups或Files</strong>，都需要添加到进去，会在工程中呈现出来。</p><p>但是，不同的目标，用到的Groups或Files不一样。在该目标中不需要的Groups或Files需要配置成“不包含”（下面讲述）。</p><p>比如：STM32F103R8_Low目标，只用startup_stm32f10x_md.s，因此需要<strong>将startup_stm32f10x_hd.s排除（不包含）该目标</strong>。</p><p><strong>Folders/Extension文件/扩展、Books书籍</strong>一般不需要配置，选择默认即可。</p><h2 id="4-3-文件选项配置"><a href="#4-3-文件选项配置" class="headerlink" title="4.3 文件选项配置"></a>4.3 文件选项配置</h2><p>接下来的文件、组、目标选项配置都需要<strong>事先选择需要配置的目标</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/4.%E9%80%89%E6%8B%A9%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>上面说的，我们选择STM32F103R8_Low目标，需要将startup_stm32f10x_hd.s排除（不包含）该目标。</p><p>选中文件startup_stm32f10x_hd.s -&gt; 右键 -&gt; Options for File进入文件选项配置：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/5.%E9%80%89%E4%B8%AD%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%B3%E9%94%AE.png?raw=true"><br></table><table><br><strong>目标文件选项配置：</strong>不包含startup_stm32f10x_hd.s<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/6.%E6%96%87%E4%BB%B6%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>上面不包含文件只是最简答、最常见的一种文件选项配置，有些应用会要求代码存储在外部ROM，或RAM执行，就需要修改下面的<strong>Memory Assignment内存分配</strong>。</p><p>同时针对汇编，或C/C++源文件还有更多选项需要配置：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/7.%E6%B1%87%E7%BC%96%E6%BA%90%E6%96%87%E4%BB%B6%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/8.C%EF%BC%8CC++%E6%BA%90%E6%96%87%E4%BB%B6%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>这里<strong>汇编、C/C++源文件</strong>的选项配置请参看“Keil系列教程06”C/C++和Asm章节。</p><p><strong>提示：</strong>这里面的选项配置是<strong>针对选中的单个File文件</strong>。</p><h2 id="4-4-组选项配置"><a href="#4-4-组选项配置" class="headerlink" title="4.4 组选项配置"></a>4.4 组选项配置</h2><p>这里组选项配置和上面文件选项配置原理类似，只是这里针对的是Group组。</p><p>比如：我们工程中一个目标用STM32F1，一个目标用STM32F4，则包含的库文件组就不同，需要<strong>“不包含”其中一组，或者把库文件组编译在外部ROM，再或者把该组编译优先级提高等</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/9.%E7%BB%84%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p><strong>提示：</strong>这里面的选项配置是<strong>针对选中Group组</strong>。</p><h2 id="4-5-目标选项配置"><a href="#4-5-目标选项配置" class="headerlink" title="4.5 目标选项配置"></a>4.5 目标选项配置</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/10.%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>Release目标相比Debug目标，一般会少输出一些调试信息，如上图，<strong>不输出Debug信息，浏览信息（Go to Definition）等</strong>。这样一来，编译速度至少快一倍。</p><p>同时，针对Debug，可能会在<strong>代码中</strong>添加一些自己的打印调试信息，通过<strong>预定义DEBUG</strong>来控制开启。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%B7%A5%E7%A8%8B/11.%E9%A2%84%E5%AE%9A%E4%B9%89DEBUG.png?raw=true"><br></table><p>目标选项配置的内容，想必大家再熟悉不过了，我们之前的一些常规配置就是目标选项配置，请参看：<br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">Keil系列教程05_工程目标选项配置（一）</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html">Keil系列教程06_工程目标选项配置（二）</a></p><p><strong>提示：</strong>这里面的选项配置是<strong>针对选中的目标</strong>。</p><p>以上四项内容就是针对目标，及目标下面组和文件的选项配置。写的比较粗略，但大部分内容都已经该教程05和06中写过，上面也引导大家查看相关内容。</p><p>不同应用环境，其修改的内容不同，结合实际应用修改相关配置即可。</p><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p>为方便大家学习，我这里提供可直接编译运行的源代码工程供大家下载。包含两个工程：Debug-Release和Diff-Version，下面分别有两个不同的目标。</p><p>百度网盘下载地址：<a href="https://pan.baidu.com/s/1iQiawcpVd8bvgyy0nQhLEQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1iQiawcpVd8bvgyy0nQhLEQ</a><br>密码：34hg</p><p>GitHub下载地址：<a href="https://github.com/EmbeddedDevelop/Keil-MDK-ARM_Multi-Target.git" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop/Keil-MDK-ARM_Multi-Target.git</a></p><p>（提示：下载链接后期可能会失效， 请关注微信公众号获取最新消息）</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;相信大家都看到过带有&lt;strong&gt;Debug和Release&lt;/strong&gt;两个不同目标的工程。&lt;/p&gt;
&lt;p&gt;比如：大家熟知的VC、IAR创建工程时，默认会有这么两个&lt;strong&gt;Debug和Release&lt;/strong&gt;“目标”。&lt;/p&gt;
&lt;p&gt;还比如：我们使用Keil打开STM32的IAP例程，会看见类似如下图（多目标）的工程：&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程12_map文件全面解析</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程12_map文件全面解析.html</id>
    <published>2018-12-07T09:00:00.000Z</published>
    <updated>2018-12-08T06:42:17.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p><strong>什么是map文件？</strong></p><p>简单的说：map文件是通过编译器编译之后，集程序、数据及IO空间的一种映射文件。</p><p>很多技术牛逼的工程师在遇到<strong>内存越界，或溢出的情况</strong>，首先想到的就是分析map文件。通过map文件可以知道函数大小，入口地址等一些重要信息。</p><p>我们在Keil中最常见的就是在编译之后，编译窗口会显示类似如下一段关于程序和数据大小的信息：<br><strong>Program Size: Code=1112 RO-data=320 RW-data=0 ZI-data=1632</strong></p><p>这一段提示信息其实是汇总了程序和数据的信息，这些信息其实是单个模块汇总而成，在map文件里有详细列表。</p><a id="more"></a><h1 id="二、关于Keil中的map文件"><a href="#二、关于Keil中的map文件" class="headerlink" title="二、关于Keil中的map文件"></a>二、关于Keil中的map文件</h1><h2 id="2-1-如何打开map文件"><a href="#2-1-如何打开map文件" class="headerlink" title="2.1 如何打开map文件"></a>2.1 如何打开map文件</h2><p>最直接，也是最简单的办法：<strong>双击工程目标，出现map文件</strong>（注意，双击的是工程目标，不要双击工程，或文件组）。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/1.%E5%8F%8C%E5%87%BB%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%EF%BC%8C%E5%87%BA%E7%8E%B0map%E6%96%87%E4%BB%B6.gif?raw=true"><br></table><p>当然，可以找到map文件位置（Listings文件夹），用编辑器工具打开。</p><h2 id="2-2-map文件输出内容配置"><a href="#2-2-map文件输出内容配置" class="headerlink" title="2.2 map文件输出内容配置"></a>2.2 map文件输出内容配置</h2><p>在之前文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">《Keil系列教程05_工程目标选项配置（一）》</a>中的Listing 列表章节有提到map文件。</p><p>map文件输出信息的配置位于：Project -&gt; Options for Target -&gt; Listing，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/2.map%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>主要包含配置：<br><strong>Memory Map：</strong>内存映射<br><strong>Callgraph：</strong>图像映射</p><p><strong>Symbols：</strong>符号<br><strong>Cross Reference：</strong>交叉引用</p><p><strong>Size Info：</strong>大小信息<br><strong>Totals Info：</strong>统计信息<br><strong>Unused Section Info：</strong>未调用模块信息<br><strong>Veneers Info：</strong>装饰信息</p><p>我们可根据自己情况，想要输出什么信息，勾选对应信息即可。</p><p><strong>提示：</strong><br>A.默认情况，输出所有信息；<br>B.这些配置是一个组合关系；</p><h2 id="2-3-map文件内容分类"><a href="#2-3-map文件内容分类" class="headerlink" title="2.3 map文件内容分类"></a>2.3 map文件内容分类</h2><p>从上面输出配置可以看得出来map文件大概包含了哪些信息。map文件将其分为如下五大类：<br><strong>1.Section Cross References：</strong>模块、段(入口)交叉引用</p><p><strong>2.Removing Unused input sections from the image：</strong>移除未调用模块</p><p><strong>3.Image Symbol Table：</strong>映射符号表</p><p><strong>4.Memory Map of the image：</strong>内存（映射）分布</p><p><strong>5.Image component sizes：</strong>存储组成大小</p><p>下面章节针对Keil DMK-ARM、 ARM Compiler 5组件生成的map文件五大类内容展开详细讲述。</p><h1 id="三、Section-Cross-References"><a href="#三、Section-Cross-References" class="headerlink" title="三、Section Cross References"></a>三、Section Cross References</h1><p><strong>Section Cross References：</strong>模块、段(入口)交叉引用<br>配置中需勾选：<strong>Cross Reference</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/3.Section%20Cross%20References.png?raw=true"><br></table><p><strong>Section Cross References：</strong>模块、段(入口)交叉引用，指的是各个源文件生成的模块、段（定义的入口）之间相互引用的关系。</p><p>比如：<br><strong>main.o(i.System_Initializes) refers to bsp.o(i.BSP_Initializes) for BSP_Initializes</strong></p><p>意思是：<br>main模块(main.o)中的System_Initializes函数(i.System_Initializes)，引用（或者说调用）了bsp模块(bsp.o)中的BSP_Initializes函数。</p><p><strong>提示：</strong><br><strong>A.</strong>main.o是main.c源文件生成的目标文件模块；<br><strong>B.</strong>I.System_Initializes是System_Initializes函数的入口。</p><h1 id="四、Removing-Unused-input-sections-from-the-image"><a href="#四、Removing-Unused-input-sections-from-the-image" class="headerlink" title="四、Removing Unused input sections from the image"></a>四、Removing Unused input sections from the image</h1><p><strong>Removing Unused input sections from the image：</strong>移除未调用模块<br>配置中需勾选：<strong>Unuaed Sections Info</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/4.Removing%20Unused%20input%20sections%20from%20the%20image.png?raw=true"><br></table><p>这一类很好理解，就是我们代码中，没有被调用的模块（或者说函数）会在map文件中生成一个列表。</p><p>比如：<br><strong>Removing stm32f10x_gpio.o(i.GPIO_AFIODeInit), (20 bytes).</strong></p><p>意思是：<br>stm32f10x_gpio.c文件中GPIO_AFIODeInit模块（函数）未被调用，其代码大小20字节。</p><p>最后还有一个统计信息：<br><strong>52 unused section(s) (total 2356 bytes) removed from the image.</strong></p><p>1.总共有52段没有被调用；<br>2.没有被调用的大小为2356 字节；</p><h1 id="五、Image-Symbol-Table"><a href="#五、Image-Symbol-Table" class="headerlink" title="五、Image Symbol Table"></a>五、Image Symbol Table</h1><p><strong>Image Symbol Table：</strong>映射符号表<br>配置中需勾选：<strong>Symbols</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/5.Image%20Symbol%20Table.png?raw=true"><br></table><p>Image Symbol Table：映射符号表，也就是各个段所存储对应地址的表（图片删除了中间部分内容）。</p><h2 id="5-1-Symbol分为两大类"><a href="#5-1-Symbol分为两大类" class="headerlink" title="5.1 Symbol分为两大类"></a>5.1 Symbol分为两大类</h2><p><strong>1.Local Symbols：</strong>局部<br><strong>2.Global Symbols：</strong>全局</p><h2 id="5-2-Symbol内容要点"><a href="#5-2-Symbol内容要点" class="headerlink" title="5.2 Symbol内容要点"></a>5.2 Symbol内容要点</h2><p><strong>1.Symbol Name：符号名称</strong><br>名称命名及分类请看最后给出的官方参考文档。</p><p><strong>2.Value：存储对应的地址</strong><br>大家会发现有0x0800xxxx、0x2000xxxx这样的地址。<br>0x0800xxxx指存储在FLASH里面的代码、变量等。<br>0x2000xxxx指存储在内存RAM中的变量Data等。</p><p><strong>3.Ov Type：符号对应的类型</strong><br>符号类型大概有几种：Number、Section、Thumb Code、Data等；<br>细心的朋友会发现：全局、静态变量等位于0x2000xxxx的内存RAM中。</p><p><strong>4.Size：存储大小</strong><br>这个容易理解，就是当前行Symbol占用大小。</p><p><strong>5.Object(Section)：段目标</strong><br>这里一般指所在模块（源文件）。</p><h1 id="六、Memory-Map-of-the-image"><a href="#六、Memory-Map-of-the-image" class="headerlink" title="六、Memory Map of the image"></a>六、Memory Map of the image</h1><p><strong>Memory Map of the image：</strong>内存（映射）分布<br>配置中需勾选：<strong>Memory Map</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/6.Memory%20Map%20of%20the%20image.png?raw=true"><br></table><p><strong>Memory Map of the image：</strong>内存（映射）分布，内容相对较多，比较重要的一项。</p><h2 id="6-1-主要介绍"><a href="#6-1-主要介绍" class="headerlink" title="6.1 主要介绍"></a>6.1 主要介绍</h2><p><strong>Image Entry point : 0x08000131：</strong>指映射入口地址。</p><p><strong>Load Region LR_IROM1 (Base: 0x08000000, Size: 0x00000598, Max: 0x00080000, ABSOLUTE):</strong><br>指加载区域位于LR_IROM1开始地址0x08000000，大小有0x00000598，这块区域最大为0x00080000.</p><p><strong>执行区域：</strong><br>A.Execution Region ER_IROM1<br>B.Execution Region RW_IRAM1<br>这个区域，其实就是对应我们目标配置中的区域，如下如：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/7.%E6%89%A7%E8%A1%8C%E5%8C%BA%E5%9F%9F.png?raw=true"><br></table><h2 id="6-2-内容要点"><a href="#6-2-内容要点" class="headerlink" title="6.2 内容要点"></a>6.2 内容要点</h2><p><strong>1.Base Addr：存储地址</strong><br>0x0800xxxxFLASH地址和0x2000xxxx内存RAM地址。</p><p><strong>2.Size：存储大小</strong></p><p><strong>3.Type：类型</strong><br>Data：数据类型<br>Code：代码类型<br>Zero：未初始化变量类型<br>PAD：这个类型在map文件中放在这个位置，其实它不能算这里的类型。要翻译的话，只能说的“补充类型”。</p><p>ARM处理器是32位的，如果定义一个8位或者16位变量就会剩余一部分，这里就是指的“补充”的那部分，会发现后面的其他几个选项都没有对应的值。</p><p><strong>4.Attr：属性</strong><br>RO：存储与ROM中的段<br>RW：存储与RAM中的段</p><p><strong>5.Section Name：段名</strong><br>这里也可以说为入口分类名，与第一章节“Section Cross References”指的模块、段一样。<br>大概包含：RESET、.ARM、 .text、 i、 .data、 .bss、 HEAP、 STACK等。</p><p><strong>6.Object：目标</strong></p><h1 id="七、Image-component-sizes"><a href="#七、Image-component-sizes" class="headerlink" title="七、Image component sizes"></a>七、Image component sizes</h1><p><strong>Image component sizes：</strong>存储组成大小<br>配置中需勾选：<strong>Size Info</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/8.Image%20component%20sizes.png?raw=true"><br></table><p><strong>Image component sizes：</strong>存储组成大小，其实主要就是对模块进行汇总存储大小信息。</p><p>这一章节内容相信大家都能理解，我们编译工程后，在编译窗口一般会看到类似如下一段信息：<br><strong>Program Size: Code=1112 RO-data=320 RW-data=0 ZI-data=1632</strong></p><p><strong>Code：</strong>指代码的大小；<br><strong>Ro-data：</strong>指除了内联数据(inline data)之外的常量数据；<br><strong>RW-data：</strong>指可读写（RW）、已初始化的变量数据；<br><strong>ZI-data：</strong>指未初始化（ZI）的变量数据；</p><p><strong>提醒：</strong><br><strong>A.Code、Ro-data：</strong>位于FLASH中；<br><strong>B.RW-data、ZI-data：</strong>位于RAM中；<br><strong>C.RW-data</strong>已初始化的数据会存储在Flash中，上电会从FLASH搬移至RAM。</p><p>关系如下：<br>RO  Size = Code + RO Data<br>RW  Size = RW Data + ZI Data<br>ROM Size = Code + RO Data + RW Data</p><p>可以参看我公众号之前分享的一篇文章<a href="https://mp.weixin.qq.com/s/Ey9ZqHt05sXdwescFl2vZA" target="_blank" rel="noopener">《Keil编译大小及存储说明》</a></p><p>上面map信息是比较全面的汇总，如果不想看那些模块的详细，只看汇总统计的信息，可以在配置中只勾选“Totals Info”，对比信息：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_map%E6%96%87%E4%BB%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/9.%E5%8F%AA%E7%9C%8B%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF.png?raw=true"><br></table><p><strong>最后提示：</strong><br>本文内容请参看Keil自带的一篇PDF文章<strong>《ARM® Compiler v5.06 for µVision® armlink User Guide》。</strong></p><h1 id="八、说明"><a href="#八、说明" class="headerlink" title="八、说明"></a>八、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="九、最后"><a href="#九、最后" class="headerlink" title="九、最后"></a>九、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;什么是map文件？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单的说：map文件是通过编译器编译之后，集程序、数据及IO空间的一种映射文件。&lt;/p&gt;
&lt;p&gt;很多技术牛逼的工程师在遇到&lt;strong&gt;内存越界，或溢出的情况&lt;/strong&gt;，首先想到的就是分析map文件。通过map文件可以知道函数大小，入口地址等一些重要信息。&lt;/p&gt;
&lt;p&gt;我们在Keil中最常见的就是在编译之后，编译窗口会显示类似如下一段关于程序和数据大小的信息：&lt;br&gt;&lt;strong&gt;Program Size: Code=1112 RO-data=320 RW-data=0 ZI-data=1632&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一段提示信息其实是汇总了程序和数据的信息，这些信息其实是单个模块汇总而成，在map文件里有详细列表。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程11_工程窗口图标说明</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程11_工程窗口图标说明.html</id>
    <published>2018-11-30T09:00:00.000Z</published>
    <updated>2018-11-30T09:59:55.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>很多朋友看到如下工程窗口的图标（如：带有<strong>“叹号”、“星号”、“钥匙”、“禁止驶入”</strong>标志），就会产生疑问：这些图标到底是啥意思呢？</p><a id="more"></a><table><br><img align="center" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/1.%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%90%84%E7%A7%8D%E5%9B%BE%E6%A0%87.png?raw=true"><br></table><p>其实，这些不同标志的图标是代表着不同的含义，目前Keil工程窗口中的图标大约有二十种。</p><p>许多初学的朋友看到这些异样的图标就会产生疑惑，下面章节我就详细讲述一下这些图标的含义。</p><h1 id="二、图标介绍"><a href="#二、图标介绍" class="headerlink" title="二、图标介绍"></a>二、图标介绍</h1><p>Keil工程窗口中的图标大约有二十种，但这二十种图标可以分为四大类：</p><p><strong>1.Project：</strong>工程图标</p><p><strong>2.Group：</strong>文件夹（组）图标</p><p><strong>3.File：</strong>文件图标</p><p><strong>4.SWC（Software Components）：</strong>软件组件图标</p><p>在这四大类图标的基础上，修改其属性，就会出现<strong>特殊标记</strong>的图标。比如开篇说的带有<strong>“叹号”、“星号”、“钥匙”</strong>标志的图标。</p><h1 id="三、四大类图标"><a href="#三、四大类图标" class="headerlink" title="三、四大类图标"></a>三、四大类图标</h1><p>下面我就先讲述四大类图标含义，再在四大类基础上讲述这些特殊标记图标的含义。</p><h2 id="3-1-Project工程图标"><a href="#3-1-Project工程图标" class="headerlink" title="3.1 Project工程图标"></a>3.1 Project工程图标</h2><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/2.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E5%9B%BE%E6%A0%87.png?raw=true"><strong>多工程图标：</strong>Multi-Project 即工作空间图标。<br></table><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/3.%E5%B7%A5%E7%A8%8B%E5%9B%BE%E6%A0%87.png?raw=true"><strong>工程图标：</strong>Projcet工程标识图标。<br></table><p>见图知义，一个工作空间包含多个工程（带有“+”展开的意思），一个工程可以包文件夹（组）。</p><h2 id="3-2-Group组（文件夹）图标"><a href="#3-2-Group组（文件夹）图标" class="headerlink" title="3.2 Group组（文件夹）图标"></a>3.2 Group组（文件夹）图标</h2><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/4.%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%88%E6%9C%AA%E5%B1%95%E5%BC%80%EF%BC%89%E5%9B%BE%E6%A0%87.png?raw=true"><strong>未展开组图标：</strong>也就是不能看见该组下面文件，请结合工程窗口理解。<br></table><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/5.%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%88%E5%B7%B2%E5%B1%95%E5%BC%80%EF%BC%89%E5%9B%BE%E6%A0%87.png?raw=true"><strong>已展开组图标：</strong>和未展开组图标对应。<br></table><h2 id="3-3-File文件图标"><a href="#3-3-File文件图标" class="headerlink" title="3.3 File文件图标"></a>3.3 File文件图标</h2><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/6.%E7%AC%AC%E4%B8%80%E7%B1%BB%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>第一类文件图标：</strong>包含Header file, image file, or documentation file，即头文件，镜像文件，或文档文件图标。<br></table><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/7.%E7%AC%AC%E4%BA%8C%E7%B1%BB%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>第二类文件图标：</strong>一般指C/C++，汇编，库这类源代码文件图标。<br></table><h2 id="3-4-SWC软件组件图标"><a href="#3-4-SWC软件组件图标" class="headerlink" title="3.4 SWC软件组件图标"></a>3.4 SWC软件组件图标</h2><p>这类图标主要针对软件组件的一些图标，比如：针对工程选择MCU是否有对应的软件支持包、工程的运行环境、系统等组件。</p><p>下面让大家看一下这类图标的大概含义（来自Keil帮助文件内容）：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/8.SWC%E8%BD%AF%E4%BB%B6%E7%BB%84%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><br></table><h1 id="四、特殊标记图标"><a href="#四、特殊标记图标" class="headerlink" title="四、特殊标记图标"></a>四、特殊标记图标</h1><p>上章节只是<strong>概述了工程窗口四大类图标的含义</strong>，其实本文重点在于这一章节的“特殊标记图标”。</p><p>这些特殊标记主要是针对组（文件夹）和文件，<strong>如果修改了文件夹、文件属性，删除了文件等操作，就会出现一些特殊标记的图标</strong>。</p><p><font face="黑体" color="green" size="4"><strong>1.只读文件图标</strong></font></p><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/9.%E5%8F%AA%E8%AF%BB%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>带有“钥匙”标记的图标：</strong>该文件为只读（上锁）文件。如果为源代码文件，则该文件源代码不能被修改。<br></table><table><br><img align="center" width="350" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/10.%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7.png?raw=true"><br></table><p><font face="黑体" color="green" size="4"><strong>2.未发现文件图标</strong></font></p><table><br><img align="left" width="35" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/11.%E6%9C%AA%E5%8F%91%E7%8E%B0%E6%96%87%E4%BB%B6%E5%9B%BE%E6%A0%87.png?raw=true"><strong>带有“叹号”标记的图标：</strong>带有该标记图标的文件，说明未被发现，一般被删除，或转移了。比如文章开篇图片中的“common.c”这个文件就未被工程发现。<br></table><p><font face="黑体" color="green" size="4"><strong>3.与工程选项配置不同图标</strong></font></p><table><br><img align="left" width="100" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/12.%E5%B1%9E%E6%80%A7%E4%B8%8D%E4%B8%80%E8%87%B4.png?raw=true"><strong>带有“星号”标记的图标：</strong>你会发现这有3个带“星号”的图标，其实这是针对文件夹（组），或文件的图标。<br></table><p>这个图标相对来说难理解一点，简单来说就是<strong>改变了文件夹（组），或文件的配置</strong>。</p><p>也可以理解为文件夹（组），或文件与工程目标选项配置不一样。</p><p><strong>A.针对文件夹：</strong>选中文件夹 -&gt; 右键 -&gt; Options for Group -&gt; 进入修改选项。</p><p><strong>B.针对文件：</strong>选中文件 -&gt; 右键 -&gt; Options for File-&gt; 进入修改选项。</p><table><br><img align="center" width="350" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/13.%E9%80%89%E4%B8%AD%E6%96%87%E4%BB%B6%20%E5%8F%B3%E9%94%AE.png?raw=true"><br></table><table><br><img align="center" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/14.%E4%BF%AE%E6%94%B9%E5%B1%9E%E6%80%A7.png?raw=true"><br></table><p>你进入修改其中某一项，点击“OK”，你会发现该文件就会出现带有“星号”的图标。</p><p>上面截图是针对文件，文件夹（组）类似原理，修改之后，文件夹同样会带有“星号”的图标。</p><p><font face="黑体" color="green" size="4"><strong>4.不编译选项图标</strong></font></p><table><br><img align="left" width="70" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/15.%E4%B8%8D%E7%BC%96%E8%AF%91%E9%A1%B9%E5%9B%BE%E6%A0%87.png?raw=true"><strong>带有“禁止驶入”标记的图标：</strong>顾名思义，指工程不包含该源文件，也就是不进行编译，链接等处理。<br></table><p>同样道理，这是针对文件夹（组），或文件的图标。</p><p>其实上面“与工程选项配置不同”包含了该选项内容，不勾选“Include in Target Build”，或“Always Build”，即不包含，不编译该选项，则OK之后，图标会出现带有“禁止驶入”的标记。</p><table><br><img align="center" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%9B%BE%E6%A0%87%E8%AF%B4%E6%98%8E/16.%E4%BF%AE%E6%94%B9%E9%80%89%E5%9E%8B%EF%BC%8C%E4%B8%8D%E7%BC%96%E8%AF%91%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>这几个“特殊标记”的图标是<strong>Keil中常见，也是比较重要的图标</strong>，希望大家都明白其中含义。</p><p>本文内容可以参看Keil帮助文档中<strong>“Project window icons”</strong>的内容。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;很多朋友看到如下工程窗口的图标（如：带有&lt;strong&gt;“叹号”、“星号”、“钥匙”、“禁止驶入”&lt;/strong&gt;标志），就会产生疑问：这些图标到底是啥意思呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程10_文件类型及相关描述</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程10_文件类型及相关描述.html</id>
    <published>2018-11-29T08:00:00.000Z</published>
    <updated>2018-11-29T09:04:36.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>1.你在提交项目、打包保存项目时，你会<strong>删掉不必要的文件</strong>吗？<br>2.你知道这些<strong>uvoptx、uvprojx、map、dep……</strong>是什么文件吗？</p><a id="more"></a><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0/1.Keil%E7%BC%96%E8%AF%91%E4%B8%AD%E9%97%B4%E6%96%87%E4%BB%B6.png?raw=true"><br></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">现象or疑问：</span><br><span class="line">1.购买一块开发板，厂家提供的源代码例程没有几个，但文件却有几百兆。</span><br><span class="line">2.百度网盘下载一个别人提供的代码压缩包，几十兆。</span><br><span class="line">3.打开别人下载的源代码工程，各种类型文件混杂在一起。</span><br><span class="line">4.有些人提供的源代码没有dep文件，这个文件可以删除吗？ 删除了会有什么影响？</span><br></pre></td></tr></table></figure><p>其实有许多文件都是<strong>编译产生的中间文件</strong>，我习惯放一个双击删除“编译产生文件”.bat”来管理工程。即每次需要保存，或提交工程，会双击该文件，删除不需要的中间文件。</p><p>当你看完本文，理解这些文件类型的含义，你就不会有上面这些烦恼了。（本文内容可参考Keil帮助文档“File Types”文件类型章节）</p><h1 id="二、Keil文件类型概述"><a href="#二、Keil文件类型概述" class="headerlink" title="二、Keil文件类型概述"></a>二、Keil文件类型概述</h1><p>Keil中用到的文件类型很多，大概有五、六十种。下面会重点讲述常用的文件类型，一些不重要的，或者不常见的只简单概述。</p><p><strong>Keil文件可以分为7类：</strong><br>1、Project Files工程类型文件；<br>2、Source Files源代码类型文件；<br>3、Listing Files链接类型文件；<br>4、Object and HEX Files目标和Hex类型文件；<br>5、Build Files编译类型文件；<br>6、Debugger Files调试类型文件；<br>7、Other Files其他类型文件；</p><h1 id="三、Project-Files工程类型文件"><a href="#三、Project-Files工程类型文件" class="headerlink" title="三、Project Files工程类型文件"></a>三、Project Files工程类型文件</h1><p>工程类型文件是比较重要的，特别是<strong>工作空间、 工程文件、工程选项配置</strong>这三种文件不能删除。项目界面布局文件可以删除。</p><h2 id="3-1-工作空间文件"><a href="#3-1-工作空间文件" class="headerlink" title="3.1 工作空间文件"></a>3.1 工作空间文件</h2><p>（这类文件不能删除）<br><strong>*.uvmpw：</strong>µVision Project file for Multiple Projects多工程文件，也就是我们说的工作空间文件。</p><h2 id="3-2-工程文件"><a href="#3-2-工程文件" class="headerlink" title="3.2 工程文件"></a>3.2 工程文件</h2><p>（这类文件不能删除）<br><strong>*.uvprojx：</strong>µVision5工程文件</p><p><strong>*.uvproj：</strong>µVision4工程文件</p><p><strong>*.uv2：</strong>µVision3工程文件</p><h2 id="3-3-工程选项配置文件"><a href="#3-3-工程选项配置文件" class="headerlink" title="3.3 工程选项配置文件"></a>3.3 工程选项配置文件</h2><p>（这类文件不能删除）<br><strong>*.uvoptx：</strong>µVision5工程选项配置文件</p><p><strong>*.uvopt：</strong>µVision4工程选项配置文件</p><h2 id="3-4-项目界面布局文件"><a href="#3-4-项目界面布局文件" class="headerlink" title="3.4 项目界面布局文件"></a>3.4 项目界面布局文件</h2><p>（这类文件可以删除）<br><strong>*.uvguix[.user-name]：</strong>µVision5项目界面布局文件。删除之后，重新打开工程，界面布局会恢复到默认布局。如Demo.uvguix.Administrator。</p><p><strong>*.uvguix[.user-name]：</strong>µVision4项目界面布局文件。</p><h1 id="四、Source-Files源代码类型文件"><a href="#四、Source-Files源代码类型文件" class="headerlink" title="四、Source Files源代码类型文件"></a>四、Source Files源代码类型文件</h1><p>这一类文件相信大家都熟悉，简述一下。</p><p><strong>*.c：</strong>C源文件</p><p><strong>*.h：</strong>C头文件</p><p><strong>*.cpp：</strong>C++源文件</p><p><strong>*.s：</strong>汇编源文件</p><p><strong>*.a51：</strong>汇编源文件</p><p><strong>*.a66：</strong>汇编源文件</p><p><strong>*.inc：</strong>汇编头文件</p><p><strong>*.src：</strong>C编译器生成的其他源文件</p><h1 id="五、Listing-Files链接类型文件"><a href="#五、Listing-Files链接类型文件" class="headerlink" title="五、Listing Files链接类型文件"></a>五、Listing Files链接类型文件</h1><p>这一类文件属于中间文件，一般在编译过程中产生。可以在工程目标选项中配置对应的链接文件。Project -&gt; Options for Target -&gt; Listing，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0/2.Listing%20Files%E9%93%BE%E6%8E%A5%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>*.map：</strong>存储镜像文件<br>这个文件比较重要，我会在后面专门讲述一篇map相关文章。</p><p><strong>*.i：</strong>C预处理器输出文件</p><p><strong>*.scr：</strong>链接器分散加载器文件</p><p><strong>*.lst：</strong>C编译器或汇编器生成的文件</p><p><strong>*.m51：</strong>同样也是map文件</p><p><strong>*.m66：</strong>同样也是map文件</p><p><strong>*.htm：</strong>链接器的列表文件</p><h1 id="六、Object-and-HEX-Files目标和Hex类型文件"><a href="#六、Object-and-HEX-Files目标和Hex类型文件" class="headerlink" title="六、Object and HEX Files目标和Hex类型文件"></a>六、Object and HEX Files目标和Hex类型文件</h1><p>这一类文件同样属于中间文件，一般在编译过程中产生。但这类文件比较重要，<strong>调试信息、预览信息、可执行文件</strong>等都在这里面。</p><p>Project -&gt; Options for Target -&gt; Output，如图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%8F%E8%BF%B0/3.Listing%20Files%E9%93%BE%E6%8E%A5%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>*.hex：</strong>可执行文件</p><p><strong>*.axf：</strong>包含调试信息的程序文件<br>有时候我们调试出错，可能是axf没有文件。</p><p><strong>*.d：</strong>编译生成的依赖文件<br>一般一个.c文件对应一个.d文件。</p><p><strong>*.o：</strong>也是目标的依赖文件<br>重定位定址的依赖文件。</p><p><strong>*.lib：</strong>库文件<br>生成的库就在这里。</p><p><strong>*.elf：</strong>ELF/DWARF链接的文件</p><p><strong>*.crf：</strong>浏览信息文件<br>使用Go to Definition Of 功能，就需要有这类文件。</p><h1 id="七、Build-Debugger编译调试文件"><a href="#七、Build-Debugger编译调试文件" class="headerlink" title="七、Build Debugger编译调试文件"></a>七、Build Debugger编译调试文件</h1><p>编译和调试，其实是两类不同文件，由于比较少，综合在一起写。</p><p><strong>*.bat：</strong>批处理文件</p><p><strong><em>._IA, </em>.__I, <em>._II, </em>.SCR：</strong>工具调用文件</p><p><strong>*.ini：</strong>于初始化源码文件</p><h1 id="八、Other-Files其他类型文件"><a href="#八、Other-Files其他类型文件" class="headerlink" title="八、Other Files其他类型文件"></a>八、Other Files其他类型文件</h1><p>这类文件比较多，但使用较少，简单列几个吧。</p><p><strong>*.pack：</strong>软件（支持）包文件</p><p><strong>*.sct：</strong>链接控制文件</p><p><strong>*.lnp：</strong>连接器传递命令文件</p><p><strong>*.dep：</strong>目标编译依赖文件</p><p><strong>*.cdb：</strong>µVision设备数据库文件</p><h1 id="九、说明"><a href="#九、说明" class="headerlink" title="九、说明"></a>九、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="十、最后"><a href="#十、最后" class="headerlink" title="十、最后"></a>十、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;1.你在提交项目、打包保存项目时，你会&lt;strong&gt;删掉不必要的文件&lt;/strong&gt;吗？&lt;br&gt;2.你知道这些&lt;strong&gt;uvoptx、uvprojx、map、dep……&lt;/strong&gt;是什么文件吗？&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程09_调试仿真</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程09_调试仿真.html</id>
    <published>2018-11-29T02:00:00.000Z</published>
    <updated>2019-01-15T07:55:37.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>调试对于程序员来说是一个比较重要的环节，因此就很有必要掌握Keil的这些调试功能。</p><p>点击Debug调试按钮，进入调试状态，就会出现如下图<strong>Debug Toolbar调试工具栏</strong>。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/1.%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true"><br></table><p>我们调试需要用到的按钮包含上图框出来的这些按钮，但常用的按钮就是调试工具栏前八个：<strong>复位、全速运行、停止运行、单步运行、逐步运行、跳出运行、运行到光标行、跳转到暂停行</strong>。</p><a id="more"></a><h1 id="二、相关描述"><a href="#二、相关描述" class="headerlink" title="二、相关描述"></a>二、相关描述</h1><p>这些工具栏按钮的主要含义可以参看<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《Keil系列教程03_主窗口和工具栏详细说明》</a>。</p><p>调试工具栏按钮位于<strong>菜单Debug</strong>中，同时调试视图窗口位于<strong>菜单View</strong>。可以参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">《Keil系列教程04_菜单概述》</a>。</p><p>同样，这些调试工具栏按钮可通过快捷键实现，有些默认没有快捷键，可以通过Configuration添加快捷键。请参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89.html">《Keil系列教程08_Configuration（二）》</a>Shortcut Keys 快捷键章节内容。</p><p>下面带领大家掌握那八个调试按钮、四个断点按钮，以及部分调试视图窗口的内容。</p><h1 id="三、八个调试按钮"><a href="#三、八个调试按钮" class="headerlink" title="三、八个调试按钮"></a>三、八个调试按钮</h1><p>保证代码编译无误，点击<strong>“启动/停止调试”</strong>按钮（如下图），或快捷键Ctrl + F5，进入调试模式。此时就会出现如文中开头的调试工具栏。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/2.%E8%BF%9B%E5%85%A5%E8%B0%83%E8%AF%95%E7%8A%B6%E6%80%81.png?raw=true"><br></table><h2 id="3-1-Reset复位"><a href="#3-1-Reset复位" class="headerlink" title="3.1 Reset复位"></a>3.1 Reset复位</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/3.Reset%E5%A4%8D%E4%BD%8D.png?raw=true"><br></table><p><strong>Reset复位，</strong>让程序复位到起点，恢复到初始状态。</p><h2 id="3-2-Run全速运行"><a href="#3-2-Run全速运行" class="headerlink" title="3.2 Run全速运行"></a>3.2 Run全速运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/4.Run%E5%85%A8%E9%80%9F%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Run全速运行（F5），</strong>让程序处于运行状态。此按钮在程序停止运行时有效。</p><h2 id="3-3-Stop停止运行"><a href="#3-3-Stop停止运行" class="headerlink" title="3.3 Stop停止运行"></a>3.3 Stop停止运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/5.Stop%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Stop停止运行，</strong>让正在运行的程序停止下来。此按钮在程序运行时有效。</p><h2 id="3-4-Step单步运行"><a href="#3-4-Step单步运行" class="headerlink" title="3.4 Step单步运行"></a>3.4 Step单步运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/6.Step%E5%8D%95%E6%AD%A5%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Step单步运行（F11），</strong>每点一次按钮，程序运行一步（单步），遇到函数会跳进函数执行（箭头进入括号）。此按钮在程序停止运行时有效。</p><h2 id="3-5-Step-Over逐步运行"><a href="#3-5-Step-Over逐步运行" class="headerlink" title="3.5 Step Over逐步运行"></a>3.5 Step Over逐步运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/7.Step%20Over%E9%80%90%E6%AD%A5%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Step Over逐步运行（F10），</strong>每点一次按钮，程序运行一行（单行），遇到函数跳过函数执行（箭头跳过括号）。此按钮在程序停止运行时有效。</p><h2 id="3-6-Step-Out跳出运行"><a href="#3-6-Step-Out跳出运行" class="headerlink" title="3.6 Step Out跳出运行"></a>3.6 Step Out跳出运行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/8.Step%20Out%E8%B7%B3%E5%87%BA%E8%BF%90%E8%A1%8C.png?raw=true"><br></table><p><strong>Step Out跳出运行（Ctrl + F11），</strong>每点一次按钮，程序跳出当前函数执行（箭头跳出括号），直到跳出最外面的函数（main函数）。此按钮在程序停止运行时有效。</p><h2 id="3-7-Run-to-Cursor-Line运行到光标行"><a href="#3-7-Run-to-Cursor-Line运行到光标行" class="headerlink" title="3.7 Run to Cursor Line运行到光标行"></a>3.7 Run to Cursor Line运行到光标行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/9.Run%20to%20Cursor%20Line%E8%BF%90%E8%A1%8C%E5%88%B0%E5%85%89%E6%A0%87%E8%A1%8C.png?raw=true"><br></table><p><strong>Run to Cursor Line运行到光标行（Ctrl + F10），</strong>将光标放在某一行，点击该按钮，程序全速运行，直到运行到光标的位置停止下来。（前提是程序能运行到光标所在行）。</p><h2 id="3-8-Show-Next-Statement跳转到暂停行"><a href="#3-8-Show-Next-Statement跳转到暂停行" class="headerlink" title="3.8 Show Next Statement跳转到暂停行"></a>3.8 Show Next Statement跳转到暂停行</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/10.Show%20Next%20Statement%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%9A%82%E5%81%9C%E8%A1%8C.png?raw=true"><br></table><p><strong>Show Next Statement跳转到暂停行，</strong>点击该按钮，跳转到程序暂停（停止）所在行。主要用我们打开多个文件，不知道程序暂停在哪里。此按钮在程序停止运行时有效。</p><h1 id="四、四个断点按钮"><a href="#四、四个断点按钮" class="headerlink" title="四、四个断点按钮"></a>四、四个断点按钮</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/11.%E5%9B%9B%E4%B8%AA%E6%96%AD%E7%82%B9%E6%8C%89%E9%92%AE.png?raw=true"><br></table><p>调试时，这四个按钮也常用，从左到右依次是：<strong>插入/移除断点、 使能/失能断点、 失能所有断点、 取消所有断点</strong>。</p><h2 id="4-1-插入-移除断点"><a href="#4-1-插入-移除断点" class="headerlink" title="4.1 插入/移除断点"></a>4.1 插入/移除断点</h2><p><strong>Insert/Remove Breakpoint插入/移除断点（F9），</strong>点击一下按钮，在光标所在行插入一个断点，再点击一次，则移除断点。</p><p>该按钮操作等于用鼠标在代码所在行前面点击一次，注意<strong>只有在灰色所在行才有效</strong>（也就是程序能执行的地方），如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/12.%E6%8F%92%E5%85%A5%E3%80%81%E7%A7%BB%E9%99%A4%E6%96%AD%E7%82%B9.png?raw=true"><br></table><h2 id="4-2-使能-失能断点"><a href="#4-2-使能-失能断点" class="headerlink" title="4.2 使能/失能断点"></a>4.2 使能/失能断点</h2><p><strong>Enable/Disable Breakpoint使能/失能断点（Ctrl + F9），</strong>在有断点基础上，点击一下按钮，失能该断点，再点击一次，则使能该断点。</p><p>失能断点就是保留该断点，但该断点无效（程序执行到该处不停止）。</p><h2 id="4-3-失能所有断点"><a href="#4-3-失能所有断点" class="headerlink" title="4.3 失能所有断点"></a>4.3 失能所有断点</h2><p><strong>Disable All Breakpoints失能所有断点，</strong>保留所有断点，但都无效（和上面一个道理），但这里不能再次使能所有断点。</p><h2 id="4-4-取消所有断点"><a href="#4-4-取消所有断点" class="headerlink" title="4.4 取消所有断点"></a>4.4 取消所有断点</h2><p><strong>Kill All Breakpoints取消所有断点（Ctrl + Shift + F9），</strong>和上面失能不一样，这里是不保留断点，即取消工程所有断点，也叫杀掉所有断点。</p><h1 id="五、调试视图窗口"><a href="#五、调试视图窗口" class="headerlink" title="五、调试视图窗口"></a>五、调试视图窗口</h1><p>调试视图窗口只有进入调试模式时才会出现，其窗口名称详情可参看文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">《Keil系列教程04_菜单概述》</a>中View菜单章节。</p><p>这里讲述几个在调试时常用的视图窗口。</p><h2 id="5-1-Watch窗口"><a href="#5-1-Watch窗口" class="headerlink" title="5.1 Watch窗口"></a>5.1 Watch窗口</h2><p><strong>Watch查看变量的窗口，有Watch1和Watch2两个窗口，</strong>都一样，方便用户多个窗口同时查看。</p><p>查看这些调试视图窗口可以通过菜单，或点击工具栏按钮打开。</p><p>选中变量 -&gt; 右键 -&gt; Add ‘xxx’ to -&gt;Watch1，此时自动会弹出Watch1窗口：</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/13.Watch%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><h2 id="5-2-System-Viewer窗口"><a href="#5-2-System-Viewer窗口" class="headerlink" title="5.2 System Viewer窗口"></a>5.2 System Viewer窗口</h2><p><strong>System Viewer系统（外围IO、USART、TIM等）窗口，</strong>可以理解查看外设寄存器的窗口，如下图，查看USART寄存器值的窗口。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/14.System%20Viewer%E7%B3%BB%E7%BB%9F%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><p>这些调试视图窗口只针对于调试时，方便大家查看一些调试信息，掌握这些内容会提高你的调试效率，以及更精确定位Bug。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;调试对于程序员来说是一个比较重要的环节，因此就很有必要掌握Keil的这些调试功能。&lt;/p&gt;
&lt;p&gt;点击Debug调试按钮，进入调试状态，就会出现如下图&lt;strong&gt;Debug Toolbar调试工具栏&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;800&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_%E8%B0%83%E8%AF%95%E4%BB%BF%E7%9C%9F/1.%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;我们调试需要用到的按钮包含上图框出来的这些按钮，但常用的按钮就是调试工具栏前八个：&lt;strong&gt;复位、全速运行、停止运行、单步运行、逐步运行、跳出运行、运行到光标行、跳转到暂停行&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程08_Configuration（二）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程08_Configuration（二）.html</id>
    <published>2018-11-22T09:00:00.000Z</published>
    <updated>2018-11-22T09:36:47.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文接着上一篇文章《Keil系列教程07_Configuration（一）》讲述的工程目标选项的后三项配置：Shortcut Keys快捷键、Text Completion代码完形、Other其他。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/1.Configuration%E5%90%8E%E4%B8%89%E9%A1%B9.png?raw=true"><br></table><p>这后面三部分内容在该系列教程其它也会牵涉，也是一些常用、重要的配置选项，下面讲述过程中会介绍相关内容。</p><a id="more"></a><h1 id="二、Shortcut-Keys快捷键"><a href="#二、Shortcut-Keys快捷键" class="headerlink" title="二、Shortcut Keys快捷键"></a>二、Shortcut Keys快捷键</h1><p>Configuration中Shortcut Keys主要作用：<strong>查看、添加、修改、删除快捷键</strong>。而这些快捷键主要就是针对各项菜单的内容（命令）。</p><p>在默认情况下，不是所有菜单都有快捷键，可以自行添加、修改，或删除。左边列表中的Command（菜单命令）属于系统，用户不能增加、删除和修改。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/2.Shortcut%20Keys%E5%BF%AB%E6%8D%B7%E9%94%AE.png?raw=true"><br></table><h2 id="2-1-创建快捷键"><a href="#2-1-创建快捷键" class="headerlink" title="2.1 创建快捷键"></a>2.1 创建快捷键</h2><p>快捷键可以增加（创建）、删除（移除）和修改。我们这里简单举例说明一下创建快捷键。</p><p>比如：增加（创建）File Colse 关闭文件快捷键为Ctrl+W。<br>点击“Create Shortcut” -&gt; 键盘按住“Ctrl + W” -&gt; 点击“OK”。</p><table><br><strong>增加（创建）</strong>快捷键动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/3.%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE.gif?raw=true"><br></table><h2 id="2-2-常用快捷键"><a href="#2-2-常用快捷键" class="headerlink" title="2.2 常用快捷键"></a>2.2 常用快捷键</h2><p>Keil默认的所有快捷键在列表中都能查找到，这里为了方便大家，也让大家回顾一下，列出常用的快捷键。</p><p>在该系列教程前面文章就讲述了快捷键的相关内容，请参看：<br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《Keil系列教程03_主窗口和工具栏详细说明》</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">《Keil系列教程04_菜单概述》</a></p><p>按照菜单列表顺序：<br><strong>1.File类</strong><br>Ctrl + N ：新建文件<br>Ctrl + O ：打开文件<br>Ctrl + S ：保存文件</p><p><strong>2.Edit类</strong><br>Ctrl + Z ：撤销编辑<br>Ctrl + Y ：恢复编辑<br>Ctrl + X ：剪切<br>Ctrl + C ：复制<br>Ctrl + V ：粘贴<br>Ctrl + - ：跳转到上一步<br>Ctrl + Shift + - ：跳转到下一步<br>Ctrl + F2 ：添加书签<br>F2 ：跳转到下一个书签<br>Shift + F2 ：跳转到上一个书签<br>Ctrl + Shift + F2 ：清空所有书签<br>Ctrl + F ：查找<br>Ctrl + H ：替换</p><p><strong>3.Project类</strong><br>Alt + F7 ：工程目标<br>F7 ：编译目标<br>Ctrl + F7 ：编译文件</p><p><strong>4.Flash类</strong><br>F8 ：下载程序</p><p><strong>5.Debug类</strong><br>Ctrl + F5 ：启动/停止调试<br>F5 ：运行<br>F11 ：Setp运行<br>F10 ：Setp Over运行<br>Ctrl + F11 ：Setp Out运行<br>Ctrl + F10 ：运行到光标处<br>Ctrl + B : 查看所有断点<br>F9 ：插入/移除断点<br>Ctrl + F9 : 使能/失能单个断点<br>Ctrl + Shift + F9 ：取消所有断点</p><p>只是简单列了一些常用快捷键，列表中默认没有的快捷键可以自己添加。</p><h1 id="三、Text-Completion代码完形"><a href="#三、Text-Completion代码完形" class="headerlink" title="三、Text Completion代码完形"></a>三、Text Completion代码完形</h1><p>这个选项相关的功能比较实用，能帮助你在编程时快速完成编辑。直白的意思就是能提高编程的效率。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/4.Text%20Completion%E4%BB%A3%E7%A0%81%E5%AE%8C%E5%BD%A2.png?raw=true"><br></table><h2 id="3-1-Show-Code-Completion-List：自动完成代码编辑"><a href="#3-1-Show-Code-Completion-List：自动完成代码编辑" class="headerlink" title="3.1 Show Code Completion List：自动完成代码编辑"></a>3.1 Show Code Completion List：自动完成代码编辑</h2><p><strong>Struct / Class Members</strong>编辑时显示结构体/类成员变量列表，直接点击列表中的成员就可以完形代码。</p><p><strong>Function Parameters</strong>就是显示参数和参数类型</p><p><strong>Symbols after [x] Characters</strong>自动匹配x字符，在输入时达到x个字符会匹配输入的字符串。</p><h2 id="3-2-Dynamic-Syntax-Checking：语法动态错误检测"><a href="#3-2-Dynamic-Syntax-Checking：语法动态错误检测" class="headerlink" title="3.2 Dynamic Syntax Checking：语法动态错误检测"></a>3.2 Dynamic Syntax Checking：语法动态错误检测</h2><p>你编辑代码时会动态（实时）检测你代码是否正确。比如：错误会有红色标识提示。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/5.%E5%8A%A8%E6%80%81%E8%AF%AD%E6%B3%95%E6%A3%80%E6%B5%8B.png?raw=true"><br></table><h2 id="3-3-Text-Templates：代码模板"><a href="#3-3-Text-Templates：代码模板" class="headerlink" title="3.3 Text Templates：代码模板"></a>3.3 Text Templates：代码模板</h2><p>代码模板很好理解，相当于你写了一个模板，以后直接使用就是了。</p><table><br>代码完形、模板动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/6.%E5%AE%8C%E5%9E%8B%E6%BC%94%E7%A4%BA%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h1 id="四、Other其他"><a href="#四、Other其他" class="headerlink" title="四、Other其他"></a>四、Other其他</h1><p>这个选项不常用，可以了解一下。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/7.Other%E5%85%B6%E4%BB%96.png?raw=true"><br></table><p><strong>1.UVSOCK (TCP/IP) Settings</strong><br>启动或关闭UV socket端口，这个选项可以说基本很少人使用。</p><p><strong>2.Startup (Require Restart)启动</strong><br>启动软件（重新打开）时对应的操作。</p><table><br><strong>Show splash screen：</strong>显示启动画面。如下图：<br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/8.%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p><strong>Open most recent project：</strong>启动软件后打开最近的工程项目。</p><p><strong>3.Debug调试</strong><br>调试时，如果都选上，则运行停止后不打开匹配的源文件。</p><p><strong>4.Parallel Build Configuration并行编译配置</strong><br>在编译多个工程时，这个选项就会起到作用。</p><p><strong>Disable Parallel Build：</strong>禁止并行编译<br><strong>Number of parallel jobs：</strong>并行编译数量</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文接着上一篇文章《Keil系列教程07_Configuration（一）》讲述的工程目标选项的后三项配置：Shortcut Keys快捷键、Text Completion代码完形、Other其他。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_Configuration%EF%BC%88%E4%BA%8C%EF%BC%89/1.Configuration%E5%90%8E%E4%B8%89%E9%A1%B9.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;这后面三部分内容在该系列教程其它也会牵涉，也是一些常用、重要的配置选项，下面讲述过程中会介绍相关内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程07_Configuration（一）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程07_Configuration（一）.html</id>
    <published>2018-11-21T08:00:00.000Z</published>
    <updated>2018-11-21T08:43:31.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文带来的内容为“Configuration”，即配置。而这里的“配置”和前面“工程目标选项配置”是完全不同的两种配置。</p><p>工程目标选项配置是针对工程目标，保存在工程文件（.uvprojx和.uvoptx）。这里的Configuration是针对IDE，保存在安装目录下。</p><p>我们常见的<strong>字体大小、颜色、关键字、快捷键</strong>等这些都是在“Configuration”中进行设置。本文讲述Configuration中的前面3项：<strong>Editor编辑、 Colors &amp; Fonts字体和颜色、 User KeyWords用户关键字</strong>。</p><a id="more"></a><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/1.Configuration.png?raw=true"><br></table><h1 id="二、打开“Configuration”方法"><a href="#二、打开“Configuration”方法" class="headerlink" title="二、打开“Configuration”方法"></a>二、打开“Configuration”方法</h1><p><strong>1.点击“Configuration”快捷按钮</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/2.%E2%80%9CConfiguration%E2%80%9D%E5%BF%AB%E6%8D%B7%E6%8C%89%E9%92%AE.png?raw=true"><br></table><p><strong>2.快捷键</strong><br>Keil打开Configuration，默认是没有设置快捷键。不过可以进入Configuration，对其打开方式设置快捷键。比如Alt + C（在下一篇文章会讲述设置快捷键）。</p><p><strong>3.从菜单中打开， Edit -&gt; Configuration</strong>，如下图：</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/3.Config%E8%8F%9C%E5%8D%95.png?raw=true"><br></table><h1 id="三、Editor编辑"><a href="#三、Editor编辑" class="headerlink" title="三、Editor编辑"></a>三、Editor编辑</h1><p>如下图，我将Edit分为五部分来讲述：<strong>General Editor Settings、 Function Display、 Look &amp; Feel、 File &amp; Project Handing、 C/C++ &amp; ASM &amp; Other File</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/4.Edit%E7%BC%96%E8%BE%91.png?raw=true"><br></table><h2 id="3-1-General-Editor-Settings"><a href="#3-1-General-Editor-Settings" class="headerlink" title="3.1 General Editor Settings"></a>3.1 General Editor Settings</h2><p><strong>General Editor Settings：通用编辑设置</strong>。这个选项里面内容比较实用，可以参看下面动画效果。</p><p><strong>1.Encoding：编码方式选择</strong><br>Keil提供十几种编码方式供大家选择，默认：Encode in ANSI.</p><p><strong>2.Auto Indent：自动缩进</strong><br>也就是换行时自动缩进（对齐）功能，提供3个选项。<br><strong>None：</strong>不对对齐，光标每次换行在第一列。<br><strong>Smart：</strong>灵活对齐（常用）。包含大括号自动对齐。<br><strong>Block：</strong>光标对齐于前一行。</p><p><strong>3.Virtual Spaces：虚拟空间</strong><br>光标在上下移动时不管有没有“空间”都对齐。也就是说光标可以在任何位置。</p><p><strong>4.View White Space：显示空白（空格）</strong><br>勾选会将“空格”和“Tab”显示出来。</p><p><strong>5.View End of Line：显示结束行</strong><br>勾选会在每行最后显示换行符。</p><table><br><strong>Encoding、Auto Indent</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/5.Encoding%E3%80%81Auto%20Indent%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><table><br><strong>Virtual Spaces、View White Space、View End of Line</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/6.Virtual%20Spaces%E3%80%81View%20White%20Space%E3%80%81View%20End%20of%20Line%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h2 id="3-2-Function-Display"><a href="#3-2-Function-Display" class="headerlink" title="3.2 Function Display"></a>3.2 Function Display</h2><p><strong>Function Display：函数显示</strong>，就是在Function Display窗口的一些显示方式。</p><p>这一区域是三个参数组合配置，可以实现多种显示效果。</p><p><strong>1.Display Modules：显示模块【显示方式】</strong><br>简单的说模块显示就是显示C源文件名，将函数名折叠在文件里面。<br>勾选：以模块（分组/文件夹）方式显示。<br>不选：以函数名方式显示。</p><p><strong>2.Scan function names in project files：浏览工程项目中所有函数【显示内容】</strong><br>就是显示工程中所有函数。</p><p><strong>3.Scan function names in current editor files：浏览当前编辑（已打开）文件的函数【显示内容】</strong><br>比如：我打开了main.c和bsp.c两个文件来编辑，那么就显示这两个文件的内容（函数）。</p><table><br><strong>Function Display</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/7.Function%20Display%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h2 id="3-3-Look-amp-Feel"><a href="#3-3-Look-amp-Feel" class="headerlink" title="3.3 Look &amp; Feel"></a>3.3 Look &amp; Feel</h2><p><strong>Look &amp; Feel：看&amp;感觉（视觉）</strong>，请看下面描述就能直观的理解这一区域意思。</p><p><strong>1.Show Message Dialog during Find：在查找时显示消息对话框</strong><br>就是在查找结束，或未查找到相关内时容弹出的提示框。</p><p>比如：我在main.c文件中查找main1（文件中实际是没有main1），勾选上就会弹出消息对话框（如下图），不勾选就不会弹出高亮对话框。</p><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/8.%E5%9C%A8%E6%9F%A5%E6%89%BE%E6%97%B6%E6%98%BE%E7%A4%BA%E6%B6%88%E6%81%AF%E5%AF%B9%E8%AF%9D%E6%A1%86.png?raw=true"><br></table><p><strong>2.Highlight Current Line：高亮当前行</strong><br>勾选上，光标放在那一行，这一行就高亮的意思。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/9.%E9%AB%98%E4%BA%AE%E5%BD%93%E5%89%8D%E8%A1%8C.png?raw=true"><br></table><p><strong>3.Highlight matching and mismatched braces：高亮显示匹配和不匹配括号</strong><br>将光标放在括号处，会高亮括号，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/10.%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%E5%8C%B9%E9%85%8D%E5%92%8C%E4%B8%8D%E5%8C%B9%E9%85%8D%E6%8B%AC%E5%8F%B7.png?raw=true"><br></table><p><strong>4.Print with syntax coloring：打印语法颜色</strong><br>打印颜色对应为编辑器中的颜色。</p><p><strong>5.Colored Editor Tabs：颜色编辑器选项卡</strong><br>启用或禁用文件名称标签的颜色，如下图，勾选就显示颜色：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/11.%E7%BC%96%E8%BE%91%E5%99%A8%E6%96%87%E4%BB%B6%E5%90%8D%E9%A2%9C%E8%89%B2.png?raw=true"><br></table><p><strong>6.Right Margin：右边距</strong><br>编辑分隔符标记的位置号。位置号的默认值是80,范围[1-999]。<br><strong>None：</strong>无标记；<br><strong>Vertical Line：</strong>垂直线标记；<br><strong>Colored Background：</strong>背景颜色标记。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/12.%E5%8F%B3%E8%BE%B9%E8%B7%9D.png?raw=true"><br></table><h2 id="3-4-File-and-Project-Handling"><a href="#3-4-File-and-Project-Handling" class="headerlink" title="3.4 File and Project Handling"></a>3.4 File and Project Handling</h2><p><strong>File and Project Handling：文件和工程操作</strong>，针对的是文件和工程。</p><p><strong>1.Create Backup files：创建备份文件(* . bak)</strong><br>在保存文件时，在文件的目录中创建备份文件，扩展名为.bak。这个选项只影响源文件，对项目文件没有影响。</p><p><strong>2.Automatic reload of externally modified files：自动加载修改过的文件</strong><br>比如：Keil软件打开了main.c文件，再使用其它编辑器打开该main,c修改其中内容并保存，这时Keil软件自动加载修改过的main.c文件。</p><p>不勾选，则不会自动加载，就会有如下重新加载提示：</p><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/13.%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>3.Save Project before entering Debug：进入调试之前保存工程项目</strong></p><p><strong>4.Save Files before entering Debug：进入调试之前保存所有文件</strong></p><p><strong>5.Auto save modified File every [x] Minutes：每x分钟自动保存文件</strong></p><h2 id="3-5-C-C-amp-ASM-amp-Other-File"><a href="#3-5-C-C-amp-ASM-amp-Other-File" class="headerlink" title="3.5 C/C++ &amp; ASM &amp; Other File"></a>3.5 C/C++ &amp; ASM &amp; Other File</h2><p>这里三组配置类似，只讲述一组，比较简单。</p><p><strong>1.Use syntax coloring：使用语法颜色</strong><br>不使用语法就等于txt文本那种纯黑色。见下图不使用和使用区别：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/14.%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E9%A2%9C%E8%89%B2.png?raw=true"><br></table><p><strong>2.Insert spaces for tabs：符插入空格</strong><br>这个符号需要配合上面3.1General Editor Settings的View White Space显示出来才能看到效果。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/15.%E7%AC%A6%E6%8F%92%E5%85%A5%E7%A9%BA%E6%A0%BC.png?raw=true"><br></table><p><strong>3.Tab Size：Tab符大小</strong><br>一个Tab符占几个空格。</p><p><strong>4.Show Line Numbers：显示行数</strong></p><p><strong>5.Use monospaced Font：使用等宽字体</strong></p><p><strong>6.Open with Outlining：打开伦廓</strong></p><h1 id="四、Colors-amp-Fonts颜色和字体"><a href="#四、Colors-amp-Fonts颜色和字体" class="headerlink" title="四、Colors &amp; Fonts颜色和字体"></a>四、Colors &amp; Fonts颜色和字体</h1><p>这个选项就是修改字体和颜色。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/16.Colors%20&%20Fonts%E9%A2%9C%E8%89%B2%E5%92%8C%E5%AD%97%E4%BD%93.png?raw=true"><br></table><p><strong>Window窗口：</strong>列出所有可配置窗口名称或窗口类型。这个列表是预定义的,用户不能修改。我们常见修改的地方就是“C/C++ Edit files”。</p><p><strong>Element元素：</strong>一个窗口的列表元素。这个列表是预定义的,用户不能修改。</p><p><strong>Font字体：</strong>包含Font字体、Size大小和Style风格三项。</p><p><strong>Colors颜色：</strong>包含Foreground 前景色、Background 背景色。</p><p>很多人不喜欢白色背景，比较刺眼。可惜Keil不支持修改主题，就只能在这里修改背景色来调节。</p><p>修改这里字体和颜色，其实就是修改了Keil_v5\UV4目录下的global.prop文件。</p><p>如下图所示，就是通过修改字体颜色和背景色来达到“黑色”主题。我将下图“黑色”主题提供给大家，只需替换你Keil_v5\UV4目录下global.prop即可。</p><p>链接：<a href="https://pan.baidu.com/s/16AqpplKTNNsqbi5CTrHmCg" target="_blank" rel="noopener">https://pan.baidu.com/s/16AqpplKTNNsqbi5CTrHmCg</a><br>密码：fxc7</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/17.%E9%BB%91%E8%89%B2%E8%83%8C%E6%99%AF.png?raw=true"><br></table><h1 id="五、User-Keywords用户关键字"><a href="#五、User-Keywords用户关键字" class="headerlink" title="五、User Keywords用户关键字"></a>五、User Keywords用户关键字</h1><p>这个选项比较简单，就是用户自定义关键字。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/18.User%20Keywords%E7%94%A8%E6%88%B7%E5%85%B3%E9%94%AE%E5%AD%97.png?raw=true"><br></table><p><strong>Text File Types：</strong>文本文件类型。<br><strong>User Keywords：</strong>用户关键字。</p><p>举例：在C/C++文件里定义关键字“uint8_t”，在编辑C/C++文件时“uint8_t”就会以关键字颜色显示。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_Configuration%EF%BC%88%E4%B8%80%EF%BC%89/19.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E5%AD%97.png?raw=true"><br></table><p>请参看我公众号分享过的一篇文章<a href="https://mp.weixin.qq.com/s/_GJ6yBebbN-YUp34-Uz-4w" target="_blank" rel="noopener">《Keil自定义关键字、快捷键》</a>。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文带来的内容为“Configuration”，即配置。而这里的“配置”和前面“工程目标选项配置”是完全不同的两种配置。&lt;/p&gt;
&lt;p&gt;工程目标选项配置是针对工程目标，保存在工程文件（.uvprojx和.uvoptx）。这里的Configuration是针对IDE，保存在安装目录下。&lt;/p&gt;
&lt;p&gt;我们常见的&lt;strong&gt;字体大小、颜色、关键字、快捷键&lt;/strong&gt;等这些都是在“Configuration”中进行设置。本文讲述Configuration中的前面3项：&lt;strong&gt;Editor编辑、 Colors &amp;amp; Fonts字体和颜色、 User KeyWords用户关键字&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程06_工程目标选项配置（二）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程06_工程目标选项配置（二）.html</id>
    <published>2018-11-20T07:00:00.000Z</published>
    <updated>2018-11-20T08:50:34.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文接着上一篇文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">《Keil系列教程05_工程目标选项配置（一）》</a>讲述的工程目标选项的后五项配置：<strong>C/C++编译、 Asm汇编、 Linker链接、 Debug调试、 Utilities公共</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9.png?raw=true"><br></table><a id="more"></a><h1 id="二、C-C-编译"><a href="#二、C-C-编译" class="headerlink" title="二、C/C++编译"></a>二、C/C++编译</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/2.CC++%E7%BC%96%E8%AF%91.png?raw=true"><br></table><p>这里“C/C++选项”和“Asm选项”类似，主要是与编译相关的一些配置。</p><p><font face="黑体" color="green" size="4">第1处：预处理（Preprocessor Symbols）</font><br>这里主要就是预定义功能，相当于在程序中的#define xxxx。我上面预定义STM32F10X_HD，在stm32f10x.h文件中就不用定义了。</p><p><font face="黑体" color="green" size="4">第2处：语言/代码生成（Language / Code Generation）</font><br><strong>Language/code Generation语言/代码生成</strong>。可以理解成编译、链接到最后生成代码。这部分功能对于代码优化比较重要，初学者可以不用过多理解，对代码大小、运行速度等性能要求较高的人就需要深入理解。</p><p><strong>Execute only Code：只生成执行代码</strong><br>【设置编译器命令行：–execute_only】<br>只生成执行代码防止编译器生成任何数据访问代码部分。</p><p><strong>Optimize：优化选择项，有Level0 - Level3四个选项</strong><br>【设置编译器命令行：-Onum】<br>初学者、在线调试建议使用Level0，也就是不优化，这样执行的效果才和代码一样。如果配置成Level3，在线调试可能有些地方优化而不能打断点。</p><p><strong>Optimize for Time：优化时间，即优化代码中费时的地方</strong><br>【设置编译器命令行：-Otime】<br>比如有些算法，本身代码量就比较大，运行需要很长时间（假如需要2秒），这个时候勾选上该功能，会发现运行时间有比较明显的减少（或许不到1秒时间）。</p><p><strong>Split Load and Store Multiple：加载和存储多个分裂</strong><br>【设置编译器命令行：–split_ldm】<br>非对齐数据采用多次访问方式。当 LMD/STM 指令有 4 个以上产生时，列分裂LMD 和 STM 指令，以减不中断延迟。</p><p><strong>One ELF Section per Function：优化每一个函数 ELF 段</strong><br>【设置编译器命令行：–split_sections】<br>每个函数都会产生一个 ELF 段，勾选上，允许优化每一个 ELF 段。这个选项可以减少潜在的共享地址、数据和函数之间的字符串。</p><p>直白的意思：可以减少代码量ROM的大小（内存RAM不会减小）。</p><p>举一个例子，勾选之前和勾选之后，编译后存储大小对比：<br><strong>勾选之前：</strong><br>Program Size: <strong>Code=2540 RO-data=336</strong> RW-data=40 ZI-data=1024</p><p><strong>勾选之后：</strong><br>Program Size: <strong>Code=908 RO-data=320</strong> RW-data=40 ZI-data=1024</p><p><strong>Strict ANSI C：标准（严格）的ANSC</strong><br>【设置编译器命令行：–strict】<br>也就是说：编译时严格按照标准的ANSI C进行检查。</p><p><strong>Enum Container always int：枚举总是int型</strong><br>【设置编译器命令行：–enum_is_int】<br>很容易理解，我们枚举时成员变量类型为int型。</p><p><strong>Plain Char is Signed：纯字符标记为字符</strong><br>【设置编译器命令行：–signed_chars】<br>代码举例：char a[] = “abcd”; 也就是说将“abcd”标记为字符型。</p><p><strong>Read-Only Position Independent：为常量生成独立的代码空间</strong><br>【设置编译器命令行：–apcs=/ropi】<br>比如：我们定义字库变量为常量，勾选该选项，会将这些字库变量放在独立的代码空间。</p><p><strong>Read-Write Position Independent：为可读写代码生成独立的代码空间</strong><br>【设置编译器命令行：–apcs=/rwpi】</p><p><strong>Warnings：警告</strong><br>【No Warnings设置编译器命令行：-W】<br>No Warnings：不会有警告提示和输出；<br>All Warnings：所有警告提示和输出。</p><p><strong>Thumb Mode：Thumb模式</strong><br>指定设置文件或文件夹（组）为Thumb模式。<br>【注意：在工程中该模式为默认，也就是不能选择】</p><p><strong>No Auto Includes：不自动添加头文件</strong><br>不勾选该选项，编译器就会在Keil安装路径寻找你工程中.h文件。<br>举例：我们定义uint8_t是定义在stdint.h文件里面的，但是我们工程目录下一般是没有stdint.h文件。这时候，编译器就会在Keil路径下去寻找stdint.h文件。</p><p><strong>C99 Mode：C99标准模式</strong><br>【设置编译器命令行：–c99】<br>C语音有标准有多个版本，如C89、C90、C99等。</p><p><strong>GNU extensions：支持GUN扩展</strong><br>GUN ARM C编译器是这后面新增支持的功能。</p><p><font face="黑体" color="green" size="4">第3处：包含路径（Include Paths）</font><br>包含路径是使用Keil（及类似）软件必须掌握的一项。包含路径就是指定我们工程中使用文件所在的位置，让编译器找到相应的文件。</p><p>可以参看我之前分享的文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">《Keil系列教程02_新建基础软件工程》</a>里面添加路径的方法。</p><table><br>添加路径动画效果:<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/17.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%EF%BC%88%E5%8A%A8%E7%94%BB%EF%BC%89.gif?raw=true"><br></table><p><font face="黑体" color="green" size="4">第4处：多功能控件（Misc Controls）</font><br>例如：用日本语言来显示消息：–message_locale=ja_JP.</p><p><font face="黑体" color="green" size="4">第5处：编译器控制字符串（Compiler control string）</font><br>这里是针对编译器执行的命令，显示当前在编译器命令行指令。</p><p>在上面“第2处：语言代码生成”中有一个中括号【设置编译器命令行：】<br>里面的命令就显示在这里。</p><h1 id="三、Asm汇编"><a href="#三、Asm汇编" class="headerlink" title="三、Asm汇编"></a>三、Asm汇编</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/4.Asm%E6%B1%87%E7%BC%96.png?raw=true"><br></table><p>Asm选项和“C/C++”类似，只是这里针对的是Asm汇编。因此，这一章节只简述，不会重点强调，可以参看上一章节进行对比，第3、4、5处和C/C++选项一样，这里不讲述。</p><p><font face="黑体" color="green" size="4">第1处：条件控制符号（Conditional Assembly Control Symbols）</font><br>指定汇编条件，这里类似上一章节C/C++选项中的预处理。</p><p><font face="黑体" color="green" size="4">第2处：语言代码生成（Language / Code Generation）</font><br>Read-Only Position Independent：为常量生成独立的代码空间。</p><p>Read-Write Position Independent：为可读写代码生成独立的代码空间。</p><p>Thumb Mode：Thumb模式。</p><p>Split Load and Store Multiple：加载和存储多个分裂。</p><p>Execute only Code：只生成执行代码；</p><p>No Auto Includes：不自动添加头文件（一般不勾选）。</p><h1 id="四、Linker链接"><a href="#四、Linker链接" class="headerlink" title="四、Linker链接"></a>四、Linker链接</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/5.Linker%E9%93%BE%E6%8E%A5.png?raw=true"><br></table><p>Linker链接器配置选项。可以修改、编辑和查看链接的文件。第1、2处是重点，第3、4处和C/C++选项一样，这里不讲述。</p><p><font face="黑体" color="green" size="4">第1处：内存配置对话框（Use Memory Layout from Target Dialog）</font><br><strong>Make RW Sections Position Independent：使RW段独立</strong><br>【设置编译器命令行：–rwpi】<br>启用时：变量区域（包含RW和ZI）具有独立地址。<br>禁用时：变量区域（包含RW和ZI）位于绝对的内存地址。</p><p><strong>Make RO Sections Position Independent：使RO段独立</strong><br>【设置编译器命令行：–ropi】<br>启用时：常量和代码区域（RO）具有独立地址。<br>禁用时：常量和代码区域（RO）位于绝对的内存地址。</p><p><strong>Don’t Search Standard Libraries：不搜索标准库</strong><br>【设置编译器命令行：–noscanlib】<br>禁用默认编译器运行时库的扫描。</p><p><strong>Report ‘might fail’ Conditions as Errors：报告’might fail’条件认为是错误</strong><br>【设置编译器命令行：–strict】<br>报告的条件可能导致失败的错误，而不是警告。</p><p><strong>X/O Base：X/O基地址</strong><br>【设置编译器命令行：–xo_base=address】</p><p><strong>R/O Base：R/O基地址</strong><br>【设置编译器命令行：–ro_base=address】</p><p><strong>R/W Base：R/W基地址</strong><br>【设置编译器命令行：–rw_base=address】</p><p><strong>disable Warnings:警用警告</strong><br>【设置编译器命令行：–diag_suppress】</p><p><font face="黑体" color="green" size="4">第2处：分散文件（Scatter File）</font><br>这里可以加载、查看和编辑分散文件。点击后面就的三点“…”可以加载文件；点击“Edit…”查看和编辑对应的文件。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/6.%E5%88%86%E6%95%A3%E6%96%87%E4%BB%B6.png?raw=true"><br></table><h1 id="五、Debug调试"><a href="#五、Debug调试" class="headerlink" title="五、Debug调试"></a>五、Debug调试</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/7.Debug%E8%B0%83%E8%AF%95.png?raw=true"><br></table><p>这个选项比较重要，主要用于（软件仿真、硬件在线）调试使用。由于软件仿真和硬件在线调试配置类似，这里只讲述硬件在线调试（右边部分）。</p><p><font face="黑体" color="green" size="4">第1处：选择硬件在线调试</font><br>选择下载调试器，以及对应的设置“Setting”。<br>很多人常用J-Link下载调试器，而调试STM32时，可以使用四线SWD模式。如果使用J-Link进行SWD调试。这个时候就需要在“Setting”里面选择“SW”模式，如下如：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/8.%E9%85%8D%E7%BD%AE%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png?raw=true"><br></table><p><font face="黑体" color="green" size="4">第2处：选择硬件在线调试</font><br>Load Application at Startup：启动时加载应用程序。</p><p>Run to main()：程序执行到main()函数。<br>进入调试模式时，程序自动运行到main函数处。</p><p>Initialization File：加载、编辑初始化文件。<br>这里在某些情况下可以使用，比如：在RAM中调试代码。可以参看我的文章<a href="https://mp.weixin.qq.com/s/lYN-BM_yhqPwOyNyhUW-tg" target="_blank" rel="noopener">《STM32内部RAM在线调试配置方法》</a>。</p><p><font face="黑体" color="green" size="4">第3处：复位调试会话设置（Restore Debug Session Settings）</font><br>这里复位设置就是恢复设置的意思，如果勾选上，点击一下“复位”就会恢复到之前的状态。</p><p>包括：断点Breakpoints、窗口Watch Windows、性能分析器 Performance Analyzer、内存窗口Memory Window、工具箱Toolbox、系统查阅器System Viewer等。</p><p><font face="黑体" color="green" size="4">第4处：DLL文件</font><br>这里的配置属于Keil自身的配置，最好不要修改。<br>CPU/Driver DLL - Parameter：CPU驱动文件和参数。<br>Dialog DLL - Parameter：会话框DLL文件和参数。</p><p><font face="黑体" color="green" size="4">第5处：管理组件描述文件</font><br>Manage Component Viewer Description Files<br>这里一般不用去管理。</p><h1 id="六、Utilities公共"><a href="#六、Utilities公共" class="headerlink" title="六、Utilities公共"></a>六、Utilities公共</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/9.Utilities%E5%85%AC%E5%85%B1.png?raw=true"><br></table><p><font face="黑体" color="green" size="4">第1处：配置FLASH菜单命名（Configure Flash Menu Command）</font><br>这里是二选一选项，一般我们使用上面的“Update Target Driver for Flash Programming”。</p><p>Use Debug Driver：使用调试驱动</p><p>Update Target Before Debugging：调试之前更新目标<br>一般都勾选上，因为我们下载程序之前检测到代码修改了，就会重新编译程序（也就是更新目标）</p><p>Setting：设置<br>很多人下载程序之后，需要复位一下程序才运行，原因在于没有勾选“Reset and Run”，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/10.%E5%A4%8D%E4%BD%8D%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>Init File：加载/编辑初始化文件</p><p><font face="黑体" color="green" size="4">第2处：配置镜像文件（Configure Image File Processing）</font><br>通过在编译过程中调用FCARM，输入配置映像文件处理(FCARM)的选项。这将把镜像文件转换成c源代码。</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文接着上一篇文章&lt;a href=&quot;https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html&quot;&gt;《Keil系列教程05_工程目标选项配置（一）》&lt;/a&gt;讲述的工程目标选项的后五项配置：&lt;strong&gt;C/C++编译、 Asm汇编、 Linker链接、 Debug调试、 Utilities公共&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程05_工程目标选项配置（一）</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程05_工程目标选项配置（一）.html</id>
    <published>2018-11-19T07:00:00.000Z</published>
    <updated>2018-11-19T07:45:35.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文讲述的内容是“<strong>Options for Target</strong>”，即<strong>工程目标选项</strong>的配置内容，也就是我们常见的工程配置内容。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>由于目标配置的选项比较多，我将其分为工程目标选项配置（一）和工程目标选项配置（二）两篇文章来讲述。</p><p>目标选项包含了一个工程目标所有的配置信息，这些信息是保存于我们工程（.uvprojx）和对应的（.uvoptx）文件。</p><a id="more"></a><h1 id="二、本文要点"><a href="#二、本文要点" class="headerlink" title="二、本文要点"></a>二、本文要点</h1><p>本文主要讲述的是目标选项的配置，但为了让更多人明白什么是目标选项，首先将简述工作空间、工程、目标的意思和区别。</p><h2 id="2-1-打开目标选项的三种方法"><a href="#2-1-打开目标选项的三种方法" class="headerlink" title="2.1 打开目标选项的三种方法"></a>2.1 打开目标选项的三种方法</h2><p><strong>A.点击“目标选项”快捷按钮</strong>，如开篇第一张图。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p><strong>B.快捷键：Alt + F7</strong><br>提示：如果是配置工程，需选中工程，再按Alt + F7。（如果你选中文件，是对文件的一些配置）</p><p><strong>C.从菜单中打开，Project -&gt; Options for Target</strong>，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/2.%E4%BB%8E%E8%8F%9C%E5%8D%95%E6%89%93%E5%BC%80.png?raw=true"><br></table><h2 id="2-2-本文所讲述的目标选项"><a href="#2-2-本文所讲述的目标选项" class="headerlink" title="2.2 本文所讲述的目标选项"></a>2.2 本文所讲述的目标选项</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/3.%E7%9B%AE%E6%A0%87%E5%89%8D%E4%BA%94%E9%A1%B9.png?raw=true"><br></table><p>由于目标选项里面内容较多，本文只讲述前五项：<strong>Devie设备、 Target目标、 Output输出、 Listing列表、 User用户</strong>。后五项在下一篇文章讲述。</p><p>本文旨在让大部分人明白目标选项的配置，为了使文章内容精简，过于简单和不常用过于复杂的只简述。</p><h1 id="三、工作空间、工程、目标含义和区别"><a href="#三、工作空间、工程、目标含义和区别" class="headerlink" title="三、工作空间、工程、目标含义和区别"></a>三、工作空间、工程、目标含义和区别</h1><p>什么是工程目标选项配置？或许有些人分不清<strong>工作空间、工程、目标</strong>这三个名词的意思和区别，这里就简单讲述一下它们的含义和区别。</p><p>可以关注该系列教程后面新建多工程，多目标的文章。</p><p>工作空间、工程、目标它们三个是从大到小，依次包含的关系：<strong>工作空间 &gt; 工程 &gt; 节点</strong>。也就是说：<strong>一个工作空间可以有多个工程，一个工程可以有多个目标</strong>。示意图，如下：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/4.%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E3%80%81%E5%B7%A5%E7%A8%8B%E3%80%81%E7%9B%AE%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png?raw=true"><br></table><p>举个例子：一个<strong>项目</strong>，由<strong>主机</strong>和<strong>从机</strong>组成，但项目为了区分产品的高低端，将产品做成<strong>简单</strong>和<strong>复杂</strong>两个版本（简单版只保留复杂版的部分功能）。举例示意如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/5.%E4%B8%BB%E4%BB%8E%E6%9C%BA%E4%BE%8B%E5%AD%90.png?raw=true"><br></table><p>本节内容不过多描述，在大型的实际项目中容易看见，一般不是很大项目，基本就是一个工程，一个目标或多个目标。</p><p>初学者一般都是<strong>一个工程对应一个目标</strong>，这样简单明了。若初学者不能理解可以略过。</p><h1 id="四、Device设备（器件）"><a href="#四、Device设备（器件）" class="headerlink" title="四、Device设备（器件）"></a>四、Device设备（器件）</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/6.Device%E8%AE%BE%E5%A4%87.png?raw=true"><br></table><p><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">《Keil新建软件工程》</a>第一步就是选择设备（器件）。强调一点就是：<strong>器件可以通过输入查找，也可以通过列表查找</strong>。</p><h1 id="五、Target目标"><a href="#五、Target目标" class="headerlink" title="五、Target目标"></a>五、Target目标</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/7.Target%E7%9B%AE%E6%A0%87.png?raw=true"><br></table><p>这里说的目标和上面说的工程目标不一样，是工程目标的目标。从内容可以看得出来是工程目标的调试晶振频率、选择的编译器、RAM和ROM分配的地址空间等。</p><font face="黑体" color="green" size="4">第1处：晶振频率</font><br>这个值主要用于仿真调试用，一般我们使用硬件调试可以不用管这个值。<br><br><font face="黑体" color="green" size="4">第2处：操作系统</font><br>很好理解，是否选择Keil自带的RTX操作系统，一般我们都不选。<br><br><font face="黑体" color="green" size="4">第3处：系统预览文件</font><br>这里我们一般是默认使用系统自带，不选择自己定义的。<br><br><font face="黑体" color="green" size="4">第4处：生成代码所选择的编译器<br></font><p><font face="黑体" color="green" size="4">第5处：使用交叉模块优化、使用微库</font><br>交叉模块一般我们不使用，微库这个功能常用与printf函数。</p><p><font face="黑体" color="green" size="4">第6处：ROM存储地址</font><br>这里的ROM存储指的是程序储存的地址，分<strong>片外、片内</strong>两种。</p><p>程序存储在片内好理解（初学者一般下载程序都是下载到片内FLASH）,片外存储程序对于初学者来说比较少见，一般都是项目做大了，或有特殊要求时，片内不够使用了才将程序存储在片外。</p><p><font face="黑体" color="green" size="4">第7处：RAM存储地址</font><br>RAM存储地址和ROM道理一样，可以分片内和片外。</p><h1 id="六、Output输出"><a href="#六、Output输出" class="headerlink" title="六、Output输出"></a>六、Output输出</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/8.Output%E8%BE%93%E5%87%BA.png?raw=true"><br></table><p>输出分两类：<br><strong>1.输出（创建）可执行文件</strong>：我们下载到处理器里面的程序就是该类；</p><p><strong>2.输出库</strong>：对于初学者来说一般不使用库，但对于很多从事特殊行业技术开发的公司来说，可能比较常用该功能。</p><p><font face="黑体" color="green" size="4">第1处：输出路径</font><br>输出路径就是在工程编译的过程中，输出这些文件保存的文件夹。（Keil V5一般默认是保存在Objects文件夹下面）</p><p><font face="黑体" color="green" size="4">第2处：输出可执行文件名</font><br>输出的可执行文件和库的名称就是在这里定义。比如我们常见输出Hex文件，其名称就是这里定义的。</p><p><font face="黑体" color="green" size="4">第3处：输出可执行文件</font><br>这里和输出库是二选一，选择了输出可执行文件就不能选择输出库。</p><p>Debug Infomation：输出调试信息。勾选上这个选项，我们才可以进行调试。</p><p>Create HEX File：输出可执行Hex文件。很多初学的朋友问：“在哪里设置生成Hex?”，这里勾选上就行了。</p><p>Browse Information：输出浏览信息。勾选上这个我们才能使用go to definition of这个功能。很多人问：“为什么我不能跟踪代码了”，原因就在这里。</p><p>提示：输出这些中间文件都很费时间，如果都不勾选这些选项，编译速度会很快。</p><p><font face="黑体" color="green" size="4">第4处：输出库</font><br>选择输出库，上面可执行文件就不能输出。<br>提示：这里输出（生成）的是静态库，并非动态库。</p><h1 id="七、Listing列表"><a href="#七、Listing列表" class="headerlink" title="七、Listing列表"></a>七、Listing列表</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/9.Listing%E5%88%97%E8%A1%A8.png?raw=true"><br></table><p>这个选项是关于生成列表相关的选项，对代码分析比较透彻的工程师就需要了解这个选项。常见的map地址的分布，就是在这里配置生成的。</p><p><font face="黑体" color="green" size="4">第1处：输出路径、宽高<br></font><br>选择列表文件输出的文件夹。可设置文件页面的宽度，长宽。</p><p><font face="黑体" color="green" size="4">第2处：输出汇编列表</font><br>勾选上会输出汇编列表信息（产生后缀为 .lst的文件）。如果工程中没汇编文件，则不会输出信息。</p><p><font face="黑体" color="green" size="4">第3处：C编译列表</font><br>C编译程序列表选项，勾选上可生成.txt, .i文件。</p><p><font face="黑体" color="green" size="4">第4处：链接列表</font><br>可选择生成或禁止生成.map文件。可设置生成代码的详细信息。可选择性的选取输出MAP文件。</p><h1 id="八、User用户选项"><a href="#八、User用户选项" class="headerlink" title="八、User用户选项"></a>八、User用户选项</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/10.User%E7%94%A8%E6%88%B7%E9%80%89%E9%A1%B9.png?raw=true"><br></table><p>这个选项是针对用户而设计的，方便用户执行一些程序。比如：编译完代码之后，我要将生成的Hex文件拷贝到其它地方。</p><p>纵观上图可以看见，第1、2、3处功能类似，都是让用户运行程序，只是运行的条件不同而已。</p><p>这里可以参看曾在微信公众号分享过的一篇文章<a href="https://mp.weixin.qq.com/s/LIJ7XD33aZyYBFY2Z4nUnw" target="_blank" rel="noopener">《MDK-ARM如何通过配置命令生产Bin文件》</a></p><p><font face="黑体" color="green" size="4">第1处：编辑之前运行用户程序<br></font></p><p><font face="黑体" color="green" size="4">第2处：编译之前运行用户程序<br></font></p><p><font face="黑体" color="green" size="4">第3处：编译之后运行用户程序<br></font></p><p><font face="黑体" color="green" size="4">第4处：编译之后执行条件<br></font><br>Run “After Build” conditionally：执行条件；<br>Beep When Complete：编译完成发出声音；<br>Start Debugging：启动调试程序。</p><h1 id="九、说明"><a href="#九、说明" class="headerlink" title="九、说明"></a>九、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="十、最后"><a href="#十、最后" class="headerlink" title="十、最后"></a>十、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文讲述的内容是“&lt;strong&gt;Options for Target&lt;/strong&gt;”，即&lt;strong&gt;工程目标选项&lt;/strong&gt;的配置内容，也就是我们常见的工程配置内容。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/1.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;由于目标配置的选项比较多，我将其分为工程目标选项配置（一）和工程目标选项配置（二）两篇文章来讲述。&lt;/p&gt;
&lt;p&gt;目标选项包含了一个工程目标所有的配置信息，这些信息是保存于我们工程（.uvprojx）和对应的（.uvoptx）文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
</feed>
