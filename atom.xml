<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmbeddedDevelop</title>
  
  <subtitle>作者：strongerHuang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.strongerhuang.com/"/>
  <updated>2018-11-16T01:22:40.753Z</updated>
  <id>http://www.strongerhuang.com/</id>
  
  <author>
    <name>strongerHuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CANOpen系列教程</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程.html</id>
    <published>2018-11-16T01:30:00.000Z</published>
    <updated>2018-11-16T01:22:40.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【CANOpen系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_%E5%88%9D%E8%AF%86CAN%E4%B8%8ECANOpen%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9.html">1.CANOpen系列教程01_初识CAN与CANOpen及相关内容</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE.html">2.CANOpen系列教程02_理解CAN总线协议</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8.html">3.CANOpen系列教程03_CAN收发器功能、原理及作用</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.html">4.CANOpen系列教程04_CAN总线波特率、位时序、帧类型及格式说明</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A.html">5.CANOpen系列教程05_CAN总线同步与位填充、优先级的决定</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89.html">6.CANOpen系列教程06_结合代码理解CAN底层收发数据（含STM32例程）</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_CANOpen%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0.html">7.CANOpen系列教程07_CANOpen协议概述</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html">8.CANOpen系列教程08_CANOpen通信接口引导学习</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.html">9.CANOpen系列教程09_CANOpen对象字典</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">10.CANOpen系列教程10_关于Canfestival及对象字典生成工具环境搭建</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html">11.CANOpen系列教程11_深度分析CanFestival_3架构</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E.html">12.CANOpen系列教程12_对象字典编辑器操作说明</a><br><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html">13.CANOpen系列教程13_协议源码移植（一）</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【CANOpen系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【EmbeddedDevelop】&lt;/a&gt;，关注微信公众号回复【CANOpen系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程13_协议源码移植（一）</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程13_协议源码移植（一）.html</id>
    <published>2018-11-16T01:00:00.000Z</published>
    <updated>2018-11-16T01:35:17.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　基于Canfestival框架的CANOpen协议栈移植教程网上流传着许多，而且有一份不知道被复制、粘贴了多少遍的“CANOpen移植教程”相信许多朋友都知道。</p><p>　　同时，百度、谷歌还能搜出许多所谓“移植代码”。其实，这许多内容，对初学者并没有多大帮助。相反，我觉得还有误导的作用。</p><p>　　我认为基于Canfestival框架的CANOpen协议栈移植<strong>需要做的工作并不多</strong>，但许多初学者无从下手，究其原因还是<strong>有许多内容没有理解到位</strong>。</p><a id="more"></a><p>　　本教程站在初学者角度，尽量将重要内容讲述到位，后面提供移植好的Demo供大家参考学习。</p><h1 id="二、移植准备"><a href="#二、移植准备" class="headerlink" title="二、移植准备"></a>二、移植准备</h1><p>移植前，先让大家认识一下移植的一些准备条件。</p><h2 id="2-1-硬件"><a href="#2-1-硬件" class="headerlink" title="2.1 硬件"></a>2.1 硬件</h2><p>两块带有MCU、CAN控制器和收发器的板卡。</p><p>该移植教程以STM32F1（自带CAN控制器），带有CAN收发器的开发板为例来讲述。</p><p>条件允许的情况下，可以购买一个CAN总线分析仪。没有分析仪的朋友，可以用我<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89.html">《CANOpen系列教程06》</a>提供的一个例程来抓取CAN总线数据。</p><p>因例程在中断里用串口打印传输数据。所以，用例程抓取的CAN总线传输速率不能太快（建议低于20帧/秒）。</p><h2 id="2-2-MCU资源"><a href="#2-2-MCU资源" class="headerlink" title="2.2 MCU资源"></a>2.2 MCU资源</h2><p><strong>1.CAN：</strong>CAN总线通信（<strong>必备</strong>）；<br><strong>2.TIM：</strong>CANOpen协议调度（<strong>必备</strong>）；<br><strong>3.UART：</strong>调试信息（选配）；<br><strong>4.GPIO：</strong>板卡状态指示灯（选配）；</p><h2 id="2-3-STM32标准外设库-FreeRTOS工程"><a href="#2-3-STM32标准外设库-FreeRTOS工程" class="headerlink" title="2.3 STM32标准外设库+FreeRTOS工程"></a>2.3 STM32标准外设库+FreeRTOS工程</h2><p>本教程基于STM32标准外设库和FreeRTOS系统搭建的工程为例（很早之前我分享过），这里不讲述。</p><p>运行RTOS主要是牵涉到CAN总线数据的发送和接收需要两个线程来处理，以及增加一个CANOpen应用程序线程。</p><p>基于其他MCU以及RTOS原理类似，也可参考本文。</p><h2 id="2-4-下载Canfestival源码并搭建好环境"><a href="#2-4-下载Canfestival源码并搭建好环境" class="headerlink" title="2.4 下载Canfestival源码并搭建好环境"></a>2.4 下载Canfestival源码并搭建好环境</h2><p>这里的内容，如果你不明白，请务必先阅读该教程前几篇相关文章。</p><h1 id="三、生成对象字典"><a href="#三、生成对象字典" class="headerlink" title="三、生成对象字典"></a>三、生成对象字典</h1><p>本移植教程重点是将CANOpen协议源码移植到MCU中，使其成功运行。因此，对象字典只配置最基础的“心跳”。</p><p>下面教大家在对象字典编辑器中生成带“心跳”的对象字典。</p><table><br><strong>1.打开编辑器，文件 -&gt; 新建</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/1.%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%8C%E6%96%B0%E5%BB%BA.png?raw=true"><br></table><table><br><strong>2.新建“主站”节点</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/2.%E6%96%B0%E5%BB%BA%E2%80%9C%E4%B8%BB%E7%AB%99%E2%80%9D%E8%8A%82%E7%82%B9.png?raw=true"><br></table><table><br><strong>3.配置心跳信息</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/3.%E9%85%8D%E7%BD%AE%E5%BF%83%E8%B7%B3%E4%BF%A1%E6%81%AF.png?raw=true"><br></table><table><br><strong>4.保存对象字典：文件 -&gt; 保存 -&gt; 保存在一个指定位置</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/4.%E4%BF%9D%E5%AD%98%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.png?raw=true"><br></table><table><br><strong>5.建立对象字典</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/5.%E5%BB%BA%E7%AB%8B%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.png?raw=true"><br></table><p>到这里就生成了三个文件：<strong>TestMaster.od、 TestMaster.c 和 TestMaster.h</strong>需保存好，在后面需要使用这个对象字典源码。</p><p><strong>提示：</strong><br>A.上面牵涉到三个地方保存名字：节点名字、对象字典工程名字、对象字典源文件名字，建议都一样。</p><p>B.主站和从站的生成原理一样，上面是生成主站TestMaster对象字典，从站TestSlave对象字典请按照同样方式生成即可。</p><h1 id="四、提取CANOpen源码"><a href="#四、提取CANOpen源码" class="headerlink" title="四、提取CANOpen源码"></a>四、提取CANOpen源码</h1><p>本节内容主要针对初学者使其更加理解移植的代码工程，将CanFestival中源代码提取做一定说明，并且尽量将源码文件对应到自己工程下。</p><p>当然，本文按照常规方式提取，你也可以按照自己方式提取。同时，整个工程下其它，如STM32标准外设库、FreeRTOS这些文件在这里不作说明。</p><table><br><strong>1.提取头、源文件（如下图）</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/6.%E6%8F%90%E5%8F%96%E5%A4%B4%E3%80%81%E6%BA%90%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>CANOpen\inc目录下19个.h头文件，来自Canfestival-&gt;include下目录19个头文件；</p><p>CANOpen\inc\stm32目录下3个.h头文件来自Canfestival-&gt;include\cm4；<br>其中canfestival.h文件是函数接口定义（声明），函数内容需要自己实现（位于：App\canopen目录下canopen_drv.c）；</p><p>CANOpen\src目录下12个.c源文件，来自Canfestival-&gt;src目录12个源文件（symbols.c源文件为linux下使用的文件，不需要提取）；<br>其中需要删除dcf.c文件下第59、98行前面的“inline”关键字；</p><table><br><strong>2.头文件说明</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/7.%E5%A4%B4%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E.png?raw=true"><br></table><table><br>要修改一下其中的canfestival.h文件：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/8.%E4%BF%AE%E6%94%B9canfestival%E6%96%87%E4%BB%B6.png?raw=true"><br></table><table><br><strong>3.建立canopen文件夹并提取文件</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/9.%E5%BB%BA%E7%AB%8Bcanopen%E6%96%87%E4%BB%B6%E5%A4%B9%E5%B9%B6%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p>在工程下建立canopen文件夹，提取相应的文件，同时建立自己的文件：canopen_app和canopen_drv.</p><p>还需要修改一下congfig.h文件，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/10.%E9%9C%80%E4%BF%AEcongfig%E6%96%87%E4%BB%B6.png?raw=true"><br></table><table><br><strong>4.建立CAN和TIM底层驱动文件</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B13_%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%A7%BB%E6%A4%8D%EF%BC%88%E4%B8%80%EF%BC%89/11.%E5%BA%95%E5%B1%82%E9%A9%B1%E5%8A%A8.png?raw=true"><br></table><p>在上面canfestival.h文件提供了CAN和TIM的驱动接口，但我们这里不用它那一套接口，自己定义在bsp_can和bsp_timer源代码下。</p><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p>为照顾初学者，将移植过程讲述的更加详细，移植工作在下一篇文章还会继续讲述，提前把移植好的、带有“心跳”的Demo工程给大家下载。</p><p><a href="https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw" target="_blank" rel="noopener">https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw</a><br>提取码：l2dc</p><p><strong>提示</strong>：如果链接失效，公众号回复【CANOpen系列教程】获取更新链接；</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　基于Canfestival框架的CANOpen协议栈移植教程网上流传着许多，而且有一份不知道被复制、粘贴了多少遍的“CANOpen移植教程”相信许多朋友都知道。&lt;/p&gt;
&lt;p&gt;　　同时，百度、谷歌还能搜出许多所谓“移植代码”。其实，这许多内容，对初学者并没有多大帮助。相反，我觉得还有误导的作用。&lt;/p&gt;
&lt;p&gt;　　我认为基于Canfestival框架的CANOpen协议栈移植&lt;strong&gt;需要做的工作并不多&lt;/strong&gt;，但许多初学者无从下手，究其原因还是&lt;strong&gt;有许多内容没有理解到位&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程.html</id>
    <published>2018-11-14T04:30:00.000Z</published>
    <updated>2018-11-14T02:24:53.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【Keil系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【Keil系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C.html">1.Keil系列教程01_Keil介绍、下载、安装与注册</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html">2.Keil系列教程02_新建基础软件工程</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">3.Keil系列教程03_主窗口和工具栏详细说明</a><br><a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html">4.Keil系列教程04_菜单概述</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【Keil系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【EmbeddedDevelop】&lt;/a&gt;，关注微信公众号回复【Keil系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程04_菜单概述</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程04_菜单概述.html</id>
    <published>2018-11-14T04:00:00.000Z</published>
    <updated>2018-11-16T01:53:14.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>Keil菜单如下图所示，本文以Keil MDK-ARM为例，Keil C51菜单的大部分内容一样，因此也适用于Keil C51。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/1.%E8%8F%9C%E5%8D%95%E6%80%BB%E8%A7%88.png?raw=true"><br></table><p>Keil有些菜单在<strong>编辑模式和调试模式</strong>下可能有所不同，也就是说在不同模式下有些功能不能使用。</p><p><strong>提示</strong>：在上一篇教程<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《Keil系列教程03_主窗口和工具栏详细说明》</a>中讲述的工具栏按钮属于各菜单的子菜单内容。</p><a id="more"></a><h1 id="二、File文件菜单"><a href="#二、File文件菜单" class="headerlink" title="二、File文件菜单"></a>二、File文件菜单</h1><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/2.File%E6%96%87%E4%BB%B6%E8%8F%9C%E5%8D%95.png?raw=true"><br></table><p><strong>1.New：</strong>新建文件 Ctrl + N<br><strong>2.Open：</strong>打开文件 Ctrl + O<br><strong>3.Close：</strong>关闭文件 Ctrl + W<br><strong>4.Save：</strong>保存当前文件 Ctrl + S<br><strong>5.Save As：</strong>文件另存为<br><strong>6.Save All：</strong>保存所有（文件及工程设置）<br><strong>7.Device DataBase：</strong>器件数据库（信息）<br><strong>8.License Management：</strong>许可证管理<br><strong>9.Print Setup：</strong>打印设置<br><strong>10.Print：</strong>打印 Ctrl + P<br><strong>11.Print Preview：</strong>打印预览<br><strong>12.Exit：</strong>退出（关闭）软件</p><h2 id="三、Edit编辑"><a href="#三、Edit编辑" class="headerlink" title="三、Edit编辑"></a>三、Edit编辑</h2><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/3.Edit%E7%BC%96%E8%BE%91.png?raw=true"><br></table><p>Edit编辑子菜单的大部分内容都位于该教程上一篇文章讲述的<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html">《工具栏》</a>按钮，这些子菜单内容使用频率较高，所以很多都有快捷键。</p><p><strong>1.Undo：</strong>撤销编辑 Ctrl + Z<br><strong>2.Redo：</strong>恢复编辑 Ctrl + Y<br><strong>3.Cut：</strong>剪切 Ctrl + X<br><strong>4.Copy：</strong>复制 Ctrl + C<br><strong>5.Paste：</strong>粘贴 Ctrl + V<br><strong>6.Navigate Backwards：</strong>跳转到上一步 Ctrl + -<br><strong>7.Navigate Forwards：</strong>跳转到下一步 Ctrl + Shift + -<br><strong>8.Insert/Remove Bookmark：</strong>插入/移除书签 Ctrl + F2<br><strong>9.Go to Next Bookmark：</strong>跳转到下一个书签 F2<br><strong>10.Go to Previous Bookmark：</strong>跳转到上一个书签 Shift + F2<br><strong>11.Clear All Bookmarks：</strong>清除所有标签 Ctrl + Shift + F2<br><strong>12.Find：</strong>查找 Ctrl + F<br><strong>13.Replace：</strong>替换 Ctrl + H<br><strong>14.Find in Files：</strong>在文件中查找文本 Ctrl + Shift + F<br><strong>15.Incremental Find：</strong>逐个查找文本 Ctrl + I<br><strong>16.OutLining：</strong>提纲（如显示函数名称，隐藏函数体）<br><strong>17.Advanced：</strong>（更多）先进功能<br><strong>18.Configuration：</strong>配置</p><h1 id="四、View视图"><a href="#四、View视图" class="headerlink" title="四、View视图"></a>四、View视图</h1><table><br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/4.View%E8%A7%86%E5%9B%BE.png?raw=true"><br></table><p>View菜单包含<strong>状态栏、工具栏、窗口</strong>等视图，在调试模式下比在编辑模式下要多出一些<strong>调试视图窗口</strong>，而上面常规的视图窗口都一样。</p><p><font face="黑体" color="green" size="5">编辑模式基础菜单</font><br><strong>1.Status Bar：</strong>状态栏<br><strong>2.Toolbars：</strong>工具栏<br><strong>3.Project Window：</strong>工程窗口<br><strong>4.Books Window：</strong>书籍窗口<br><strong>5.Functions Window：</strong>函数窗口<br><strong>6.Templates Window：</strong>模板窗口<br><strong>7.Source Browser Window：</strong>源码浏览窗口<br><strong>8.Build Output Window：</strong>编译信息输出窗口<br><strong>9.Error List Window：</strong>错误列表窗口</p><p><font face="黑体" color="green" size="5">调试模式增加菜单</font><br><strong>10.Command Window：</strong>命令显示窗口<br><strong>11.Disassembly Window：</strong>反汇编窗口<br><strong>12.Symbols Window：</strong>模块窗口<br><strong>13.Registers Window：</strong>寄存器窗口<br><strong>14.Call Stack Window：</strong>被调用函数堆栈窗口<br><strong>15.Watch Windows：</strong>查看（变量）窗口<br><strong>16.Memory Windows：</strong>内存窗口<br><strong>17.Serial Windows：</strong>串行UART窗口<br><strong>18.Analysis Windows：</strong>逻辑分析仪窗口<br><strong>19.Trace：</strong>跟踪窗口<br><strong>20.System Viewer：</strong>系统（外围IO、USART、TIM等）窗口<br><strong>21.Toolbox Window：</strong>工具箱窗口<br><strong>22.Periodic Window Update：</strong>窗口周期更新选择</p><table><br><strong>常规View视图</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/5View%E8%A7%86%E5%9B%BE%EF%BC%88%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%EF%BC%89.gif?raw=true"><br></table><h1 id="五、Project工程"><a href="#五、Project工程" class="headerlink" title="五、Project工程"></a>五、Project工程</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/6.Project%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><p>Project菜单<strong>只能在编辑模式下才能使用</strong>，调试模式为灰色不能用。子菜单里面许多内容在后面会详细讲述。</p><p><strong>1.New μVision Project：</strong>新建工程（单工程）<br><strong>2.New Multi-Project Workspace：</strong>新建工作空间<br><strong>3.Open Project：</strong>打开工程<br><strong>4.Close Project：</strong>关闭工程<br><strong>5.Export：</strong>导出（工程）<br><strong>6.Manage：</strong>管理（工程）<br><strong>7.Select Device for Target：</strong>选择工程目标<br><strong>8.Remove item：</strong>移除目标<br><strong>9.Options for Target：</strong>工程目标选项配置 Alt + F7<br><strong>10.Clean Targets：</strong>清除工程<br><strong>11.Build Target：</strong>编译工程目标 F7<br><strong>12.Rebuild all Target files：</strong>重新编译所有目标文件<br><strong>13.Batch Build：</strong>分批编译（多工程编译）<br><strong>14.Translate：</strong>编译当前活动文件 Ctrl + F7<br><strong>15.Stop Build：</strong>停止编译（正在编译时有效）</p><h1 id="六、Flash编程"><a href="#六、Flash编程" class="headerlink" title="六、Flash编程"></a>六、Flash编程</h1><table><br><img align="left" width="150" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/7.Flash%E7%BC%96%E7%A8%8B.png?raw=true"><br></table><p>Flash菜单只有在编辑模式下可以使用，比较简答</p><p><strong>1.Download：</strong>下载程序 F8<br><strong>2.Earse：</strong>擦除芯片FLASH<br><strong>3.Configure Flash Tools：</strong>配置FLASH工具（打开目标对话框选项）</p><h1 id="七、Debug调试"><a href="#七、Debug调试" class="headerlink" title="七、Debug调试"></a>七、Debug调试</h1><table><br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/8.Debug%E8%B0%83%E8%AF%95.png?raw=true"><br></table><p>Debug菜单在两种模式下差异很大，该菜单<strong>基本上用于调试模式</strong>。</p><p><strong>1.Start/Stop Debug Sesion：</strong>开始/停止调试 Ctrl + F5<br><strong>2.Reset CUP：</strong>复位CPU<br><strong>3.Run：</strong>全速运行 F5<br><strong>4.Stop：</strong>停止运行<br><strong>5.Step：</strong>单步调试（进入函数） F11<br><strong>6.Step Over：</strong>逐步调试（跳过函数） F10<br><strong>7.Step Out：</strong>跳出调试（跳出函数） Ctrl + F11<br><strong>8.Run to Cursor Line：</strong>运行到光标处 Ctrl + F10<br><strong>9.Show Next Statemt：</strong>显示正在执行的代码行<br><strong>10.Breakpoints：</strong>查看工程中所有的断点 Ctrl + B<br><strong>11.Insert/Remove Breakpoint：</strong>插入/移除断点 F9<br><strong>12.Enable/Disable Breakpoint：</strong>使能/失能断点 Ctrl + F9<br><strong>13.Disable All Breakpoint：</strong>失能所有断点 Ctrl + Shift + F9<br><strong>14.Kill All Breakpoint：</strong>取消所有断点<br><strong>15.OS Support：</strong>系统支持（打开子菜单访问事件查看器和RTX任务和系统信息）<br><strong>16.Execution Profiling：</strong>执行分析<br><strong>17.Memory Map：</strong>内存映射<br><strong>18.Inline Assembly：</strong>内联汇编<br><strong>19.Function Editor：</strong>函数编辑器<br><strong>20.Debug Setting：</strong>调试设置</p><h1 id="八、Peripherals外设"><a href="#八、Peripherals外设" class="headerlink" title="八、Peripherals外设"></a>八、Peripherals外设</h1><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/9.Peripherals%E5%A4%96%E8%AE%BE.png?raw=true"><br></table><p>Peripherals菜单<strong>只能在调试模式</strong>下使用。Peripherals外设直白的意思就是查看这些寄存器的值。</p><p><strong>1.System Viewer：</strong>查看系统外设<br><strong>2.Core Peripherals：</strong>内核外设</p><h1 id="九、Tools工具"><a href="#九、Tools工具" class="headerlink" title="九、Tools工具"></a>九、Tools工具</h1><table><br><img align="left" width="150" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/10.Tools%E5%B7%A5%E5%85%B7.png?raw=true"><br></table><p>Tools菜单在两种模式下差不多，复杂且不常用，只简述。</p><p><strong>1.Setup PC-Lint：</strong>配置PC-Lint<br><strong>2.Lint：</strong>PC-Lint运行在当前编辑器文件<br><strong>3.Lint all C Source Files：</strong>在您的项目中运行PC-Line C源文件<br><strong>4.Configure Merge Tool：</strong>配置合并工具帮助迁移RTE软件组件文件的特定于应用程序的设置<br><strong>5.Customize Tools Menu：</strong>自定义工具菜单。</p><p>这里相对来说常用一点的就第5项“Customize Tools Menu”，可以自定义工具菜单。比如：我之前在公众号分享过一篇文章<a href="https://mp.weixin.qq.com/s/pqjeq06EWahTxGZHwrdHNg" target="_blank" rel="noopener">《MDK-ARM代码格式化插件AStyle》</a>，就是添加一个自定义的工具菜单。</p><h1 id="十、SVCS版本管理"><a href="#十、SVCS版本管理" class="headerlink" title="十、SVCS版本管理"></a>十、SVCS版本管理</h1><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/11.SVCS%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.png?raw=true"><br></table><p><strong>1.Configure Software Version Control：</strong>配置软件版本控制</p><p>我们一般都不使用这个自带的版本控制系统，较常用的版本管理软件“TortoiseSVN”和“Git”。</p><h1 id="十一、Window窗口"><a href="#十一、Window窗口" class="headerlink" title="十一、Window窗口"></a>十一、Window窗口</h1><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/12.Window%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><p>Window菜单在两种模式下差不多，Window窗口菜单要和前面View视图菜单区别开来。</p><p><strong>1.Reset View to Defaults：</strong>重置窗口布局（µVision默认的Look &amp; Feel)<br><strong>2.Split：</strong>活动编辑器文件分割成两个水平或垂直窗格。<br><strong>3.Close All：</strong>关闭所有打开的编辑器。</p><table><br><strong>重置窗口布局</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/13.%E5%A4%8D%E4%BD%8D%E7%AA%97%E5%8F%A3.gif?raw=true"><br></table><h1 id="十二、Help帮助"><a href="#十二、Help帮助" class="headerlink" title="十二、Help帮助"></a>十二、Help帮助</h1><table><br><img align="left" width="300" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/14.Help%E5%B8%AE%E5%8A%A9.png?raw=true"><br></table><p>我写的这系列文章大多数也是参考这里Help帮助菜单，只是这个帮助文档都是英文的。当然，很多内容也是根据我的经验而写成。建议大家有不懂的地方多参考这里的帮助文档。</p><p><strong>1.µVision Help：</strong>打开帮助文档<br><strong>2.Open Books Window：</strong>打开帮助书籍<br><strong>3.Simulated Peripherals for object：</strong>关于外设仿真信息<br><strong>4.Contact Support：</strong>联络支持<br><strong>5.About µVision：</strong>关于</p><h1 id="十三、说明"><a href="#十三、说明" class="headerlink" title="十三、说明"></a>十三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="十四、最后"><a href="#十四、最后" class="headerlink" title="十四、最后"></a>十四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;Keil菜单如下图所示，本文以Keil MDK-ARM为例，Keil C51菜单的大部分内容一样，因此也适用于Keil C51。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0/1.%E8%8F%9C%E5%8D%95%E6%80%BB%E8%A7%88.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;Keil有些菜单在&lt;strong&gt;编辑模式和调试模式&lt;/strong&gt;下可能有所不同，也就是说在不同模式下有些功能不能使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：在上一篇教程&lt;a href=&quot;https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html&quot;&gt;《Keil系列教程03_主窗口和工具栏详细说明》&lt;/a&gt;中讲述的工具栏按钮属于各菜单的子菜单内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程03_主窗口和工具栏详细说明</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程03_主窗口和工具栏详细说明.html</id>
    <published>2018-11-05T09:00:00.000Z</published>
    <updated>2018-11-07T09:11:21.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文先让大家简单认识一下Keil的主窗口界面，然后再进一步<strong>认识Keil的文件、编译和调试工具栏</strong>。</p><p>　　<strong>Toolbars工具栏</strong>就是在菜单下面的两行快捷图标按钮，这些快捷按钮之所以在工具栏里面，在于<strong>它们使用的频率较高</strong>。比如保存按钮、编译按钮、下载按钮等。</p><p>　　本文讲述的Toolbars工具栏和大部分上位机软件的工具栏类似，就是一些常用的快捷按钮。</p><p>　　本文以Keil MDK-ARM为例，因Keil C51的工具栏和MDK-ARM类似。因此，本文大部分内容也适用于Keil C51。</p><a id="more"></a><h1 id="二、主窗口界面"><a href="#二、主窗口界面" class="headerlink" title="二、主窗口界面"></a>二、主窗口界面</h1><p>为了让大家对Keil集成开发环境有一个大概的了解，这里先概述一下Keil 默认编辑状态（模式）主窗口界面下各个窗口的含义。</p><p><strong>说明</strong>：Keil主窗口界面在<strong>编辑状态与调试状态</strong>下存在一定差异，本章节主要基于【编辑状态】进行简单的概述，里面详细的内容、以及调试状态下的窗口在该系列教材后续会逐步讲述。</p><p>在编辑模式下，一般会出现类似下图的主窗口界面，如下图：</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/1.%E4%B8%BB%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p><strong>1.Menu Bar菜单栏</strong><br>相信大家对菜单栏都不陌生，包含<strong>File文件、 Edit编辑、 View视图、 Project工程、 Help帮助</strong>等这样的一栏窗口。</p><p>菜单栏是 Keil 比较重要的一个窗口，几乎 Keil 所有操作的内容都包含在里面。同时。在<strong>编辑状态和调试状态</strong>下存在一些不同，后续会详细讲述。</p><p><strong>2.Tool Bar工具栏</strong><br>该窗口是一些常见的快捷按钮，本文<strong>下面会重点讲述</strong>。</p><p><strong>3.Project工程窗口</strong><br>一个工作空间可以包含多个工程，该窗口主要<strong>显示工作空间下面工程项目的内容</strong>（工程、 组、 源代码文件等）。 后续也会讲述新建多工程。</p><p><strong>4.Edit Window编辑窗口</strong><br>该窗口不用多解释，就是我们平时编辑代码的窗口。</p><p><strong>5.Message Window信息窗口</strong><br>该窗口包括编译信息、调试信息、查找信息等一些信息的窗口。</p><p><strong>6.Status Bar状态栏</strong><br>该窗口包含就绪状态、错误警告数量、光标行列、字符编码、键盘Num锁定等一些状态信息。</p><h1 id="三、工具栏"><a href="#三、工具栏" class="headerlink" title="三、工具栏"></a>三、工具栏</h1><p>Keil的Toolbars工具栏共有三种：<strong>File Toolbar文件工具栏、 Build Toolbar编译工具栏、 Debug Toolbar调试工具栏</strong>。</p><p>在两种状态（模式）下呈现不同工具栏。在<strong>编辑状态</strong>时，呈现文件、编译两种工具栏；在<strong>调试状态</strong>时，呈现文件、调试两种工具栏。</p><h2 id="3-1-两种状态下的工具栏"><a href="#3-1-两种状态下的工具栏" class="headerlink" title="3.1 两种状态下的工具栏"></a>3.1 两种状态下的工具栏</h2><table><br><strong>1.编辑状态</strong>包含：File Toolbar文件工具栏、 Build Toolbar编译工具栏；<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/2.%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true"><br></table><table><br><strong>2.调试状态包含</strong>：File Toolbar文件工具栏、 Debug Toolbar调试工具栏；<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/3.%E8%B0%83%E8%AF%95%E8%BE%91%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%85%B7%E6%A0%8F.png?raw=true"><br></table><h2 id="3-2-工具栏详细内容"><a href="#3-2-工具栏详细内容" class="headerlink" title="3.2 工具栏详细内容"></a>3.2 工具栏详细内容</h2><p>如下图，将编辑状态和调试状态的工具栏按钮分为12类，下面将这12类工具栏按钮依次进行详细说明。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/4.%E5%B7%A5%E5%85%B7%E6%A0%8F%E5%86%85%E5%AE%B9.png?raw=true"><br></table><h3 id="1-文件操作类按钮"><a href="#1-文件操作类按钮" class="headerlink" title="1.文件操作类按钮"></a>1.文件操作类按钮</h3><p>这一类按钮可以说在大部分上位机软件都可见，比较简单，不过多描述。<br><img align="left" width="190" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/5.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%B1%BB.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>New…</td><td>新建文件</td><td>Ctrl + N</td></tr><tr><td>Open</td><td>打开</td><td>Ctrl + O</td></tr><tr><td>Save</td><td>保存当前文件</td><td>Ctrl + S</td></tr><tr><td>Save All</td><td>保存所有文件</td><td>–</td></tr><tr><td>Cut</td><td>剪切</td><td>Ctrl + X</td></tr><tr><td>Copy</td><td>复制</td><td>Ctrl + C</td></tr><tr><td>Paste</td><td>粘贴</td><td>Ctrl + V</td></tr></tbody></table><h3 id="2-文件编辑跳转类按钮"><a href="#2-文件编辑跳转类按钮" class="headerlink" title="2.文件编辑跳转类按钮"></a>2.文件编辑跳转类按钮</h3><p>撤销恢复按钮比较常用，可以使用快捷键代替。<br><img align="left" width="120" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/6.%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91%E8%B7%B3%E8%BD%AC%E7%B1%BB%E6%8C%89%E9%92%AE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Undo</td><td>撤销编辑</td><td>Ctrl + Z</td></tr><tr><td>Redo</td><td>恢复编辑</td><td>Ctrl + Y</td></tr><tr><td>Navigate Backwards</td><td>跳转到上一步</td><td>Ctrl + -</td></tr><tr><td>Navigate Forwards</td><td>跳转到下一步</td><td>Ctrl + Shift + -</td></tr></tbody></table><table><br><strong>撤销恢复</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/7.%E6%92%A4%E9%94%80%E6%81%A2%E5%A4%8D.gif?raw=true"><br></table><table><br><strong>跳转</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/8.%E8%B7%B3%E8%BD%AC.gif?raw=true"><br></table><h3 id="3-书签类按钮"><a href="#3-书签类按钮" class="headerlink" title="3.书签类按钮"></a>3.书签类按钮</h3><p>书签的作用主要是标记位置方便查看。<br><img align="left" width="120" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/9.%E4%B9%A6%E7%AD%BE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Insert/Remove Bookmark</td><td>插入/移除书签</td><td>Ctrl + F2</td></tr><tr><td>Go to Next Bookmark</td><td>跳转到上一个书签</td><td>Shift + F2</td></tr><tr><td>Go to Previous Bookmark</td><td>跳转到下一个书签</td><td>F2</td></tr><tr><td>Clear All Bookmarks</td><td>清空所有书签</td><td>Ctrl + Shift + F2</td></tr></tbody></table><table><br><strong>书签</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/10.%E4%B9%A6%E7%AD%BE.gif?raw=true"><br></table><h3 id="4-选中行操作类按钮"><a href="#4-选中行操作类按钮" class="headerlink" title="4.选中行操作类按钮"></a>4.选中行操作类按钮</h3><p>选中行操作的作用主要就是为了使选中行缩进、注释。<br><img align="left" width="120" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/11.%E9%80%89%E4%B8%AD%E8%A1%8C%E6%93%8D%E4%BD%9C.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Indent Selection</td><td>插入缩进</td><td>Tab</td></tr><tr><td>Unindent Selection</td><td>取消缩进</td><td>Shift + Tab</td></tr><tr><td>Comment Selection</td><td>确定注释</td><td>–</td></tr><tr><td>Uncomment Selection</td><td>取消注释</td><td>–</td></tr></tbody></table><table><br><strong>缩进</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/12.%E7%BC%A9%E8%BF%9B.gif?raw=true"><br></table><table><br><strong>注释</strong>动画效果<br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/13.%E6%B3%A8%E9%87%8A.gif?raw=true"><br></table><h3 id="5-查找文本类按钮"><a href="#5-查找文本类按钮" class="headerlink" title="5.查找文本类按钮"></a>5.查找文本类按钮</h3><p>查找文本意思就是搜索，比较简单，也比较常用。<br><img align="left" width="240" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/14.%E6%9F%A5%E6%89%BE%E6%96%87%E6%9C%AC.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Find in Files</td><td>在文件中查找文本</td><td>Ctrl + Shift + F</td></tr><tr><td>–</td><td>查找文本输入框</td><td>–</td></tr><tr><td>Find</td><td>查找单个文本</td><td>Ctrl + F</td></tr><tr><td>Incremental Find</td><td>逐个查找文本</td><td>Ctrl + I</td></tr></tbody></table><h3 id="6-仿真类按钮"><a href="#6-仿真类按钮" class="headerlink" title="6.仿真类按钮"></a>6.仿真类按钮</h3><p>这些按钮针对仿真时，具有断电标记作用。<br><img align="left" width="150" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/15.%E5%85%B3%E4%BA%8E%E4%BB%BF%E7%9C%9F.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Start/Stop Debug Session</td><td>开始/停止调试</td><td>Ctrl + F5</td></tr><tr><td>Insert/Remove Breakpoint</td><td>插入/移除断点</td><td>F9</td></tr><tr><td>Enable/Disable Breakpoint</td><td>使能/失能断点</td><td>Ctrl + F9</td></tr><tr><td>Disable All Breakpoints</td><td>失能所有断点</td><td>–</td></tr><tr><td>Kill All Breakpoints</td><td>取消所有断点</td><td>Ctrl + Shift + F9</td></tr></tbody></table><h3 id="7-窗口配置类按钮"><a href="#7-窗口配置类按钮" class="headerlink" title="7.窗口配置类按钮"></a>7.窗口配置类按钮</h3><p><img align="left" width="100" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/16.%E7%AA%97%E5%8F%A3%E9%85%8D%E7%BD%AE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Project Windows</td><td>工程窗口</td><td>–</td></tr><tr><td>Configuration</td><td>配置</td><td>–</td></tr></tbody></table><p>工程窗口按钮支持快速打开/关闭某些窗口，和View视图菜单功能一样，工程窗口内容下图：</p><table><br><img align="left" width="200" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/17.%E5%B7%A5%E7%A8%8B%E7%AA%97%E5%8F%A3%E5%86%85%E5%AE%B9.png?raw=true"><br></table><h3 id="8-编译类按钮"><a href="#8-编译类按钮" class="headerlink" title="8.编译类按钮"></a>8.编译类按钮</h3><p>这些按钮使用频率较高，特别是编译目标F7快捷键。<br><img align="left" width="165" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/18.%E5%85%B3%E4%BA%8E%E7%BC%96%E8%AF%91.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Translate</td><td>编译当前文件</td><td>Ctrl + F7</td></tr><tr><td>Build Target</td><td>编译工程目标</td><td>F7</td></tr><tr><td>Rebuild all Target files</td><td>重新编译所有目标文件</td><td>–</td></tr><tr><td>Stop Build</td><td>停止编译（正在编译时有效）</td><td>–</td></tr><tr><td>Batch Build</td><td>分批编译(多工程)</td><td>–</td></tr><tr><td>Download</td><td>下载</td><td>F8</td></tr></tbody></table><h3 id="9-工程选项类按钮"><a href="#9-工程选项类按钮" class="headerlink" title="9.工程选项类按钮"></a>9.工程选项类按钮</h3><p><img align="left" width="190" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/19.%E5%B7%A5%E7%A8%8B%E9%80%89%E9%A1%B9.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>–</td><td>工程目标选择框</td><td>–</td></tr><tr><td>Options for Target</td><td>工程目标选项(配置)</td><td>Alt + F7</td></tr></tbody></table><p>一个工程下面可以建立多个目标，<strong>工程目标选择框的目标（STM32F103ZE）也就是当前所选中（使用）的工程目标</strong>（后期会讲述多目标）。</p><p>Options for Target即对选中目标（STM32F103ZE）的配置。</p><h3 id="10-工程项目管理类按钮"><a href="#10-工程项目管理类按钮" class="headerlink" title="10.工程项目管理类按钮"></a>10.工程项目管理类按钮</h3><p><img align="left" width="135" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/20.%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Manage Project Items</td><td>单工程管理</td><td>–</td></tr><tr><td>Manage Multi-Project</td><td>多工程管理</td><td>–</td></tr><tr><td>Manage Run-Time</td><td>管理运行时环境</td><td>–</td></tr><tr><td>Select Software Packs</td><td>选择软件包</td><td>–</td></tr><tr><td>Pack Installer</td><td>软件包安装</td><td>–</td></tr></tbody></table><h3 id="11-调试按钮"><a href="#11-调试按钮" class="headerlink" title="11.调试按钮"></a>11.调试按钮</h3><p><img align="left" width="230" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/21.%E8%B0%83%E8%AF%95%E6%8C%89%E9%92%AE.png?raw=true"></p><table><thead><tr><th>名称</th><th>描述</th><th>快捷键</th></tr></thead><tbody><tr><td>Reset</td><td>复位</td><td>–</td></tr><tr><td>Run</td><td>全速运行</td><td>F5</td></tr><tr><td>Stop</td><td>停止运行</td><td>–</td></tr><tr><td>Step</td><td>单步运行</td><td>F11</td></tr><tr><td>Step Over</td><td>逐步运行</td><td>F10</td></tr><tr><td>Step Out</td><td>跳出运行</td><td>Ctrl + F11</td></tr><tr><td>Run to Cursor Line</td><td>运行到光标行</td><td>Ctrl + F10</td></tr><tr><td>Show Next Statement</td><td>跳转到暂停行</td><td>-</td></tr></tbody></table><h3 id="12-调试窗口开关按钮"><a href="#12-调试窗口开关按钮" class="headerlink" title="12.调试窗口开关按钮"></a>12.调试窗口开关按钮</h3><p>调试视图窗口开关按钮这里就不说了，<strong>快捷按钮内容就是View视图菜单下的内容</strong>（如下图）。在后面《菜单》、《调试》还会继续讲述。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/23.%E8%B0%83%E8%AF%95%E8%A7%86%E5%9B%BE%E7%AA%97%E5%8F%A3.png?raw=true"><br></table><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文先让大家简单认识一下Keil的主窗口界面，然后再进一步&lt;strong&gt;认识Keil的文件、编译和调试工具栏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Toolbars工具栏&lt;/strong&gt;就是在菜单下面的两行快捷图标按钮，这些快捷按钮之所以在工具栏里面，在于&lt;strong&gt;它们使用的频率较高&lt;/strong&gt;。比如保存按钮、编译按钮、下载按钮等。&lt;/p&gt;
&lt;p&gt;　　本文讲述的Toolbars工具栏和大部分上位机软件的工具栏类似，就是一些常用的快捷按钮。&lt;/p&gt;
&lt;p&gt;　　本文以Keil MDK-ARM为例，因Keil C51的工具栏和MDK-ARM类似。因此，本文大部分内容也适用于Keil C51。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程12_对象字典编辑器操作说明</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程12_对象字典编辑器操作说明.html</id>
    <published>2018-11-05T05:00:00.000Z</published>
    <updated>2018-11-05T09:41:09.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　教程前面文章讲述了<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《对象字典生成工具环境搭建》</a>，因为对象字典在CANOpen中的分量比较重。所以，关于对象字典的内容，及对象字典编辑工具也需要我们深入了解。</p><p>　　对象字典编辑器这个工具的操作并不难，这里需要强调两点：<strong>1.先了解</strong><a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html">「CANOpen通信接口」</a>相关知识； <strong>2.理论结合实践</strong>，只看不动手实践操作，想要掌握这些知识就很难。</p><p>　　本文讲述的内容在该教程前一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html">《CanFestival_3架构》</a>中“开发一个新节点”就有提到。本文将更加全面讲解这部分内容。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、对象字典编辑器操作步骤"><a href="#二、对象字典编辑器操作步骤" class="headerlink" title="二、对象字典编辑器操作步骤"></a>二、对象字典编辑器操作步骤</h1><p>依然，针对初学的朋友，讲述的非常基础，希望初学的朋友先阅读该教程前面的文章。我们基于Windows的GUI图形化界面为例，</p><h2 id="1-下载并搭建好环境"><a href="#1-下载并搭建好环境" class="headerlink" title="1.下载并搭建好环境"></a>1.下载并搭建好环境</h2><p>请参看<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《对象字典生成工具环境搭建》</a>！</p><h2 id="2-运行对象字典编辑器"><a href="#2-运行对象字典编辑器" class="headerlink" title="2.运行对象字典编辑器"></a>2.运行对象字典编辑器</h2><p>保证环境搭建没有问题，双击objdictgen目录下的objdictedit.py（或进入该目录，以命令方式运行）：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/1.%E6%88%90%E5%8A%9F%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8.png?raw=true"><br></table><h2 id="3-创建一个新节点"><a href="#3-创建一个新节点" class="headerlink" title="3.创建一个新节点"></a>3.创建一个新节点</h2><p><strong>文件 -&gt; 新建</strong>，出现创建节点界面，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/2.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E8%8A%82%E7%82%B9.png?raw=true"><br></table><p><strong>A.类型</strong>：可选主、从节点；<br><strong>B.名字</strong>：自己定义节点名称；<br><strong>C.Profile</strong>：配置，如DS401等；<br><strong>D.网络管理</strong>：是否选择相关网络管理（请先了解网络管理）；</p><p>初学者可以从基础学起，如上图最简单方式配置，这里以新建从节点“SlaveNode”为例。</p><p><strong>提示</strong>：这里SlaveNode是从节点的名字，是<strong>生成对象字典（代码）的名字</strong>，和保存的名字有区别。</p><h2 id="4-配置对象字典"><a href="#4-配置对象字典" class="headerlink" title="4.配置对象字典"></a>4.配置对象字典</h2><p>创建节点确认后，会进入对象字典配置界面。此时，你会发现里面内容就是之前讲述的对象字典索引，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/3.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%B4%A2%E5%BC%95.png?raw=true"><br></table><p>对象字典内容很多，大概就分为如上图几类。图形化界面，配置方式可以说很简单。也就是对字典的16 位索引和 8 位子索引进行配置。</p><p>当然，我这里不会一一讲述每项内容，后面会结合例程，针对性讲述相关内容。配置方法大致如下三步骤：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B12_%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/4.%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BB%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><h2 id="5-保存对象字典"><a href="#5-保存对象字典" class="headerlink" title="5.保存对象字典"></a>5.保存对象字典</h2><p><strong>文件 -&gt; 保存，输入对象字典（工程）名称</strong>。</p><p>我们这里的名称，我把叫做其“工程名称”，建议与前面创建节点名字一样（当然，这两个名字意义不一样，所以也可以不一样）。</p><p>这个对象字典（工程）是用于后面升级或者更改使用，所以建议保存好。</p><h2 id="6-生产对象字典"><a href="#6-生产对象字典" class="headerlink" title="6.生产对象字典"></a>6.生产对象字典</h2><p><strong>文件 -&gt; 建立词典，选择保存的路径</strong>。</p><p>此时，就会看到两个源代码文件：SlaveNode.c和SlaveNode.h文件。这两个文件就是我们最终需要的对象字典源文件。</p><h2 id="7-其他操作"><a href="#7-其他操作" class="headerlink" title="7.其他操作"></a>7.其他操作</h2><p><strong>A.文件 -&gt; 导出成EDS文件</strong>，这里可以到处EDS用于其他对象编辑工具使用；<br><strong>B.帮助</strong>，关于这个工具很多内容，都可以通过帮助菜单找到答案。</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　教程前面文章讲述了&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html&quot;&gt;《对象字典生成工具环境搭建》&lt;/a&gt;，因为对象字典在CANOpen中的分量比较重。所以，关于对象字典的内容，及对象字典编辑工具也需要我们深入了解。&lt;/p&gt;
&lt;p&gt;　　对象字典编辑器这个工具的操作并不难，这里需要强调两点：&lt;strong&gt;1.先了解&lt;/strong&gt;&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html&quot;&gt;「CANOpen通信接口」&lt;/a&gt;相关知识； &lt;strong&gt;2.理论结合实践&lt;/strong&gt;，只看不动手实践操作，想要掌握这些知识就很难。&lt;/p&gt;
&lt;p&gt;　　本文讲述的内容在该教程前一篇文章&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html&quot;&gt;《CanFestival_3架构》&lt;/a&gt;中“开发一个新节点”就有提到。本文将更加全面讲解这部分内容。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程02_新建基础软件工程</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程02_新建基础软件工程.html</id>
    <published>2018-11-01T07:00:00.000Z</published>
    <updated>2018-11-01T07:33:26.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　目前Keil的四款产品（软件）：<strong>MDK-ARM、C51、C251、C166</strong>，在用法上极为相似，包括本文讲述的新建软件工程。</p><p>　　本文以目前（2018年10月）<strong>最新Keil MDK-ARM V5.26、STM32F103标准外设库为例</strong>，来给大家讲述新建软件工程的具体步骤。</p><p>　　本文讲述的新建软件工程，只是最基础的软件工程（一个工程，一个目标）。其中只修改了必要的配置，大部分配置默认。</p><p>　　如果你是Keil C51、或者其它MCU器件，本文也适用，只是针对MCU器件有略微差异。</p><a id="more"></a><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><p>俗话说“磨刀不误砍柴工”，做好了准备工作，后面新建基础软件工程的工作就很容易实现了。</p><p>这里针对STM32会下载“标准外设库”这个准备工作，如果你是C51，或者不用库，这个准备工作就可略过。</p><h2 id="2-1-下载安装Keil工具"><a href="#2-1-下载安装Keil工具" class="headerlink" title="2.1 下载安装Keil工具"></a>2.1 下载安装Keil工具</h2><p>本文必备工具，详情请参看该系列教程上一篇文章<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C.html">《Keil系列教程01_Keil介绍、下载、安装与注册》</a>。</p><h2 id="2-2-下载STM32标准外设库"><a href="#2-2-下载STM32标准外设库" class="headerlink" title="2.2 下载STM32标准外设库"></a>2.2 下载STM32标准外设库</h2><p>这一节是准备源代码（库），如果你使用C51、寄存器开发，本节内容可以略过。下面提供官方下载链接，嫌麻烦的朋友可以在我百度网盘下载。</p><p><strong>A.官网下载</strong><br><a href="http://www.st.com/content/st_com/en/products/embedded-software/mcus-embedded-software/stm32-embedded-software.html?querycriteria=productId=SC961" target="_blank" rel="noopener">http://www.st.com/content/st_com/en/products/embedded-software/mcus-embedded-software/stm32-embedded-software.html?querycriteria=productId=SC961</a></p><p>根据芯片型号下载对应的标准外设库（如芯片为STM32F103ZE，则下载对应的<strong>STM32F10x_StdPeriph_Lib</strong>），如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/1.ST%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E4%B8%8B%E8%BD%BD.png?raw=true"><br></table><p><strong>B.百度网盘</strong><br><a href="http://pan.baidu.com/s/1qYbBKMK" target="_blank" rel="noopener">http://pan.baidu.com/s/1qYbBKMK</a></p><p><strong>提示</strong>：如果以上链接失效，可以关注微信公众号，获取更新链接。</p><h2 id="2-3-整理工程文件夹"><a href="#2-3-整理工程文件夹" class="headerlink" title="2.3 整理工程文件夹"></a>2.3 整理工程文件夹</h2><p>这一小节的内容可根据自己习惯来整理，我整理的文件及文件夹结构是按照常规的整理方式。你如果觉得合理，可以引用；</p><p>首先建立一个存放工程文件的总文件夹：<strong>STM32F103ZE（Keil）_Demo</strong></p><p><strong>A.提取ST标准外设库文件</strong><br>ST标准外设库里面源代码文件我们只需要使用部分文件。因此，提取需要使用的文件及文件夹到我们的工程中。</p><p>解压“STM32F10x_StdPeriph_Lib”，可以看到在主目录下面有四个文件夹：<br><strong>_htmresc</strong>：图片文件夹（不提取）<br><strong>Libraries</strong>：库文件夹（<strong>提取大部分</strong>）<br><strong>Project</strong>：  示例工程（<strong>提取少部分</strong>）<br><strong>Utilities</strong>： 公共代码、评估板代码（不提取）</p><p>我们需要使用Libraries和Project目录下的文件，但也有部分不用。因此，我们需要删除不用的文件。（具体保留了哪些，可以下载我提供例程查看）</p><p><strong>B.新建文件和文件夹</strong><br>除了上面提取的文件之外，我们需要建立存放自己代码的文件和文件夹。我这里主要新建三个文件夹：<br><strong>App</strong>: 应用部分代码<br><strong>Bsp</strong>: 底层部分代码<br><strong>Doc</strong>: 说明文档</p><p>在新建的文件夹下面还需要新建自己的源文件，源文件里面添加源代码。我们提供的Demo工程，实现的一个LED闪烁的功能。（这里不描述）。</p><p>上面两个步骤完成之后，我们就可以看到在“STM32F103ZE（Keil）_Demo”下面整理的文件夹：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2.%E5%B7%A5%E7%A8%8B%E4%B8%BB%E7%9B%AE%E5%BD%95.png?raw=true"><br></table><p>至此，准备工作算完成了，上面提取的文件、新建的文件里面具体的内容请下载Demo工程查看。</p><h1 id="三、新建软件工程"><a href="#三、新建软件工程" class="headerlink" title="三、新建软件工程"></a>三、新建软件工程</h1><p>新建一个简单、基础的软件工程大概需要有三个步骤：<strong>建立工程、添加文件和配置工程</strong>。</p><p>上面的准备工作做好之后，就可新建自己的软件工程了，下面将一步一步讲述从零开始新建一个软件工程的详细过程。</p><h2 id="3-1-建立工程"><a href="#3-1-建立工程" class="headerlink" title="3.1 建立工程"></a>3.1 建立工程</h2><p>建立工程的步骤是基础，也比较简单，下面一步一步教大家新建一个空的工程。</p><table><br><strong>A.打开软件,新建立工程</strong>（Project -&gt; New uVision Project）<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/3.%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><table><br><strong>B.选择保存路径，保存名称</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/4.%E4%BF%9D%E5%AD%98%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6.png?raw=true"><br></table><table><br><strong>C.选择芯片型号</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/5.%E9%80%89%E4%B8%AD%E8%8A%AF%E7%89%87%E5%9E%8B%E5%8F%B7.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/6.%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83.png?raw=true"><br></table><table><br><strong>D.基础工程</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/7.%E7%A9%BA%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><p>一个基础的工程就完成了，但还不够，还需要下面的步骤。</p><h2 id="3-2-添加文件"><a href="#3-2-添加文件" class="headerlink" title="3.2 添加文件"></a>3.2 添加文件</h2><p>准确的来说，应该是<strong>添加组（文件夹）和添加文件</strong>。直接的说，就是将你自己的源代码（前面提取的库、新建的文件等）添加到工程中。</p><p>这里的工程项目管理可根据自己的想法来定义（类似于自己分类、命名文件夹和文件），我这里按照常规的方式进行管理项目。</p><p>点击<strong>“项目管理”快捷按钮</strong>，或者Project -&gt; Manage -&gt; Project Items 进入“项目管理”界面。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/8.%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%8C%89%E9%92%AE.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/9.%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%AF%B4%E6%98%8E.png?raw=true"><br></table><p>·<br>·</p><table><br>一步一步添加，直到最后完成<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/10.%E6%B7%BB%E5%8A%A0%E7%BB%84%E5%92%8C%E6%96%87%E4%BB%B6%EF%BC%88%E5%8A%A8%E7%94%BB%EF%BC%89.gif?raw=true"><br></table><br>·<br>·<br><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/11.%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%AE%8C%E6%88%90.png?raw=true"><br></table><h2 id="3-3-配置工程"><a href="#3-3-配置工程" class="headerlink" title="3.3 配置工程"></a>3.3 配置工程</h2><p>配置工程对于初学者来说，大部分内容只需要默认即可，这里只讲述几个常见的配置，能满足基本的功能。</p><table><br><strong>A.点击“工程目标选项”进入配置</strong>（或Project -&gt; Options for Target）<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/12.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E6%8C%89%E9%92%AE%E5%BF%AB%E6%8D%B7%E6%8C%89%E9%92%AE.png?raw=true"><br></table><p><strong>B.输出Hex文件</strong><br>很多朋友初学的朋友都会问怎么输出Hex，只需要勾选上【Project -&gt; Options for Target -&gt; Output】“Create HEX File”即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/13.%E8%BE%93%E5%87%BAHEX.png?raw=true"><br></table><p><strong>C.C/C++配置</strong><br>这个选项的配置参数比较多，对于大型项目来说比较重要，但对于初学者来说，只需要简单配置两项就行。</p><p><strong>第一处配置—预定义：</strong><br>【这里以STM32F103大容量芯片为例】</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/14.%E9%A2%84%E5%AE%9A%E4%B9%89.png?raw=true"><br></table><p>预定义STM32F10X_HD，等同于#define STM32F10X_HD.</p><p>有些工程还预定义USE_STDPERIPH_DRIVER。由于都是使用“标准外设库”，我个人习惯把USE_STDPERIPH_DRIVER，定义在stm32f10x.h文件里面，所以在这里就看不到我定义的这一项了。</p><p><strong>第二处配置—包含路径：</strong><br>由于我们前面工程中有很多文件夹，因此需要添加对应的路径，这样编译器才能找得到。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/15.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E6%8C%89%E9%92%AE.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/16.%E7%82%B9%E5%87%BB%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84.png?raw=true"><br></table><p>·<br>·</p><table><br>一步一步添加，直到最后完成<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/17.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%EF%BC%88%E5%8A%A8%E7%94%BB%EF%BC%89.gif?raw=true"><br></table><br>·<br>·<br><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/18.%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E5%AE%8C%E6%88%90.png?raw=true"><br></table><p><strong>D.选择下载调试工具</strong><br>这个选项根据自己的下载调试器来选择（比如：ST-Link）</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/19.%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BD%E5%99%A8.png?raw=true"><br></table><p><strong>E.下载复位并运行设置</strong><br>有些初学的朋友说“为什么我下载程序之后，需要按一下复位键才能运行？”，只需要在工程中勾选上“Reset and Run”就可实现，下载完程序马上运行了。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/20.%E5%A4%8D%E4%BD%8D%E8%BF%90%E8%A1%8C%E8%AE%BE%E7%BD%AE1.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/21.%E5%A4%8D%E4%BD%8D%E8%BF%90%E8%A1%8C%E8%AE%BE%E7%BD%AE2.png?raw=true"><br></table><p>至此，一个新建立的工程就算完成了（当然，我新建的文件是添加了正确的源代码），只需要编译，接上下载器就可以下载运行了。</p><h1 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h1><p>为方便广大STM32学习者，我将常见的STM32“Demo软件工程”已经建好，里面还包含EWARM建立的工程供大家下载。</p><p>STM32F0工程模板:<br><a href="http://pan.baidu.com/s/1pKSkSxt" target="_blank" rel="noopener">http://pan.baidu.com/s/1pKSkSxt</a></p><p>STM32F1工程模板:<br><a href="http://pan.baidu.com/s/1c1AWupM" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1AWupM</a></p><p>STM32F2工程模板:<br><a href="http://pan.baidu.com/s/1o8yGWg6" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8yGWg6</a></p><p>STM32F3工程模板:<br><a href="http://pan.baidu.com/s/1boVXh2f" target="_blank" rel="noopener">http://pan.baidu.com/s/1boVXh2f</a></p><p>STM32F4工程模板:<br><a href="http://pan.baidu.com/s/1qYzYMuS" target="_blank" rel="noopener">http://pan.baidu.com/s/1qYzYMuS</a></p><p>STM32L1工程模板:<br><a href="https://pan.baidu.com/s/1rNPC3JQD7iLchVUEJlTjCQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1rNPC3JQD7iLchVUEJlTjCQ</a></p><p><strong>提示</strong>：如果以上链接失效，可以关注微信公众号，获取更新链接。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　目前Keil的四款产品（软件）：&lt;strong&gt;MDK-ARM、C51、C251、C166&lt;/strong&gt;，在用法上极为相似，包括本文讲述的新建软件工程。&lt;/p&gt;
&lt;p&gt;　　本文以目前（2018年10月）&lt;strong&gt;最新Keil MDK-ARM V5.26、STM32F103标准外设库为例&lt;/strong&gt;，来给大家讲述新建软件工程的具体步骤。&lt;/p&gt;
&lt;p&gt;　　本文讲述的新建软件工程，只是最基础的软件工程（一个工程，一个目标）。其中只修改了必要的配置，大部分配置默认。&lt;/p&gt;
&lt;p&gt;　　如果你是Keil C51、或者其它MCU器件，本文也适用，只是针对MCU器件有略微差异。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程11_深度分析CanFestival_3架构</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程11_深度分析CanFestival_3架构.html</id>
    <published>2018-11-01T06:00:00.000Z</published>
    <updated>2018-11-01T07:20:05.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　教程上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《关于Canfestival及对象字典生成工具环境搭建》</a>中我们简单认识了一下Canfestival这套免费开源CANOpen协议的框架。</p><p>　　那么，本文将会以下载的PDF手册（源码里面也有）为导向，来深入解析Canfestival这套框架。</p><p>　　本文大概分两部分来讲述：<br>　　1.manual手册概要内容；<br>　　2.解析Canfestival源码；</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、manual手册概要内容"><a href="#二、manual手册概要内容" class="headerlink" title="二、manual手册概要内容"></a>二、manual手册概要内容</h1><p>请先下载我们教程上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《关于Canfestival及对象字典生成工具环境搭建》</a>提到的PDF手册（解压源码，在目录objdictgen\doc下面也有manual_en.pdf手册文档）。</p><p>打开PDF手册，我们可以清楚的看到手册共有12章。对于使用STM32开发的初学者来说，相对重要一点的章节有：2, 3, 4, 9这些章节。</p><p>为了照顾初学者，这里先把每一章节内容概述一下，后面在重点讲述部分的内容。</p><h2 id="2-1-内容概要"><a href="#2-1-内容概要" class="headerlink" title="2.1 内容概要"></a>2.1 内容概要</h2><p><strong>第1章Introduction介绍</strong><br>主要介绍了CanFestival是一个开源(LGPL和GPL) CANopen框架，CanFestival项目的起源及支持。同时，也介绍了什么是CANOpen协议，以及协议相关的规范。</p><p><strong>第2章CanFestival特征</strong><br>1.工具：提供对象字典GUI图形化编辑器、代码生成，以及脚本等配套工具；<br>2.多平台：库源代码是ANSI标准C，支持多平台编译和开发；<br>3.CANopen标准：支持DS-301、302、305等标准的CANOpen协议。</p><p><strong>第3章How to start如何开始</strong><br>这一章节其实主要就是对一些环境的要求和配置，及如何获取CanFestival等。</p><p>其实，对我我们使用MCU开发的人来说，重要的就是对象字典编辑和生成工具的环境（具体请参看教程上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">《对象字典生成工具环境搭建》</a>）。其它基于Windows、Linux开发的环境，大家可以参考文档配置一下，这里不讲述。</p><p><strong>第4章理解Canfestival</strong><br>主要讲述：理解源代码文件目录划分情况、在应用程序中实现CanFestival以及源文件结构关系、CAN底层驱动接口的调用和实现、对事件调度的实现方法。</p><p>本章节内容直接牵涉源代码相关内容，所以说比较重要，下面章节将进一步详解。</p><p><strong>第5、6章</strong><br>这两章节主要是针对Linux、Windows平台的配置和开发相关内容，感兴趣朋友可以认真研究一下，这里不讲述。</p><p><strong>第7章</strong><br>主要讲述源码提供的HCS12例程相关的编译、下载、硬件连接以及演示。这里参考意义也不大，如果你有对应的板卡，可以参考进行演示一下。</p><p><strong>第8章例程和测试程序</strong><br>这一章节讲述了配套提供的一些例程的相关说明。比如TestMasterSlave主从站测试例程中心跳发生器时间为1000毫秒等。</p><p>这些说明在源代码中也有，通过查看提供的源代码一目了然。所以，参看价值也不是很大。</p><p><strong>第9章开发一个新节点</strong><br>这一章比较重要，我们开发一个新的节点，就需要编辑其对象字典，那么就需要通过编辑器编辑对象字典并生成代码。</p><p>简单的说，这章节的重要内容就是让你学会<strong>如何使用这个对象字典编辑器工具</strong>。</p><p><strong>第10章FAQ常见问题</strong><br>这一章节，初学者能看懂的还建议看下有些问题可能对你有帮助，比如：CanFestival3是否符合DS301 V4.02版本?</p><p><strong>第11章文档资源</strong><br>主要就是一些参考网址。</p><p><strong>第12章关于这个项目</strong><br>不是重点，可以了解一下这些信息。</p><h1 id="三、解析Canfestival源码"><a href="#三、解析Canfestival源码" class="headerlink" title="三、解析Canfestival源码"></a>三、解析Canfestival源码</h1><h2 id="3-1-源文件目录"><a href="#3-1-源文件目录" class="headerlink" title="3.1 源文件目录"></a>3.1 源文件目录</h2><p>解压下载的源码压缩包，会看到如下图文件及文件夹：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84/1.%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p>我们主要需要的三个.c .h源文件目录：<br><strong>drivers</strong>：底层驱动；<br><strong>include</strong>：.h头文件；<br><strong>src</strong>：.c源代码；</p><p>一个对象字典生成工具：<br><strong>objdictgen</strong>：object dictionary generate.</p><p><strong>examples</strong>：例程，初学者可以参考；</p><h2 id="3-2-源代码结构关系及应用程序如何实现"><a href="#3-2-源代码结构关系及应用程序如何实现" class="headerlink" title="3.2 源代码结构关系及应用程序如何实现"></a>3.2 源代码结构关系及应用程序如何实现</h2><p>这里有一张源文件的结构关系图，大致就是将源文件按照其作用进行了划分，初学者需要多看多理解。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84/2.%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB.png?raw=true"><br></table><p>从图中我们可以看出，将源代码划分成三块。中间的Library库文件我们不会去动它。主要修改左右两边的代码。</p><p>左边CAN底层驱动接口（前面我提供过STM32例程）。Target目标接口，如定时器。</p><p>右边底部对象字典，我们需要通过工具事先配置好，不需要人为编写。最后就是我们通过调用API函数，实现应用程序。</p><p>提示：最右边的英文希望大家理解一下，对初学者有帮助，如打开CAN接口（也可以叫初始化）、初始化定时器……等。</p><h2 id="3-3-CAN底层接口实现和要求"><a href="#3-3-CAN底层接口实现和要求" class="headerlink" title="3.3 CAN底层接口实现和要求"></a>3.3 CAN底层接口实现和要求</h2><p>我们底层发送要求非阻塞的方式实现，一般我建议跑一个操作系统，加一个队列的方式实现。</p><p>需要一个发送线程、一个接收线程，同时需要定时器实现事件的调度。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B11_%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90CanFestival_3%E6%9E%B6%E6%9E%84/3.%E4%BA%8B%E4%BB%B6%E8%B0%83%E5%BA%A6.png?raw=true"><br></table><p>这一节的内容，对于初学者理解起来相对较难，可以先了解，有一个概念，后面我会结合代码让大家更容易理解其中含义。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　教程上一篇文章&lt;a href=&quot;https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html&quot;&gt;《关于Canfestival及对象字典生成工具环境搭建》&lt;/a&gt;中我们简单认识了一下Canfestival这套免费开源CANOpen协议的框架。&lt;/p&gt;
&lt;p&gt;　　那么，本文将会以下载的PDF手册（源码里面也有）为导向，来深入解析Canfestival这套框架。&lt;/p&gt;
&lt;p&gt;　　本文大概分两部分来讲述：&lt;br&gt;　　1.manual手册概要内容；&lt;br&gt;　　2.解析Canfestival源码；&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>Keil系列教程01_Keil介绍、下载、安装与注册</title>
    <link href="http://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C.html"/>
    <id>http://www.strongerhuang.com/Keil/Keil系列教程01_Keil介绍、下载、安装与注册.html</id>
    <published>2018-10-26T02:00:00.000Z</published>
    <updated>2018-10-26T03:02:51.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　对于学习单片机和嵌入式开发的朋友来说，掌握Keil这款软件可以说是必备的技能。鉴于目前网上没有完整的Keil教程，因此我打算整理一套完整的Keil系列教程。</p><p>　　目前Keil有四种产品（软件）：<strong>MDK-ARM、C51、C251、C166</strong>。四种软件都是基于µVision，在用法上极为相似。</p><p>　　所以，该系列教程结合目前使用最多的MDK-ARM来讲述，大部分内容也适用于其它三种软件。</p><a id="more"></a><h1 id="二、Keil介绍"><a href="#二、Keil介绍" class="headerlink" title="二、Keil介绍"></a>二、Keil介绍</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>对于我们程序员来说，大家常说的Keil，其实指的是一款开发工具。同时，Keil也是一家公司名称。</p><p>Keil公司是一家业界领先的微控制器（MCU）软件开发工具的独立供应商。Keil公司由两家私人公司联合运营，分别是德国慕尼黑的Keil Elektronik GmbH和美国德克萨斯的Keil Software Inc。</p><p>Keil公司2005年由ARM公司收购。其两家公司分别更名为ARM Germany GmbH和ARM Inc。</p><h2 id="2-2-MDK-ARM"><a href="#2-2-MDK-ARM" class="headerlink" title="2.2 MDK-ARM"></a>2.2 MDK-ARM</h2><p>MDK-ARM软件为基于Cortex-M、Cortex-R4、ARM7、ARM9处理器设备提供了一个完整的开发环境。 MDK-ARM专为微控制器应用而设计，而且功能强大，能够满足大多数苛刻的嵌入式应用。</p><p>与Keil MDK4及之前版本不同，<strong>Keil MDK5分成MDK Core和Software Packs两部分</strong>。MDK Core主要包含uVision5 IDE集成开发环境和ARM Compiler5。Software Packs则可以在不更换MDK Core的情况下，单独管理（下载、更新、移除）设备支持包和中间件更新包。</p><p>MDK-ARM有四个可用版本，分别是<strong>MDK-Lite（免费评估版）、MDK-Essential（基础版）、MDK-Plus（标准版）、MDK-Professional（专业版）</strong>。所有版本均提供一个完善的C / C++开发环境，其中MDK-Professional还包含大量的中间库。</p><table><br><strong>MDK产品组件：</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/1.MDK%E4%BA%A7%E5%93%81%E7%BB%84%E4%BB%B6.png?raw=true"><br></table><p>关于MDK-ARM的更多详细介绍，及四个版本的差异，请参看我之前在公众号分享的一篇文章<a href="https://mp.weixin.qq.com/s/kaeI81tcCxzQ26WalUQRBQ" target="_blank" rel="noopener">《你们都认真了解过MDK-ARM吗？》</a></p><h2 id="2-3-支持芯片"><a href="#2-3-支持芯片" class="headerlink" title="2.3 支持芯片"></a>2.3 支持芯片</h2><p>Keil MDK-ARM 支持的器件包含 Cortex-M、 Cortex-R、 ARM7、 ARM9、 Cortex-A8系列等多达几千种。</p><p>官方支持芯片地址： <a href="http://www.keil.com/dd2" target="_blank" rel="noopener">http://www.keil.com/dd2</a></p><h1 id="三、下载"><a href="#三、下载" class="headerlink" title="三、下载"></a>三、下载</h1><p>Keil MDK-ARM这个软件建议到官网下载最新版本，我这里也提供百度网盘下载地址（和官网一样）。</p><p>上面说了：Keil MDK5分成<strong>MDK Core和Software Packs</strong>两部分，也就是安装包和支持包。</p><h2 id="3-1-MDK-ARM安装包下载"><a href="#3-1-MDK-ARM安装包下载" class="headerlink" title="3.1 MDK-ARM安装包下载"></a>3.1 MDK-ARM安装包下载</h2><p>目前（2018年10月）Keil MDK-ARM官方最新版本是V5.26，更多老版本及MDK-ARM V4版本，可以在我百度网盘下载【定期更新】。</p><p>官方网站：<a href="http://www.keil.com/download/product" target="_blank" rel="noopener">http://www.keil.com/download/product</a><br>百度网盘：<a href="http://pan.baidu.com/s/1eRLbgIY" target="_blank" rel="noopener">http://pan.baidu.com/s/1eRLbgIY</a></p><h2 id="3-2-MDK-ARM支持包下载"><a href="#3-2-MDK-ARM支持包下载" class="headerlink" title="3.2 MDK-ARM支持包下载"></a>3.2 MDK-ARM支持包下载</h2><p>MDK-ARM V4 和 V5版本在安装的时候最大的区别在于：<strong>V4版本安装包里面集成器件的支持包，而V5版本是独立出来，自己下载安装的</strong>。</p><p>因此需要下载自己芯片型号对应的器件支持包（我百度网盘提供STM32的器件支持包供大家下载）。</p><p>官方网站：<a href="http://www.keil.com/dd2/Pack" target="_blank" rel="noopener">http://www.keil.com/dd2/Pack</a><br>百度网盘：<a href="http://pan.baidu.com/s/1o8fd6jS" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8fd6jS</a></p><p>提示：如果下载链接失效，可关注公众号回复【Keil系列教程】查看更新链接。</p><h1 id="四、安装软件"><a href="#四、安装软件" class="headerlink" title="四、安装软件"></a>四、安装软件</h1><h2 id="4-1-支持的操作系统"><a href="#4-1-支持的操作系统" class="headerlink" title="4.1 支持的操作系统"></a>4.1 支持的操作系统</h2><p>目前（2018年10月）最新版本MDK-ARM V5.26只支持Windows 7、 Windows 8 和 Windows 10这三个版本操作系统。<strong>已经不再支持Windows Vista和 Windows XP系统了</strong>。</p><p>我记得MDK-ARM V5前面几个版本（好像是V5.19之前版本）还能安装在Windows Vista和 Windows XP这种老系统上，只是部分功能兼容性不好，但也能用。</p><p>目前最新版本Keil软件支持的操作系统，可以参看官网说明：<br><a href="http://www2.keil.com/system-requirements" target="_blank" rel="noopener">http://www2.keil.com/system-requirements</a></p><h2 id="4-2-安装详细步骤"><a href="#4-2-安装详细步骤" class="headerlink" title="4.2 安装详细步骤"></a>4.2 安装详细步骤</h2><p>Keil四款软件（MDK-ARM、C51、C251、C166）安装方法基本一样，很简单，一路Next下去就行了。</p><p>本章节主要针对初学者，下面以图文方式讲述一下安装全过程。</p><table><br>1.以管理员身份运行软件， 进入安装向导界面， 点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/2.%E8%BF%9B%E5%85%A5%E5%AE%89%E8%A3%85%E5%90%91%E5%AF%BC.png?raw=true"><br></table><table><br>2.勾选“I agree to…”，许可同意，点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/3.%E8%AE%B8%E5%8F%AF%E5%90%8C%E6%84%8F.png?raw=true"><br></table><table><br>3.选择软件和支持包安装路径（可以默认），点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/4.%E9%80%89%E6%8B%A9%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%94%AF%E6%8C%81%E5%8C%85%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.png?raw=true"><br></table><table><br>4.填写客户信息（可以随便填写），点击“Next”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/5.%E5%A1%AB%E5%86%99%E5%AE%A2%E6%88%B7%E4%BF%A1%E6%81%AF.png?raw=true"><br></table><table><br>5.安装过程需要等待几分钟<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/6.%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E9%9C%80%E8%A6%81%E7%AD%89%E5%BE%85%E5%87%A0%E5%88%86%E9%92%9F.png?raw=true"><br></table><table><br>6.安装完成，点击“Finish”<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/7.%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png?raw=true"><br></table><table><br>7.自动更新“支持包”列表，可以直接退出，自己下载安装。<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/8.%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E2%80%9C%E6%94%AF%E6%8C%81%E5%8C%85%E2%80%9D%E5%88%97%E8%A1%A8.png?raw=true"><br></table><table><br>安装软件之后，如果我们不关闭上面自动更新，自动更新完成之后，就会出现“支持包”列表，如下图：<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/9.%E2%80%9C%E6%94%AF%E6%8C%81%E5%8C%85%E2%80%9D%E5%88%97%E8%A1%A8.png?raw=true"><br></table><h1 id="五、安装支持包"><a href="#五、安装支持包" class="headerlink" title="五、安装支持包"></a>五、安装支持包</h1><p>我把MDK-ARM中用于支持MCU芯片的软件包叫“器件支持包”，所以，我简称“支持包”。</p><p>支持包可以通过在线安装，或者下载离线包自己离线安装，这两种安装方式。</p><h2 id="5-1-在线安装"><a href="#5-1-在线安装" class="headerlink" title="5.1 在线安装"></a>5.1 在线安装</h2><table><br>1.打开MDK-ARM软件，点击“软件支持包”按钮<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/10.%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85.png?raw=true"><br></table><table><br>2.更新列表，选择芯片，安装<br><img align="left" width="650" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/11.%E5%9C%A8%E7%BA%BF%E6%9B%B4%E6%96%B0%E6%94%AF%E6%8C%81%E5%8C%85.png?raw=true"><br></table><p>在线安装过程就上面几个步骤，点击“Install”之后，需要等待一会儿，下面状态栏有提示，提示安装完成即可直接使用。</p><h2 id="5-2-离线安装"><a href="#5-2-离线安装" class="headerlink" title="5.2 离线安装"></a>5.2 离线安装</h2><p>离线安装支持包就如安装软件一样：下载支持包（上面提供下载），双击下载好的离线包，此时会识别安装路径（前提是已经安装MDK），点击“Next”，一会儿就安装完成。</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_Keil%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/12.%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%94%AF%E6%8C%81%E5%8C%85.png?raw=true"><br></table><h1 id="六、注册"><a href="#六、注册" class="headerlink" title="六、注册"></a>六、注册</h1><p>Keil MDK是一个收费的软件，官方严厉打击盗版，若你是商业用途，建议购买正版软件。</p><p>针对个人学习的朋友，可以使用MDK-Lite免费评估版，只是代码大小有32KB的限制。如果还不能满足你自己需求，建议自行在网上查找注册机或购买正版软件。</p><p>同时，ST意法半导体与ARM公司合作，<strong>使用MDK-ARM开发STM32F0和L0系列芯片，可以免费获取License</strong>。具体请参看：<br><a href="http://www2.keil.com/stmicroelectronics-stm32/mdk" target="_blank" rel="noopener">http://www2.keil.com/stmicroelectronics-stm32/mdk</a></p><p>在国内由米尔科技、亿道电子、英倍特提供Keil 的销售和技术支持服务。具体如何购买Keil正版软件，以及它的价格，可以向这些经销商咨询。</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【Keil系列教程】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　对于学习单片机和嵌入式开发的朋友来说，掌握Keil这款软件可以说是必备的技能。鉴于目前网上没有完整的Keil教程，因此我打算整理一套完整的Keil系列教程。&lt;/p&gt;
&lt;p&gt;　　目前Keil有四种产品（软件）：&lt;strong&gt;MDK-ARM、C51、C251、C166&lt;/strong&gt;。四种软件都是基于µVision，在用法上极为相似。&lt;/p&gt;
&lt;p&gt;　　所以，该系列教程结合目前使用最多的MDK-ARM来讲述，大部分内容也适用于其它三种软件。&lt;/p&gt;
    
    </summary>
    
      <category term="Keil系列教程" scheme="http://www.strongerhuang.com/categories/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Keil" scheme="http://www.strongerhuang.com/tags/Keil/"/>
    
      <category term="MDK-ARM" scheme="http://www.strongerhuang.com/tags/MDK-ARM/"/>
    
      <category term="µVision" scheme="http://www.strongerhuang.com/tags/%C2%B5Vision/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程10_关于Canfestival及对象字典生成工具环境搭建</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程10_关于Canfestival及对象字典生成工具环境搭建.html</id>
    <published>2018-10-26T01:00:00.000Z</published>
    <updated>2018-10-26T02:59:56.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　这一篇文章讲述如标题所描述的两大知识点，<strong>这两点内容对于初学者来说非常重要，希望想学习CANOpen协议的朋友认真把文章看完</strong>。</p><p>　　1.讲述Canfestival框架、官网简述，及衍生出的CANOpen源码基础知识；</p><p>　　2.基于Canfestival框架中对象字典生成工具的环境搭建。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、关于Canfestival"><a href="#二、关于Canfestival" class="headerlink" title="二、关于Canfestival"></a>二、关于Canfestival</h1><p>Canfestival是一套<strong>免费开源的CANOpen协议栈框架</strong>，遵循ANSI-C，支持多平台，我们完全可以借助这一套开源框架来学会CANOpen。</p><p>官方主页：<a href="https://canfestival.org/index.html.en" target="_blank" rel="noopener">https://canfestival.org/index.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.Canfestival%E4%B8%BB%E9%A1%B5.png?raw=true"><br></table><p>从上面主页可以看得出来，网址主要包含三部分内容：<strong>Code源码、Documentation文档、Applications应用</strong>。</p><p>这个网站目前访问有点慢，但还是能访问。可能是因为服务器在法国（IP地址），及这套协议免费开源，没有得到更多资金支持。</p><p>下面我将针对初学者，重点讲述一下这三部分内容，以及我们需要重点关注的内容。</p><h2 id="2-1-Code源码"><a href="#2-1-Code源码" class="headerlink" title="2.1 Code源码"></a>2.1 Code源码</h2><p>网址：<a href="https://canfestival.org/code.html.en" target="_blank" rel="noopener">https://canfestival.org/code.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.Coed%E4%BB%A3%E7%A0%81.png?raw=true"><br></table><p>Code代码提供4个资源库（如上图），<strong>4个资源库中CANOpen协议源码都沿用一套，简单说协议源码大致相同</strong>。</p><p>推荐下载第2个的原因：<br>1.有人负责更新维护，目前（2018年）版本最新；<br>2.提供STM32F0、F1、F4系列驱动代码；<br>（下面提供下载）</p><h2 id="2-2-Documentation文档"><a href="#2-2-Documentation文档" class="headerlink" title="2.2 Documentation文档"></a>2.2 Documentation文档</h2><p>网址：<a href="https://canfestival.org/doc.html.en" target="_blank" rel="noopener">https://canfestival.org/doc.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.Documentation%E6%96%87%E6%A1%A3.png?raw=true"><br></table><p>这一项里面主要讲述Canfestival这套框架里面的一些内容，如遵循许可、CanFestival提供了一些GUI和命令行工具，帮助创建一个新的CANOpen节点并编辑对象字典，供主从使用。</p><p>我们需要获取的重要内容，<strong>都在那个PDF手册里面</strong>，建议下载仔细阅读。（这个手册在源码压缩包里面也有：manual_en.pdf）</p><h2 id="2-3-Applications应用"><a href="#2-3-Applications应用" class="headerlink" title="2.3 Applications应用"></a>2.3 Applications应用</h2><p>网址：<a href="https://canfestival.org/apps.html.en" target="_blank" rel="noopener">https://canfestival.org/apps.html.en</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.Applications%E5%BA%94%E7%94%A8.png?raw=true"><br></table><p>这里的“应用”，不是说教你如何编写应用程序，<strong>主要是Canfestival应用在哪些地方</strong>。如Product产品、Research研究方面。</p><p>Beremiz是法国一家公司开发的一款开源的PLC编程工具。在Beremiz里面就集成了CanFestival这套框架（相信折腾过CANOpen的都知道Beremiz）。<br>（这里的“应用”大家可以不用过多深究）</p><h1 id="三、CANOpen源码说明及下载"><a href="#三、CANOpen源码说明及下载" class="headerlink" title="三、CANOpen源码说明及下载"></a>三、CANOpen源码说明及下载</h1><h2 id="3-1-CANOpen源码说明"><a href="#3-1-CANOpen源码说明" class="headerlink" title="3.1 CANOpen源码说明"></a>3.1 CANOpen源码说明</h2><p>许多初学者都有这么一个疑问：<strong>CANOpen协议的源码我们必须要用CanFestival的吗</strong>？</p><p>因为CANOpen协议是遵循CiA301、302、CiA401…这些协议，我们的源代码只要符合这些协议规范即可。</p><p>CANOpen协议源码也可以自己写，但是耗时耗力完全没必要。所以，我们就使用了免费开源的CanFestival。当然，也可以购买商业化的CANOpen协议源码来开发产品。</p><p>不管我们使用免费的CanFestival，还是购买的源码，只要支持CANOpen协议，我们就能与支持CANOpen协议的设备通信。</p><h2 id="3-2-下载"><a href="#3-2-下载" class="headerlink" title="3.2 下载"></a>3.2 下载</h2><p>我们从官网的“Code”进去，会出现4个选项，我推荐下载第2个（上面有说明为什么下载第2个）。进去之后，会看到如下图一些描述：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.%E6%BA%90%E7%A0%81%E6%8F%8F%E8%BF%B0.png?raw=true"><br></table><p>对于关注我的朋友，大部分都在使用STM32，提供相关的源码参看，想必会有更浓学习的兴趣。</p><p>这个源码有多人在更新和维护，所以你会看到有许多分支，我们下载最新版本即可。</p><p>下载地址：<a href="https://bitbucket.org/Mongo/canfestival-3-asc/downloads" target="_blank" rel="noopener">https://bitbucket.org/Mongo/canfestival-3-asc/downloads</a></p><p>百度网盘下载：<a href="https://pan.baidu.com/s/1b9K0vIzu_EVWK1BLURJEPQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1b9K0vIzu_EVWK1BLURJEPQ</a></p><p>提取码：j2w2</p><h1 id="四、对象字典生成工具的环境搭建"><a href="#四、对象字典生成工具的环境搭建" class="headerlink" title="四、对象字典生成工具的环境搭建"></a>四、对象字典生成工具的环境搭建</h1><p>这里的环境搭建可以参考Canfestival手册（manual_en.pdf）里面的指导，具体位置在3.1.1节：Object Dictionary Editor GUI.</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/6.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%9D%A1%E4%BB%B6.png?raw=true"><br></table><p>我们需要下载安装第1，2个，第3个就不用单独下载了。</p><p>因为我们是在STM32上进行开发，手册中3.1.2节Linux、3.1.3节Windows这些内容我们就不用管了。</p><h2 id="4-1-下载Python和wxPython"><a href="#4-1-下载Python和wxPython" class="headerlink" title="4.1 下载Python和wxPython"></a>4.1 下载Python和wxPython</h2><p>因为和其它工具兼容性的原因，我目前在Win10系统上安装可使用的是python-2.7.15 + wxPython2.8。</p><p>其它高版本的Python 3我之前试过好像不行，还有32位和64的也有差异。这里提供给大家（我安装的版本）下载，大家有时间可以在官网下载其它版本试试。</p><p><strong>1.百度网盘</strong><br>链接：<a href="https://pan.baidu.com/s/1bRS403m4B31m4ovSJ-_HwA" target="_blank" rel="noopener">https://pan.baidu.com/s/1bRS403m4B31m4ovSJ-_HwA</a><br>提取码：38sn</p><p><strong>2.官方下载</strong><br>Python：<a href="https://www.python.org/downloads" target="_blank" rel="noopener">https://www.python.org/downloads</a><br>wxPython：<a href="https://wxpython.org/pages/downloads" target="_blank" rel="noopener">https://wxpython.org/pages/downloads</a><br>wxPython镜像：<a href="https://sourceforge.net/projects/wxpython/files/wxPython" target="_blank" rel="noopener">https://sourceforge.net/projects/wxpython/files/wxPython</a></p><h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><p><strong>1.Python安装</strong><br>Python的安装需要注意两点：1.以管理员身份运行； 2.添加（环境变量）路径。</p><p>具体可以参看我公众号之前推送文章《工具下载、环境搭建》中3.2 安装Python.</p><p><strong>2.wxPython安装</strong><br>可以通过下载离线包直接安装，也可以通过命令行直接安装。（请看上面给的地址）</p><h2 id="4-3-如何成功运行"><a href="#4-3-如何成功运行" class="headerlink" title="4.3 如何成功运行"></a>4.3 如何成功运行</h2><p>1.解压（上面3.2 下载的）Canfestival-3；<br>2.在解压objdictgen目录下的Gnosis_Utils-current.tar.gz</p><table><br>3.将第2步解压目录下的<strong>gnosis</strong>拷贝到<strong>objdictgen</strong>目录下（注意路径），如下图：<br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/7.%E6%8B%B7%E8%B4%9Dgnosis%E5%B7%A5%E5%85%B7.png?raw=true"><br></table><table><br>4.双击，或者以命令方式运行<strong>objdictgen</strong>下的objdictedit.py，如果环境没问题，此时就会出现如下界面：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B10_%E5%85%B3%E4%BA%8ECanfestival%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/8.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%BC%96%E8%BE%91%E5%99%A8.png?raw=true"><br></table><p>如果不能出现上面界面，请检查环境是否搭建成功。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　这一篇文章讲述如标题所描述的两大知识点，&lt;strong&gt;这两点内容对于初学者来说非常重要，希望想学习CANOpen协议的朋友认真把文章看完&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　1.讲述Canfestival框架、官网简述，及衍生出的CANOpen源码基础知识；&lt;/p&gt;
&lt;p&gt;　　2.基于Canfestival框架中对象字典生成工具的环境搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程09_CANOpen对象字典</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程09_CANOpen对象字典.html</id>
    <published>2018-10-23T02:00:00.000Z</published>
    <updated>2018-10-23T02:34:45.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　上一篇文章主要是引导大家学习CANOpen协议通信接口的相关内容。通信接口的内容有点多，对于初学者来说，如果看不懂，请多看几遍（最好有个印象）。</p><p>　　CANopen设备最重要的一个部分就是对象字典。对象字典本质上是一种被预先安排的对象序列，可通过网络访问。<strong>字典里面的每一对象均可使用一个16-bit主索引和8-bit子索引寻址到</strong>。</p><p>　　初学者学习如果难理解通信接口（上一篇）有些内容，如：PDO、SDO及网络管理对象，可以结合对象字典索引来学习和记忆。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、对象字典重要内容"><a href="#二、对象字典重要内容" class="headerlink" title="二、对象字典重要内容"></a>二、对象字典重要内容</h1><p><strong>对象字典OD</strong>：Object dictionary。</p><p>一组带有 16 位索引和 8 位子索引的数据或对象。对象字典下面主要包含：<strong>数据类型、通信对象、应用对象</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/1.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86.png?raw=true"><br></table><p><strong>对象字典主索引</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/2.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E4%B8%BB%E7%B4%A2%E5%BC%95.png?raw=true"><br></table><h2 id="2-1-通信子协议区"><a href="#2-1-通信子协议区" class="headerlink" title="2.1 通信子协议区"></a>2.1 通信子协议区</h2><p>通信子协议区，如上图1000h 到 1FFFh这个区域。也就是通信接口（或通信对象）协议区。</p><p>对于初学者来说，<strong>通信对象子协议区</strong>是比较重要的一个区域，牵涉到上一篇文章《通信接口》讲述的大部分内容。同时，这之间的关系也非常紧密。</p><p><strong>通讯对象子协议区</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/3.%E9%80%9A%E8%AE%AF%E5%AF%B9%E8%B1%A1%E5%AD%90%E5%8D%8F%E8%AE%AE%E5%8C%BA.png?raw=true"><br></table><p>如上图，通讯对象子协议区又划分为几个区域，而其中的1000h 到 1029h为通用通讯对象。</p><p>通用通讯对象里面的内容已经被约定好，如果我们需要用到，可直接配置使用即可。</p><p>通用通讯对象内容：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/4.%E9%80%9A%E7%94%A8%E9%80%9A%E8%AE%AF%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AE%B91.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/5.%E9%80%9A%E7%94%A8%E9%80%9A%E8%AE%AF%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AE%B92.png?raw=true"><br></table><p>通信子协议区的内容非常重要，也比较多，需要拆分并一个一个掌握。可结合周立功提供相关教程，以及前面提到的CiA 301手册理解。</p><p>我这里就不一一列出来了，简单再列一个<strong>通信子协议区中PDO通信参数（对象）与映射参数</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/6.PDO%E9%80%9A%E4%BF%A1%E5%8F%82%E6%95%B0%E4%B8%8E%E6%98%A0%E5%B0%84%E5%8F%82%E6%95%B0.png?raw=true"><br></table><p>写到这里，想必很多朋友都能理解，也能明白这些内容。更多的内容，可以结合这种拆分的思路去理解。</p><h1 id="三、对象字典生成工具"><a href="#三、对象字典生成工具" class="headerlink" title="三、对象字典生成工具"></a>三、对象字典生成工具</h1><p>上面介绍了对象字典的一些内容，可能还是有很多初学者不明白。同时，也就可能会产生疑问：这个对象字典我们需要字典和我们代码有什么关系呢？</p><p>可以简单来说，就是一些16位索引和8位子索引对应的变量数据，来下看下代码（下面两图），加深理解：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/7.%E4%BB%A3%E7%A0%81_%E4%B8%BB%E7%B4%A2%E5%BC%95.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/8.%E4%BB%A3%E7%A0%81_SDO.png?raw=true"><br></table><h2 id="3-1-对象字典的代码需要自己写吗？"><a href="#3-1-对象字典的代码需要自己写吗？" class="headerlink" title="3.1 对象字典的代码需要自己写吗？"></a>3.1 对象字典的代码需要自己写吗？</h2><p>很多初学者，包括我（之前初学时）也会产生疑问：对象字典的代码需要我们自己写吗？</p><p>答案：不用自己写。</p><p>当然，对象字典的代码可以自己写，但完全没必要。1.自己写不一定正确；2.有现成工具可以节约大量时间。</p><h2 id="3-2-Canfestival对象字典生成工具"><a href="#3-2-Canfestival对象字典生成工具" class="headerlink" title="3.2 Canfestival对象字典生成工具"></a>3.2 Canfestival对象字典生成工具</h2><p>我微信公众号分享《CANOpen系列教程》的封面中有一行英文：Canfestival.相信学过CANOpen的朋友都应该知道我接下来会结合这套<strong>Canfestival免费开源的CANOpen架构</strong>来讲述。</p><p>其中，Canfestival里面包含我们需要的<strong>CANOpen协议源码和对象字典生成工具</strong>。</p><p>有了对象字典生成工具，对象字典的代码就可以通过它来自动生成。搭建Canfestival对象字典生成工具的环境是一个重点。</p><p>对于很多初学者来说搭建环境也是一个难点，不少初学者就卡在这一关，然后，学习CANOpen就没有继续下去了。</p><p>简单的说，搭建对象字典生成工具的环境步骤不多，可能会因为诸多因素导致搭建失败。搭建成功，运行之后会出现如下图界面：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B09_CANOpen%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8/9.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p>在学习对象字典生成工具时，会看见一个词：EDS，<strong>即Electronic Data Sheet电子数据单</strong>。</p><p>像周立功的CANOpen从站模块就配有工具生成EDS文件。当然，Canfestival提供的工具也能导出EDS文件。</p><p>Canfestival对象字典生成工具搭建过程，及相关内容我将在下一篇文章详细讲述。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档部分内容来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　上一篇文章主要是引导大家学习CANOpen协议通信接口的相关内容。通信接口的内容有点多，对于初学者来说，如果看不懂，请多看几遍（最好有个印象）。&lt;/p&gt;
&lt;p&gt;　　CANopen设备最重要的一个部分就是对象字典。对象字典本质上是一种被预先安排的对象序列，可通过网络访问。&lt;strong&gt;字典里面的每一对象均可使用一个16-bit主索引和8-bit子索引寻址到&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　初学者学习如果难理解通信接口（上一篇）有些内容，如：PDO、SDO及网络管理对象，可以结合对象字典索引来学习和记忆。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程08_CANOpen通信接口引导学习</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程08_CANOpen通信接口引导学习.html</id>
    <published>2018-10-23T01:00:00.000Z</published>
    <updated>2018-10-23T02:27:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　上一章上一篇文章让大家了解了一下CANOpen协议的模型，也就是说CANOpen协议的内容都包含在这个模型里面，而模型里面的内容可以细分出来许许多多的知识。</p><p>　　但是对于初学者来说，并不是必须要掌握的所有的细节知识才行。只需要掌握其中必备的一些基础知识，就可以编写CANOpen的应用程序代码了。</p><p>　　那么本文将带你掌握其中部分基础知识，让你大脑中有CANOpen协议的这些概念知识（先有初步认识，以便于后面综合理解）。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、通信接口主要内容"><a href="#二、通信接口主要内容" class="headerlink" title="二、通信接口主要内容"></a>二、通信接口主要内容</h1><p>我这里按照CANOpen CiA 301协议文档，提取了通信接口的主要内容，我把它用思维导图方式列出来了，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0/1.CANOpen%E9%80%9A%E8%AE%AF%E6%8E%A5%E5%8F%A3.png?raw=true"><br></table><p>初学者需要掌握通信接口后面的四项内容：<strong>网络管理(NMT)、服务数据对象 (SDO)、过程数据对象(PDO)、特殊协议</strong>；</p><p>这四项内容细分出来的知识点不多（相对来说），但对初学者来说，理解起来的难度较大。<strong>难点就在于：有许多抽象概念，且知识点关联性较强</strong>。</p><p>比如：什么是报文？ CAN-ID、COB-ID、Node-ID是什么思，各有什么区别？ COB-ID和对象字典索引有关联吗？</p><h1 id="三、CANopen轻松入门"><a href="#三、CANopen轻松入门" class="headerlink" title="三、CANopen轻松入门"></a>三、CANopen轻松入门</h1><p>相信学习CANOpen的朋友都在网上看到过<strong>周立功的这么一本电子书：《CANopen 轻松入门》</strong>。</p><p>本来我是打算再造一次轮子，重新结合CANOpen CiA 301标准写一遍。但我之前有做计划，发现太费时了，而且做出来的效果也没有《CANopen轻松入门》这么好。我思前想后，还是觉得没有必要。</p><p>所以，本文主要目的在于引导初学者，网上下载《CANopen轻松入门》这本电子书来好好研究一下。关于通信接口主要内容，目录如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0/2.CANopen%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8%EF%BC%88%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E7%9B%AE%E5%BD%95%EF%BC%89.png?raw=true"><br></table><p><strong>《CANopen轻松入门》</strong>这本电子书是我站在初学者的角度考虑，觉得比较适合初学者，并不是为周立功打广告。当你把这本电子书里面内容都掌握了，我觉得你就已经入门了。 </p><p>《CANopen轻松入门》网盘下载地址（百度、谷歌随处可见）：<br><a href="https://pan.baidu.com/s/15Or8ox3LgXKR6Z7ul7Zt1g" target="_blank" rel="noopener">https://pan.baidu.com/s/15Or8ox3LgXKR6Z7ul7Zt1g</a></p><p>提取码：9ja0</p><h1 id="四、CiA-301"><a href="#四、CiA-301" class="headerlink" title="四、CiA 301"></a>四、CiA 301</h1><p>入门之后若要深入理解，我建议参看官网的《<strong>CANOpen CiA 301</strong>》标准这本文档。为什么是CiA 301标准呢？ 因为这些入门知识大部分都是CiA 301标准里面的内容。</p><p>CiA 301标准有多个版本，建议下载已经公开的V4.2.0版本：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B08_CANOpen%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%BC%95%E5%AF%BC%E5%AD%A6%E4%B9%A0/3.CiA%20301.png?raw=true"><br></table><p>CiA技术文档下载地址（需要登录）：<br><a href="https://www.can-cia.org/standardization/specifications" target="_blank" rel="noopener">https://www.can-cia.org/standardization/specifications</a></p><p>CiA 301网盘下载地址（含中、英文版本）：<br><a href="https://pan.baidu.com/s/1efnJAmB7tkSsMwIf39p8sg" target="_blank" rel="noopener">https://pan.baidu.com/s/1efnJAmB7tkSsMwIf39p8sg</a></p><p>提取码：x1m0</p><p>提示：<br>CiA（CAN in Automation） 301也是大家所说的DS301，为CANopen 基础协议。</p><p>我们还常看到类似CiA 401 402这些协议，其实它们是在CiA 301 之上，对各个行业不断推出设备子协议。</p><p>所谓的子协议，就是针对不同行业的应用对象，对 CANopen 内部的数据含义进行重新定义，或者添加新的控制逻辑。</p><h1 id="五、提取通信接口要点"><a href="#五、提取通信接口要点" class="headerlink" title="五、提取通信接口要点"></a>五、提取通信接口要点</h1><p>这里针对通信接口简单罗列一些基础知识，方便初学者理解。</p><h2 id="5-1-网络管理-NMT"><a href="#5-1-网络管理-NMT" class="headerlink" title="5.1 网络管理(NMT)"></a>5.1 网络管理(NMT)</h2><p>1.CANOpen网络一般是一个主站，多个从站的局域网络；</p><p>2.NMT节点具有6种状态：初始化、应用层复位、通讯复位、预操作状态、操作状态、停止状态。可以自己切换状态，也可主站切换状态；</p><p>3.任何一个 CANopen 从站上线后发出节点上线报文（boot-up）;</p><h2 id="5-2-过程数据对象-PDO"><a href="#5-2-过程数据对象-PDO" class="headerlink" title="5.2 过程数据对象 PDO"></a>5.2 过程数据对象 PDO</h2><p>1.PDO用来传输实时数据，属于“生产消费”模型；</p><p>2.COB-ID 定义只是预定义，TPDO5、6、7这些也是可以存在。PDO 的COB-ID 与 Node-ID 无必然规则上的联系，</p><p>3.PDO 的两种传输方式：同步传输和异步传输；</p><p>4.PDO 的通信参数可通过对象字典工具配置；</p><p>5.PDO 的映射参数是一个相对难理解的参数，请结合《CANopen 轻松入门》图文（请关注颜色）理解；</p><h2 id="5-3-服务数据对象-SDO"><a href="#5-3-服务数据对象-SDO" class="headerlink" title="5.3 服务数据对象 SDO"></a>5.3 服务数据对象 SDO</h2><p>1.SDO为请求应答方式；</p><p>2.发送方（客户端）、接收方（服务器） ；</p><p>3.通常从节点为 SDO 服务器，主节点为客户端；</p><p>4.两种协议：快速、普通 SDO 协议；</p><p>5.CS命令符含义需熟记（查表）；</p><h2 id="5-4-特殊协议"><a href="#5-4-特殊协议" class="headerlink" title="5.4 特殊协议"></a>5.4 特殊协议</h2><p>1.常见的就是罗列出来的3种：同步协议、时间戳协议、紧急报文协议；</p><p>2.特殊协议CAN-ID定义（查表）；</p><p>3.紧急报文错误代码分类及含义；</p><p>以上许多内容都有一张对应的表格，可以搜索一下“CANopen备忘录”，就有详细列出各自对应的内容。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档部分内容来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　上一章上一篇文章让大家了解了一下CANOpen协议的模型，也就是说CANOpen协议的内容都包含在这个模型里面，而模型里面的内容可以细分出来许许多多的知识。&lt;/p&gt;
&lt;p&gt;　　但是对于初学者来说，并不是必须要掌握的所有的细节知识才行。只需要掌握其中必备的一些基础知识，就可以编写CANOpen的应用程序代码了。&lt;/p&gt;
&lt;p&gt;　　那么本文将带你掌握其中部分基础知识，让你大脑中有CANOpen协议的这些概念知识（先有初步认识，以便于后面综合理解）。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程07_CANOpen协议概述</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_CANOpen%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程07_CANOpen协议概述.html</id>
    <published>2018-10-11T01:00:00.000Z</published>
    <updated>2018-10-11T01:20:05.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　上一章节提供的例程是标准、数据帧格式的传输例程，结合前面理论知识，相信你根据参考例程可以实现远程帧及其他类型的数据传输。</p><p>　　<strong>前面教程讲述内容为CAN总线协议，属于底层硬件相关的一些内容</strong>。从本文开始，将正式讲述CANOpen协议。</p><p>　　CANOpen协议是基于CAN总线的上一层软件协议。该教程前面内容是建立底层通信，只有在底层通信成功基础上，才能实现上一层的通信协议。</p><p>　　<strong>提示</strong>：CANOpen协议内容很多，有许多内容都是一些抽象的概念。所以，有一些内容相对较难理解，随着慢慢深入即可消除那些疑虑。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、CANopen协议总述"><a href="#二、CANopen协议总述" class="headerlink" title="二、CANopen协议总述"></a>二、CANopen协议总述</h1><p>CANopen 是一个基于 CAN 串行总线的网络传输系统的应用层协议，遵循 ISO/OSI 标准模型。</p><p>网络中不同的设备通过对象字典或者对象来相互交换数据，其中，主节点可以通过过程数据对象 (PDO) 或者服务数据对象 (SDO) 来获取或者修改其它节点对象字典列表中的数据。</p><p>CANOpen协议主要内容分为三大块，如下图CANopen 的设备模型。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_CANOpen%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/1.%20CANopen%E8%AE%BE%E5%A4%87%E6%A8%A1%E5%9E%8B.png?raw=true"><br></table><p>CANOpen协议从大方向的划分，就如上图所示三大块。但是，这三大块里面的内容就牵涉到许多……</p><p>初学者可以以上图模型为中心，再结合实际例程理解CANOpen协议的各种抽象概念。</p><p>下面章节将进一步讲述模型中三大块内容的一些概念，初学者能理解尽量理解，不能理解可以先做了解即可。</p><h1 id="三、通信对象"><a href="#三、通信对象" class="headerlink" title="三、通信对象"></a>三、通信对象</h1><p>CANopen协议中常用的通信对象包含如下几点：</p><h2 id="1）-网络管理对象-NMT"><a href="#1）-网络管理对象-NMT" class="headerlink" title="1） 网络管理对象(NMT)"></a>1） 网络管理对象(NMT)</h2><p>网络管理对象包括 Boot-up 消息， Heartbeat 协议及 NMT 消息，基于主从通信模式， NMT 用于管理和监控网络中的各个节点，主要实现三种功能：节点状态控制、错误控制和节点启动。</p><h2 id="2）-服务数据对象-SDO"><a href="#2）-服务数据对象-SDO" class="headerlink" title="2） 服务数据对象 (SDO)"></a>2） 服务数据对象 (SDO)</h2><p><strong>·</strong>包括接收 SDO(R-SDO) 和发送 SDO(T-SDO)。<br><strong>·</strong>通过使用索引和子索引， SDO 使客户机能够访问设备对象字典中的项。<br><strong>·</strong>SDO 通过 CAL 中多元域的 CMS 对象来实现，允许传送任何长度的数据，当数据超过 4 个字节时分拆成几个报文。<br><strong>·</strong>协议是确认服务类型，为每个消息生成一个应答。 SDO 请求和应答报文总是包含 8 个字节。</p><h2 id="3）-过程数据对象-PDO"><a href="#3）-过程数据对象-PDO" class="headerlink" title="3） 过程数据对象(PDO)"></a>3） 过程数据对象(PDO)</h2><p><strong>·</strong>包括接收 PDO(RPDO) 和发送 PDO(TPDO)。<br><strong>·</strong>用来传输实时数据，数据从一个创建者传到一个或多个接收者。数据传送限制在 1 到 8 个字节。<br><strong>·</strong>每个 CANopen 设备包含 8 个缺省的 PDO 通道， 4 个发送 PDO 通道和 4 个接收 PDO 通道。<br><strong>·</strong>PDO 包含同步和异步两种传输方式，由该 PDO 对应的通信参数决定。<br><strong>·</strong>PDO 消息的内容是预定义的，由该 PDO 对应的映射参数决定。</p><h2 id="4）-同步对象-SYNC"><a href="#4）-同步对象-SYNC" class="headerlink" title="4） 同步对象 (SYNC)"></a>4） 同步对象 (SYNC)</h2><p>同步对象是由 CANopen 主站周期性地广播到 CAN 总线的报文，用来实现基本的网络时钟信号，每个设备可以根据自己的配置，决定是否使用该事件来跟其它网络设备进行同步通信。</p><h2 id="5）-紧急报文-EMCY"><a href="#5）-紧急报文-EMCY" class="headerlink" title="5） 紧急报文 (EMCY)"></a>5） 紧急报文 (EMCY)</h2><p>设备内部通信故障或者应用故障错误时发送的报文。</p><h1 id="四、对象字典"><a href="#四、对象字典" class="headerlink" title="四、对象字典"></a>四、对象字典</h1><p>对象字典是设备规范中最重要的部分。它是一组参数和变量的有序集合，包含了设备描述及设备网络状态的所有参数。</p><p>通过网络可以采用有序的<strong>预定义的方式</strong>来访问的一组对象。这里就牵涉到定义对象字典的生成问题，后面我会讲述关于对象字典生成工具相关内容。</p><p><strong>CANopen 协议采用了带有 16 位索引和 8 位子索引的对象字典</strong>。你可以理解为一本汉语字典，我们需要查找里面的某个汉子（可以理解定义的某个数据），我们就会从拼音或笔画（索引）进去找到对应位置。</p><p>CANOpen 协议对象字典主索引如下图，这只是一个主要的索引。其实还能细分下去，这里不过多讲述，后续会进一步讲述。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_CANOpen%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/2.%E5%AF%B9%E8%B1%A1%E5%AD%97%E5%85%B8%E4%B8%BB%E7%B4%A2%E5%BC%95.png?raw=true"><br></table><h1 id="五、应用"><a href="#五、应用" class="headerlink" title="五、应用"></a>五、应用</h1><p>应用这一块的内容包含应用程序、设备子协议实现。可以从CANopen 的设备模型明白，对外就是IO接口，也就是供我们调用的接口。</p><p>应用这一块包含CANOpen协议上层的内容，可以简单理解封装的一些供用户读写操作的函数。</p><p>应用这一块内容在后面结合实例分析会牵涉，初学者可以简单了解有这么一块，且知道这一块在CANOpen协议中大致的作用即可。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档部分内容来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　上一章节提供的例程是标准、数据帧格式的传输例程，结合前面理论知识，相信你根据参考例程可以实现远程帧及其他类型的数据传输。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;前面教程讲述内容为CAN总线协议，属于底层硬件相关的一些内容&lt;/strong&gt;。从本文开始，将正式讲述CANOpen协议。&lt;/p&gt;
&lt;p&gt;　　CANOpen协议是基于CAN总线的上一层软件协议。该教程前面内容是建立底层通信，只有在底层通信成功基础上，才能实现上一层的通信协议。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;提示&lt;/strong&gt;：CANOpen协议内容很多，有许多内容都是一些抽象的概念。所以，有一些内容相对较难理解，随着慢慢深入即可消除那些疑虑。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程06_结合代码理解CAN底层收发数据（含STM32例程）</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程06_结合代码理解CAN底层收发数据（含STM32例程）.html</id>
    <published>2018-10-08T09:00:00.000Z</published>
    <updated>2018-10-11T01:19:34.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　该教程前面讲述了许多关于CAN协议的一些概念，可能许多初学者看的云里雾里，那么本文将结合代码让大家理解之前讲述的内容。</p><p>　　因为关注我的人大部分都在学习STM32，我将结合STM32F103、标准外设库例程来让大家理解之前讲述的一些概念。</p><p>　　本文主要讲述内容：<br>　　<strong>·1.传输数据相关参数</strong><br>　　<strong>·2.位时序及传输波特率</strong></p><p>　　为方便大家理解，我将在最后提供对应例程「CANOpen系列教程06_CAN底层收发例程」。当然，本文只讲述代码中部分内容，某些配置参数放在后面讲述。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、传输数据相关参数"><a href="#二、传输数据相关参数" class="headerlink" title="二、传输数据相关参数"></a>二、传输数据相关参数</h1><p>传输数据相关参数其实主要就是前面<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.html">《CANOpen系列教程04》</a>讲述的“帧类型及格式说明”那一章节内容，建议先看下那些概念内容。</p><p>CAN总线传输的内容主要就是发送和接收，下面我将结合代码中发送和接收参数来让大家理解我们编程控制CAN总线上那些参数。</p><h2 id="2-1-CAN总线数据帧"><a href="#2-1-CAN总线数据帧" class="headerlink" title="2.1 CAN总线数据帧"></a>2.1 CAN总线数据帧</h2><p>本文提供例程主要是CAN总线使用最多的数据帧为例，让大家理解数据帧传输由我们编程控制的参数。</p><p>先看下图回顾一下数据帧格式，其中有些字段内容由控制器自动完成，如：帧起始，CRC校验。而有些就是由我们编程控制，如：ID、数据等。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89/1.%E6%95%B0%E6%8D%AE%E5%B8%A7.png?raw=true"><br></table><h2 id="2-2-CAN发送代码"><a href="#2-2-CAN发送代码" class="headerlink" title="2.2 CAN发送代码"></a>2.2 CAN发送代码</h2><p><strong>A.CAN发送数据结构</strong><br>下图主要就是CAN发送由我们编程控制的参数。其实你会发现，主要就是上面帧格式中部分内容：ID、IDE、RTR、DLC、Data。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89/2.CanTxMsg%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p><strong>B.发送配置参数</strong><br>下图为实际发送配置的参数。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89/3.%E5%8F%91%E9%80%81%E5%8F%82%E6%95%B0.png?raw=true"><br></table><h2 id="2-3-CAN接收代码"><a href="#2-3-CAN接收代码" class="headerlink" title="2.3 CAN接收代码"></a>2.3 CAN接收代码</h2><p>CAN接收其实和发送类似，CAN总线上的字段就那些，在接收端接收的那些参数无非就是发送端发送出来的那些参数。<br>针对STM32内部集成的CAN，接收数据结构多了一个FMI参数，大概意思就是接收消息邮箱筛选器索引。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89/4.CanRxMsg%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p><strong>接收操作</strong><br>为方便初学者理解，这里这要就是使用中断接收CAN总线数据，在中断函数里面打印也主要是用于测试，一般实际项目打印不会出现在中断函数（打印相对耗时）。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89/5.%E4%B8%AD%E6%96%AD%E6%8E%A5%E6%94%B6.png?raw=true"><br></table><h1 id="三、位时序及传输波特率"><a href="#三、位时序及传输波特率" class="headerlink" title="三、位时序及传输波特率"></a>三、位时序及传输波特率</h1><p>同样，在前面<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.html">《CANOpen系列教程04》</a>中有讲述“位时序及传输波特率”的概念。其实，位时序间接决定了传输的波特率。换句话说，传输的波特率由位时序几个参数决定。</p><p>看下图，回顾一下波特率计算公式：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89/6.%E6%B3%A2%E7%89%B9%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png?raw=true"><br></table><h2 id="3-1-波特率配置代码"><a href="#3-1-波特率配置代码" class="headerlink" title="3.1 波特率配置代码"></a>3.1 波特率配置代码</h2><p>结合上图计算公式和下图代码，可以看出位时序中几个参数和波特率的关系。波特率为1M时，几个位时序参数可以配置为如下图值：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E7%BB%93%E5%90%88%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3CAN%E5%BA%95%E5%B1%82%E6%94%B6%E5%8F%91%E6%95%B0%E6%8D%AE%EF%BC%88%E5%90%ABSTM32%E4%BE%8B%E7%A8%8B%EF%BC%89/7.%E6%B3%A2%E7%89%B9%E7%8E%87%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81.png?raw=true"><br></table><p><strong>提示：</strong><br>36M代表CAN时钟，具体要看时钟相关配置。</p><p>波特率固定，位时序参数可以不同。比如波特率固定为1M，位时序参数可以为上图配置；也可以修改其中的值，如修改位段1为CAN_BS1_5tq，位段2为CAN_BS2_3tq。只要遵循波特率计算公式即可。</p><h1 id="四、例程下载"><a href="#四、例程下载" class="headerlink" title="四、例程下载"></a>四、例程下载</h1><p>CANOpen系列教程06_CAN底层收发例程：<br><a href="https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw" target="_blank" rel="noopener">https://pan.baidu.com/s/1LzD0Epc-Z8vlHsb-sD3WVw</a><br>提取码：l2dc</p><p><strong>提示：</strong><br>    链接后期可能会失效，可关注公众号回复【CANOpen系列教程】查看更新链接。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档部分内容来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　该教程前面讲述了许多关于CAN协议的一些概念，可能许多初学者看的云里雾里，那么本文将结合代码让大家理解之前讲述的内容。&lt;/p&gt;
&lt;p&gt;　　因为关注我的人大部分都在学习STM32，我将结合STM32F103、标准外设库例程来让大家理解之前讲述的一些概念。&lt;/p&gt;
&lt;p&gt;　　本文主要讲述内容：&lt;br&gt;　　&lt;strong&gt;·1.传输数据相关参数&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;·2.位时序及传输波特率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　为方便大家理解，我将在最后提供对应例程「CANOpen系列教程06_CAN底层收发例程」。当然，本文只讲述代码中部分内容，某些配置参数放在后面讲述。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程05_CAN总线同步与位填充、优先级的决定</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程05_CAN总线同步与位填充、优先级的决定.html</id>
    <published>2018-09-27T01:00:00.000Z</published>
    <updated>2018-09-27T01:27:19.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　继续为大家更新CAN总线协议相关内容，这些内容其实也比较重要，会直接影响到你后期CAN总线的编程，夸张一点的说会影响到你的软件架构。</p><p>　　本文内容相对来说比较容易理解，初学者有必要了解一下。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、位填充"><a href="#二、位填充" class="headerlink" title="二、位填充"></a>二、位填充</h1><p>位填充是<strong>为防止突发错误而设定的功能</strong>。当同样的电平持续 5 位时则添加一个位的反型数据。</p><p>这个功能很好理解，如下图所示。<strong>位填充的数据不需要编程控制，由控制器自动完成</strong>。其目的也是提高CAN总线的稳定性。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A/1.%E4%BD%8D%E5%A1%AB%E5%85%85.png?raw=true"><br></table><p><strong>(1) 发送单元的工作</strong><br>在发送数据帧和遥控帧时， SOF～CRC 段间的数据，相同电平如果持续 5 位，在下一个位（第 6 个位）则要插入 1 位与前 5 位反型的电平。</p><p><strong>(2) 接收单元的工作</strong><br>在接收数据帧和遥控帧时， SOF～CRC 段间的数据，相同电平如果持续 5 位，需要删除下一个位（第 6 个位）再接收。如果这个第 6 个位的电平与前 5 位相同，将被视为错误并发送错误帧。</p><h1 id="三、优先级的决定"><a href="#三、优先级的决定" class="headerlink" title="三、优先级的决定"></a>三、优先级的决定</h1><p>前面讲述“CAN 总线差分信号”时描述了显性和隐性，其实这是CAN总线的特点，也是决定CAN总线优先级比较重要的功能。</p><p>在CAN总线空闲态，最先开始发送消息的单元获得发送权。</p><p><strong>多个单元同时开始发送时，各发送单元从仲裁段的第一位开始进行仲裁</strong>。连续输出显性电平最多的单元可继续发送。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A/2.%E6%80%BB%E7%BA%BF%E4%BB%B2%E8%A3%81.png?raw=true"><br></table><p>上图描述了CAN控制仲裁的过程，单元2最终获得了抢占CAN总线的权利，也就是说单元2具有更高的优先级。</p><p>当单元1 仲裁失利时，自动转换为接收（本来该发送，优先级比别人低，就开始接收数据了。 同时，控制器将会在下一轮继续发送这次未完成的数据）。</p><h2 id="3-1-数据帧和遥控帧的优先级"><a href="#3-1-数据帧和遥控帧的优先级" class="headerlink" title="3.1 数据帧和遥控帧的优先级"></a>3.1 数据帧和遥控帧的优先级</h2><p>具有相同 ID 的数据帧和遥控帧在总线上竞争时，仲裁段的最后一位（RTR）为显性位的数据帧具有优先权，可继续发送。</p><p>数据帧和遥控帧的仲裁过程如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A/3.%E6%95%B0%E6%8D%AE%E5%B8%A7%E5%92%8C%E9%81%A5%E6%8E%A7%E5%B8%A7%E7%9A%84%E4%BB%B2%E8%A3%81%E8%BF%87%E7%A8%8B.png?raw=true"><br></table><h2 id="3-2-标准格式和扩展格式的优先级"><a href="#3-2-标准格式和扩展格式的优先级" class="headerlink" title="3.2 标准格式和扩展格式的优先级"></a>3.2 标准格式和扩展格式的优先级</h2><p>标准格式 ID 与具有相同 ID 的遥控帧或者扩展格式的数据帧在总线上竞争时，标准格式的 RTR 位为显性位的具有优先权，可继续发送。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_CAN%E6%80%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BD%8D%E5%A1%AB%E5%85%85%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%86%B3%E5%AE%9A/4.%E6%A0%87%E5%87%86%E6%A0%BC%E5%BC%8F%E4%B8%8E%E6%89%A9%E5%B1%95%E6%A0%BC%E5%BC%8F%E7%9A%84%E4%BB%B2%E8%A3%81%E8%BF%87%E7%A8%8B.png?raw=true"><br></table><p><strong>提示：</strong><br>不明白数据帧和遥控帧，标准格式和扩展格式之间差异的朋友，建议参看我上一篇文章<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.html">《CANOpen系列教程04》</a>。</p><h1 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h1><p>CAN总线协议的重要内容在这前面基本是讲述的差不多了，还有一些不是很重要的内容，比如硬件设计需要在CAN_H和CAN_L之间添加一个120欧电阻，总线的传输距离等。</p><p>接下来的文章会结合STM32芯片集成CAN控制器、例程讲述如何编程控制CAN总线数据的收发等。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档部分文字来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　继续为大家更新CAN总线协议相关内容，这些内容其实也比较重要，会直接影响到你后期CAN总线的编程，夸张一点的说会影响到你的软件架构。&lt;/p&gt;
&lt;p&gt;　　本文内容相对来说比较容易理解，初学者有必要了解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程04_CAN总线波特率、位时序、帧类型及格式说明</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程04_CAN总线波特率、位时序、帧类型及格式说明.html</id>
    <published>2018-09-22T08:00:00.000Z</published>
    <updated>2018-09-22T08:31:43.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　上一篇文章讲述了<strong>CAN收发器</strong>的重要作用，也提及了一下CAN总线的优势主要在于<strong>CAN控制器</strong>。CAN控制器在CAN网络中所处的位置如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/1.CAN%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p>　　本文讲述的CAN控制器实现的几个重要功能：<strong>CAN总线波特率、位时序、帧类型</strong>。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、CAN总线波特率"><a href="#二、CAN总线波特率" class="headerlink" title="二、CAN总线波特率"></a>二、CAN总线波特率</h1><p>CAN总线属于异步通信，因此就有通信波特率，而这个波特率发生器就位于CAN控制器内部。我们不需要了解它是如何产生的，但需要了解它的含义。这章节针对初学者讲述以下两点内容。</p><h2 id="2-1-异步通信"><a href="#2-1-异步通信" class="headerlink" title="2.1 异步通信"></a>2.1 异步通信</h2><p>在串行通信中，主要分<strong>异步通信和同步通信</strong>。</p><p><strong>同步通信</strong>：通信设备之间通过同步信号（CLK时钟）来实现数据传输的通信叫同步通信。如I2C、SPI这类通信中都具有一个时钟信号，其实在STM32中USART也具有同步功能，只是我们大多数人都只用了它的异步功能。</p><p><strong>异步通信</strong>：简单来说，就是通信设备之间通过约定一样的时间来收发数据。而这个时间就会决定本节说的波特率。</p><h2 id="2-2-波特率"><a href="#2-2-波特率" class="headerlink" title="2.2 波特率"></a>2.2 波特率</h2><p>很多工程师一直都没彻底搞明白什么是波特率，我这里还是结合UART波特率来简述一下其含义。</p><p>在电子通信领域，波特（Baud）即调制速率，指的是有效数据信号调制载波的速率，即单位时间内载波调制状态变化的次数。它是对符号传输速率的一种度量，<strong>1波特即指每秒传输1个符号</strong>。</p><p>UART每秒钟传送240个字符，而每个字符格式包含10位（1个起始位，1个停止位，8个数据位），这时的<strong>波特率为240Bd，比特率为10位*240个/秒=2400bps</strong>。</p><p>从上面的描述可以总结：<br><strong>比特率</strong>：即单位时间内传送的二进制位数；</p><p><strong>波特率</strong>：即单位时间内传输的符号个数；</p><p>只有在每个符号只代表一个比特信息的情况下，波特率与比特率才在数值上相等，但是它们的意义并不相同。</p><h1 id="三、位时序"><a href="#三、位时序" class="headerlink" title="三、位时序"></a>三、位时序</h1><p>上一章节讲述了波特率，而<strong>决定波特率大小的就是本节说的位时序</strong>。在CAN标准中一个位可分为4段：<br><strong>·同步段（SS）</strong><br><strong>·传播时间段（PTS）</strong><br><strong>·相位缓冲段1（PBS1）</strong><br><strong>·相位缓冲段2（PBS2）</strong></p><p>这些段又由可称为 Time Quantum（简称Tq）的最小时间单位构成。</p><p>1位分为4个段，每个段又由若干个Tq构成，这称为位时序。</p><p>而在STM32参考手册中，将位时序分为三段，但它将它传播段和位段1合并在一起了，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/2.STM32%E4%BD%8D%E6%97%B6%E5%BA%8F.png?raw=true"><br></table><p>1位由多少个Tq构成、每个段又由多少个Tq构成等，可任意设定位时序。通过设定位时序，<strong>决定传输的波特率</strong>：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/3.%E6%B3%A2%E7%89%B9%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png?raw=true"><br></table><p>这几个参数会在以后编程中进行配置，从而决定通信的波特率。</p><p>关于同步，还有硬件同步、再同步等操作。但初学者可以不必过多理解，掌握上面基础内容就行了。更多关于位时序的内容可以参看 ISO 11898 标准。</p><h1 id="四、帧类型及格式说明"><a href="#四、帧类型及格式说明" class="headerlink" title="四、帧类型及格式说明"></a>四、帧类型及格式说明</h1><p>CAN总线是通过以下5种类型的帧进行通信：<br><strong>数据帧</strong>：用于发送单元向接收单元传送数据的帧。<br><strong>遥控帧</strong>：用于接收单元向具有相同 ID 的发送单元请求数据的帧。<br><strong>错误帧</strong>：用于当检测出错误时向其它单元通知错误的帧。<br><strong>过载帧</strong>：用于接收单元通知其尚未做好接收准备的帧。<br><strong>帧间隔</strong>：用于将数据帧及遥控帧与前面的帧分离开来的帧。</p><p><strong>数据帧和遥控帧</strong>有标准格式和扩展格式两种格式。标准格式有11个位的标识符ID，扩展格式有29个位的ID。</p><h2 id="4-1-数据帧"><a href="#4-1-数据帧" class="headerlink" title="4.1 数据帧"></a>4.1 数据帧</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/4.%E6%95%B0%E6%8D%AE%E5%B8%A7.png?raw=true"><br></table><p>如上图，数据帧由7个段构成：<br><strong>(1) 帧起始</strong><br>表示数据帧开始的段。<br><strong>(2) 仲裁段</strong><br>表示该帧优先级的段。<br><strong>(3) 控制段</strong><br>表示数据的字节数及保留位的段。<br><strong>(4) 数据段</strong><br>数据的内容，可发送 0～8 个字节的数据。<br><strong>(5) CRC 段</strong><br>检查帧的传输错误的段。<br><strong>(6) ACK 段</strong><br>表示确认正常接收的段。<br><strong>(7) 帧结束</strong><br>表示数据帧结束的段。</p><p>理解数据帧的含义，请从认真理解它的定义：用于发送单元向接收单元传送数据的帧。</p><p>一般的CAN总线通信，总线上通信绝大部分时候都是数据帧。像在CANOpen协议中，用的最多的PDO过程数据对象就是通过数据帧进行的通信。</p><p>初学者可以先理解数据帧，然后其他就容易理解了。下面再来讲述一下<strong>数据帧7段的详情</strong>。</p><h3 id="4-1-1-帧起始"><a href="#4-1-1-帧起始" class="headerlink" title="4.1.1 帧起始"></a>4.1.1 帧起始</h3><p>标准和扩展格式相同。表示帧开始的段，1个位的显性位（如下图）：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/5.%E8%B5%B7%E5%A7%8B%E6%AE%B5.png?raw=true"><br></table><p>关于显性和隐性电平，请参看我上一篇文章差分信号章节。</p><p><strong>总线上的电平有显性电平和隐性电平两种</strong>。<br>总线上执行逻辑上的线“与”时，显性电平的逻辑值为“0”，隐性电平为“1”。</p><p>“显性”具有“优先”的意味，只要有一个单元输出显性电平，总线上即为显性电平。并且，“隐性”具有“包容”的意味，<strong>只有所有的单元都输出隐性电平，总线上才为隐性电平</strong>。（显性电平比隐性电平更强）</p><h3 id="4-1-2-仲裁段"><a href="#4-1-2-仲裁段" class="headerlink" title="4.1.2 仲裁段"></a>4.1.2 仲裁段</h3><p>标准格式和扩展格式在此的构成有所不同。仲裁段表示该帧优先级的段，扩展格式多了18位ID（如下图）：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/6.%E4%BB%B2%E8%A3%81%E6%AE%B5.png?raw=true"><br></table><p>RTR = 0代表数据帧，RTR = 1代表远程帧。</p><p>为什么叫仲裁段，就是通过ID来判断总线上哪一个节点具有优先发送的权利。ID越小（0代表显性），优先级越高。</p><h3 id="4-1-3-控制段"><a href="#4-1-3-控制段" class="headerlink" title="4.1.3 控制段"></a>4.1.3 控制段</h3><p>标准和扩展格式的构成有所不同。控制段由 6 个位构成（如下图）：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/7.%E6%8E%A7%E5%88%B6%E6%AE%B5.png?raw=true"><br></table><p>它们除了都有4位表示数据段长度代码（DLC）外，标准帧有IDE（数值为0）位和r0保留位，扩展帧有r0和r1保留位。</p><p>保留位必须全部以显性电平发送。但接收方可以接收显性、隐性及其任意组合的电平。</p><h3 id="4-1-4-数据段"><a href="#4-1-4-数据段" class="headerlink" title="4.1.4 数据段"></a>4.1.4 数据段</h3><p>标准和扩展格式相同。数据段表示传输数据的内容，从 MSB（最高位）开始输出，可发送 0～8 个字节的数据，长度由前面控制段决定。</p><h3 id="4-1-5-CRC段"><a href="#4-1-5-CRC段" class="headerlink" title="4.1.5 CRC段"></a>4.1.5 CRC段</h3><p>标准和扩展格式相同。CRC段是检查帧传输错误的帧，由 15 个位的 CRC 顺序和 1 个位的 CRC 界定符（用于分隔的位）构成。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/8.CRC%E6%AE%B5.png?raw=true"><br></table><p>相比485这类通信，CAN控制器就已经把CRC校验做了，不需要你的程序再次去计算，从而节约了处理器资源。</p><h3 id="4-1-6-ACK段"><a href="#4-1-6-ACK段" class="headerlink" title="4.1.6 ACK段"></a>4.1.6 ACK段</h3><p>标准和扩展格式相同。ACK段用来确认是否正常接收。由 ACK 槽(ACK Slot)和 ACK 界定符 2 个位构成。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/9.ACK%E6%AE%B5.png?raw=true"><br></table><p>A.发送单元在 ACK 段发送 2 个位的隐性位。<br>B.接收到正确消息的单元在 ACK 槽(ACK Slot)发送显性位， 通知发送单元正常接收结束。这称作“发送 ACK”或者“返回 ACK”。</p><h3 id="4-1-7-帧结束"><a href="#4-1-7-帧结束" class="headerlink" title="4.1.7 帧结束"></a>4.1.7 帧结束</h3><p>标准和扩展格式相同。帧结束是表示该该帧的结束的段。由 7 个位的隐性位构成。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/10.%E5%B8%A7%E7%BB%93%E6%9D%9F.png?raw=true"><br></table><h2 id="4-2-遥控帧"><a href="#4-2-遥控帧" class="headerlink" title="4.2 遥控帧"></a>4.2 遥控帧</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/11.%E9%81%A5%E6%8E%A7%E5%B8%A7.png?raw=true"><br></table><p>和数据帧相比，遥控帧是接收单元向发送单元请求发送数据所用的帧。所以，遥控帧没有数据段。因此，遥控帧由如下 6 个段组成：<br><strong>(1) 帧起始（SOF）</strong><br>表示帧开始的段。<br><strong>(2) 仲裁段</strong><br>表示该帧优先级的段。可请求具有相同 ID 的数据帧。<br><strong>(3) 控制段</strong><br>表示数据的字节数及保留位的段。<br><strong>(4) CRC 段</strong><br>检查帧的传输错误的段。<br><strong>(5) ACK 段</strong><br>表示确认正常接收的段。<br><strong>(6) 帧结束</strong><br>表示遥控帧结束的段。</p><p>这6个段和上面数据帧的内容基本一样，这里就不一一讲述了。讲一下遥控帧和数据帧的区别：<br><strong>遥控帧的 RTR 位为隐性位，没有数据段。</strong><br><strong>没有数据段的数据帧和遥控帧可通过 RTR 位区别开来。</strong></p><p><strong>问题一：遥控帧没有数据段，数据长度码该如何表示？</strong><br>遥控帧的数据长度码以所请求数据帧的数据长度码表示。</p><p><strong>问题二：没有数据段的数据帧有何用途？</strong><br>例如，可用于各单元的定期连接确认/应答、或仲裁段本身带有实质性信息的情况下。</p><h2 id="4-3-错误帧"><a href="#4-3-错误帧" class="headerlink" title="4.3 错误帧"></a>4.3 错误帧</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/12.%E9%94%99%E8%AF%AF%E5%B8%A7.png?raw=true"><br></table><p>用于在接收和发送消息时检测出错误通知错误的帧。错误帧由错误标志和错误界定符构成。</p><p><strong>(1) 错误标志</strong><br>错误标志包括主动错误标志和被动错误标志两种。<br>主动错误标志： 6 个位的显性位。<br>被动错误标志： 6 个位的隐性位。</p><p><strong>(2) 错误界定符</strong><br>错误界定符由 8 个位的隐性位构成。</p><h2 id="4-4-过载帧"><a href="#4-4-过载帧" class="headerlink" title="4.4 过载帧"></a>4.4 过载帧</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/13.%E8%BF%87%E8%BD%BD%E5%B8%A7.png?raw=true"><br></table><p>过载帧是用于接收单元通知其尚未完成接收准备的帧。过载帧由过载标志和过载界定符构成。<br><strong>(1) 过载标志</strong><br>6 个位的显性位。<br>过载标志的构成与主动错误标志的构成相同。</p><p><strong>(2) 过载界定符</strong><br>8 个位的隐性位。<br>过载界定符的构成与错误界定符的构成相同。</p><h2 id="4-5-帧间隔"><a href="#4-5-帧间隔" class="headerlink" title="4.5 帧间隔"></a>4.5 帧间隔</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/14.%E5%B8%A7%E9%97%B4%E9%9A%94.png?raw=true"><br></table><p>帧间隔是用于分隔数据帧和遥控帧的帧。数据帧和遥控帧可通过插入帧间隔将本帧与前面的任何帧（数据帧、遥控帧、错误帧、过载帧）分开。</p><p>过载帧和错误帧前不能插入帧间隔。</p><p><strong>(1) 间隔</strong><br>3 个位的隐性位。</p><p><strong>(2) 总线空闲</strong><br>隐性电平，无长度限制（0 亦可）。<br>本状态下，可视为总线空闲，要发送的单元可开始访问总线。</p><p><strong>(3) 延迟传送（发送暂时停止）</strong><br>8 个位的隐性位。<br>只在处于被动错误状态的单元刚发送一个消息后的帧间隔中包含的段。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档部分文字来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　上一篇文章讲述了&lt;strong&gt;CAN收发器&lt;/strong&gt;的重要作用，也提及了一下CAN总线的优势主要在于&lt;strong&gt;CAN控制器&lt;/strong&gt;。CAN控制器在CAN网络中所处的位置如下图：&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_CAN%E6%80%BB%E7%BA%BF%E6%B3%A2%E7%89%B9%E7%8E%87%E3%80%81%E4%BD%8D%E6%97%B6%E5%BA%8F%E3%80%81%E5%B8%A7%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/1.CAN%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;　　本文讲述的CAN控制器实现的几个重要功能：&lt;strong&gt;CAN总线波特率、位时序、帧类型&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程03_CAN收发器功能、原理及作用</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程03_CAN收发器功能、原理及作用.html</id>
    <published>2018-09-20T09:00:00.000Z</published>
    <updated>2018-09-20T09:05:04.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　前面文章是从大方向介绍了CAN网络，让大家对CAN网络有一定的认识。本文将范围缩小，讲述整个CAN网络<strong>其中的一个CAN收发器</strong>。如下图标记出来的部分：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/1.CAN%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p>　　本文结合众多初学者容易产生的疑问来讲述CAN收发器相关的知识点，大概有如下几点：<br>　　<strong>·什么是CAN收发器？</strong><br>　　<strong>·CAN总线差分信号</strong><br>　　<strong>·CAN收发器芯片和485芯片差异</strong></p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、什么是CAN收发器？"><a href="#二、什么是CAN收发器？" class="headerlink" title="二、什么是CAN收发器？"></a>二、什么是CAN收发器？</h1><p>CAN收发器在整个CAN网络中所处的位置如上图所示。CAN收发器就是一块类似232或485的<strong>转换芯片</strong>，它的主要功能是<strong>将CAN控制器的TTL信号转换成CAN总线的差分信号</strong>。</p><h2 id="2-1-什么CAN控制器TTL信号？"><a href="#2-1-什么CAN控制器TTL信号？" class="headerlink" title="2.1 什么CAN控制器TTL信号？"></a>2.1 什么CAN控制器TTL信号？</h2><p>现在的CAN控制器一般都与MCU集成在一起，其发送和接收TTL信号就是MCU引脚（高或低）信号。</p><p>以前还有独立的CAN控制器，一个CAN网络节点会包含三块芯片：<strong>MCU芯片、CAN控制器、CAN收发器</strong>。现在是将前两者集成在一起了（看文章开篇图片）。</p><h1 id="三、CAN总线差分信号"><a href="#三、CAN总线差分信号" class="headerlink" title="三、CAN总线差分信号"></a>三、CAN总线差分信号</h1><p>CAN总线信号从CAN收发器出来，为<strong>「两线」「差分」信号</strong>，用隐形代表逻辑1，显性代表逻辑0。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/2.%E4%B8%A4%E7%BA%BF%E7%94%B5%E5%8E%8B%E4%BF%A1%E5%8F%B7.png?raw=true"><br></table><h2 id="1-CAN收发器两线"><a href="#1-CAN收发器两线" class="headerlink" title="1.CAN收发器两线"></a>1.CAN收发器两线</h2><p>芯片引脚CAN_H、CAN_L</p><h2 id="2-CAN-H和CAN-L电压"><a href="#2-CAN-H和CAN-L电压" class="headerlink" title="2.CAN_H和CAN_L电压"></a>2.CAN_H和CAN_L电压</h2><p>电压的大小根据芯片型号而定，一般常见的CAN收发芯片有3.3V和5V两种芯片。</p><p>如上图，为5V CAN收发芯片，在逻辑0和逻辑1时电压情况：<br><strong>逻辑0时</strong>：显性，CAN_H=3.5V，CAN_L=1.5V；<br><strong>逻辑1时</strong>：隐性，CAN_H=2.5V，CAN_L=2.5V；</p><p>当然，3.3V电压芯片的总线电压原理类似。而实际应用中，总线电压并非绝对的像上面说的3.5V、2.5V、1.5V这种电压，会受到导线电阻、外界干扰等影响。</p><h2 id="3-隐性和显性"><a href="#3-隐性和显性" class="headerlink" title="3.隐性和显性"></a>3.隐性和显性</h2><p>学过生物都知道，基因有隐性和显性，隐性的基因实际存在，但不会表现出来。有显性的基因就会变现出来。<br>这里CAN总线隐性信号和显性信号道理一样，<strong>当总线两者信号都有时，总线表现出来的就是显性信号</strong>。</p><p><strong>提示</strong>：我们这里说的显性和隐性信号，指的是总线传输的bit位信号。</p><p>所以，CAN总线平时空闲表现为隐性状态。如果想要发送的信号为隐性位，那么总线才会呈现出来隐性。否则，只要其它有一个节点发送显性信号，你这个节点发送出来的隐性信号就无效。</p><h2 id="4-CAN收发器R引脚"><a href="#4-CAN收发器R引脚" class="headerlink" title="4.CAN收发器R引脚"></a>4.CAN收发器R引脚</h2><p>CAN收发器R引脚就是与CAN控制器接收相连的引脚。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/3.CAN%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p>R引脚的信号是表示总线当前的信号，用于控制器实时监测总线信号。主要两个目的：<br><strong>A.监测其它节点发送出来的信号</strong>：别人给它发送数据；<br><strong>B.监测自身节点发送出去的信号</strong>：自己发送是否失败。就像上面说的，自己发送一个隐形信号，结果监测出来是显性信号，那就说明是别人在发送数据。</p><h1 id="四、CAN收发器芯片和485芯片差异"><a href="#四、CAN收发器芯片和485芯片差异" class="headerlink" title="四、CAN收发器芯片和485芯片差异"></a>四、CAN收发器芯片和485芯片差异</h1><p>CAN通信和485通信一样，属于半双工。但是，为什么CAN总线相比485通信不管在<strong>速度和稳定性</strong>上都具有明显优势呢？</p><h2 id="4-1-总线利用率"><a href="#4-1-总线利用率" class="headerlink" title="4.1 总线利用率"></a>4.1 总线利用率</h2><p>CAN收发器工作原理与485具有较大差异。从上面的差分信号可以看得出来，两种芯片同时存在，只有显性信号有效，而不会影响总线传输。简单来说就是CAN总线具有自动仲裁功能，这样就提高了总线的利用率。</p><p>RS485总线是一种常规的通信总线，它不能够做总线的自动仲裁，也就是不能够同时发送数据以避免总线竞争，所以整个系统的通信效率必然较低，数据冗余量较大，对于速度要求高的应用场所不适应用RS485总线。</p><p><strong>提示：</strong><br>CAN总线没有被发送出去的隐性信号，会由CAN控制器后续发送出去。这里牵涉到CAN总线优先级的问题，后续进一步讲述。<br>当然，CAN相比485具有明显优势，<strong>主要原因还是在于CAN控制器</strong>。</p><h2 id="4-2-可以不使用CAN收发器吗？"><a href="#4-2-可以不使用CAN收发器吗？" class="headerlink" title="4.2 可以不使用CAN收发器吗？"></a>4.2 可以不使用CAN收发器吗？</h2><p>UART可以直接通过TX连接对方的RX引脚，利用TTL信号进行通信，那么CAN也可以吗？</p><p><strong>答案：单向传输可以，双向传输就不行。</strong><br>原因很简单，上面说了，CAN控制器会实时监测发送出去的信号是否正确。也就是说TX要与RX信号一致才行，否则CAN控制器认为你发送失败。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档部分文字来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　前面文章是从大方向介绍了CAN网络，让大家对CAN网络有一定的认识。本文将范围缩小，讲述整个CAN网络&lt;strong&gt;其中的一个CAN收发器&lt;/strong&gt;。如下图标记出来的部分：&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;600&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_CAN%E6%94%B6%E5%8F%91%E5%99%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/1.CAN%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;　　本文结合众多初学者容易产生的疑问来讲述CAN收发器相关的知识点，大概有如下几点：&lt;br&gt;　　&lt;strong&gt;·什么是CAN收发器？&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;·CAN总线差分信号&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;·CAN收发器芯片和485芯片差异&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程02_理解CAN总线协议</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程02_理解CAN总线协议.html</id>
    <published>2018-09-20T08:30:00.000Z</published>
    <updated>2018-09-20T09:04:58.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　上一篇文章讲述了CAN和CANOpen，相信大家CAN和CANOpen有一定理解了。本文说的<strong>CAN即是一种总线</strong>，也是一种协议。因此，我们常听见CAN总线，也常听见CAN协议。</p><p>　　CAN协议和CANOpen协议是两套不同的协议。<strong>从软硬件层次来划分，CAN协议属于硬件协议，而CANOpen属于软件协议</strong>。</p><p>　　本篇文章先概述一下CAN网络，让大家对CAN总线协议有一个全局的概念，再到底层的CAN总线协议知识。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、CAN网络"><a href="#二、CAN网络" class="headerlink" title="二、CAN网络"></a>二、CAN网络</h1><p>CAN网络可以理解为多台CAN设备连接在同一条CAN总线上组合成的网络，<strong>其中的CAN设备我们称之为节点</strong>。CAN网络拓扑结构如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/1.CAN%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png?raw=true"><br></table><p>如上图，一个CAN节点主要包含三类：<strong>MCU应用程序、CAN控制器、CAN收发器</strong>。</p><h2 id="2-1-MCU应用程序"><a href="#2-1-MCU应用程序" class="headerlink" title="2.1 MCU应用程序"></a>2.1 MCU应用程序</h2><p>MCU应用程序我将其分为三块：<strong>业务逻辑代码、协议层代码、底层驱动代码</strong>。</p><p><strong>A.业务逻辑代码</strong>：是根据项目需求而定，也很好理解。比如我读取一个传感器数据，并对其做出相应逻辑处理。</p><p><strong>B.协议层代码</strong>：比如后续要讲述的CANOpen。</p><p><strong>C.底层驱动代码</strong>：配置CAN总线相应参数、控制收发的代码。</p><h2 id="2-2-CAN控制器"><a href="#2-2-CAN控制器" class="headerlink" title="2.2 CAN控制器"></a>2.2 CAN控制器</h2><p>CAN控制器内部结构还是挺复杂的，<strong>一般现在CAN控制器都是与处理器集成在一起</strong>。</p><p>其实对于编程的人来说，无非也就是包含一些控制、状态、配置等寄存器。</p><p>比如我们看到有些STM32芯片带有CAN，也就是说CAN控制器已经集成在STM32芯片中了，我们只需要编程操作其中的寄存器即可。</p><h2 id="2-3-CAN收发器"><a href="#2-3-CAN收发器" class="headerlink" title="2.3 CAN收发器"></a>2.3 CAN收发器</h2><p>CAN收发器：将CAN收发引脚（CAN_TX和CAN_RX）的<strong>TTL信号转换成CAN总线的电平信号</strong>。</p><p><strong>PS：你可以把CAN总线通信认为是UART通过485进行通信</strong>：CAN控制器就如UART的控制器，而CAN收发器就如485转换芯片。</p><h1 id="三、ISO标准化的CAN协议"><a href="#三、ISO标准化的CAN协议" class="headerlink" title="三、ISO标准化的CAN协议"></a>三、ISO标准化的CAN协议</h1><p>写这一章节的主要目的就是想让大家<strong>了解CAN总线位于OSI所在层次</strong>。</p><h2 id="3-1-ISO-OSI基本参照模型"><a href="#3-1-ISO-OSI基本参照模型" class="headerlink" title="3.1 ISO/OSI基本参照模型"></a>3.1 ISO/OSI基本参照模型</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/2.ISO%E3%80%81OSI%E5%9F%BA%E6%9C%AC%E5%8F%82%E7%85%A7%E6%A8%A1%E5%9E%8B.png?raw=true"><br></table><p>【注】<br><strong>ISO</strong>：International Standardization Organization国际标准化组织；<br><strong>OSI</strong>：Open Systems Interconnection开放式系统间互联；</p><h2 id="3-2-CAN在OSI模型中的定义"><a href="#3-2-CAN在OSI模型中的定义" class="headerlink" title="3.2 CAN在OSI模型中的定义"></a>3.2 CAN在OSI模型中的定义</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/3.CAN%E5%9C%A8OSI%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%AE%9A%E4%B9%89.png?raw=true"><br></table><p>【注】<br><strong>LLC</strong>：Logical Link Control逻辑链路控制；<br><strong>MAC</strong>：Medium Access Control媒介访问控制；</p><p>从上图可以知道CAN总线底层硬件的内容（CAN控制器、收发器）主要位于OSI的第1层和第2层。</p><h1 id="四、概述CAN总线协议"><a href="#四、概述CAN总线协议" class="headerlink" title="四、概述CAN总线协议"></a>四、概述CAN总线协议</h1><p>CAN总线协议：就是为了保证通信（收发）数据在CAN总线上能稳定传输而制订的一套协议。</p><p>CAN总线协议的内容很多，为方便初学者理解，本文先大概描述一下CAN总线协议，后续文章详细讲述CAN总线协议的内容。</p><h2 id="4-1-总线信号"><a href="#4-1-总线信号" class="headerlink" title="4.1 总线信号"></a>4.1 总线信号</h2><p>CAN总线为<strong>「两线」「差分」</strong>信号，用隐形代表逻辑1，显性代表逻辑0。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/3.CAN%E6%80%BB%E7%BA%BF%E4%BF%A1%E5%8F%B7.png?raw=true"><br></table><h2 id="4-2-优先级"><a href="#4-2-优先级" class="headerlink" title="4.2 优先级"></a>4.2 优先级</h2><p>假如某一时刻，一个设备（节点）往总线发0，一个设备往总线发1。那么总线会呈现什么现象？</p><p>答案：最后总线呈现为<strong>显性</strong>，也就是0。</p><h2 id="4-3-位时序"><a href="#4-3-位时序" class="headerlink" title="4.3 位时序"></a>4.3 位时序</h2><p>位时序逻辑将监视串行总线，执行采样并调整采样点，在调整采样点时，需要在起始位边沿进行同步并后续的边沿进行再同步。</p><p>简单的说就是对一个bit位分几段进行采样，目的就是提高数据传输稳定性。在STM32中底层驱动代码就需要进行位时序编程，在STM32参考手册中也会发现如下位时序图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/4.%E4%BD%8D%E6%97%B6%E5%BA%8F.png?raw=true"><br></table><h2 id="4-4-帧的种类和格式"><a href="#4-4-帧的种类和格式" class="headerlink" title="4.4 帧的种类和格式"></a>4.4 帧的种类和格式</h2><p>帧的种类有多种：<br><strong>数据帧</strong>：用于发送单元向接收单元传送数据的帧。<br><strong>遥控帧</strong>：用于接收单元向具有相同 ID 的发送单元请求数据的帧。<br><strong>错误帧</strong>：用于当检测出错误时向其它单元通知错误的帧。<br><strong>过载帧</strong>：用于接收单元通知其尚未做好接收准备的帧。<br><strong>帧间隔</strong>：用于将数据帧及遥控帧与前面的帧分离开来的帧。</p><p><strong>数据帧和遥控帧</strong>有标准格式和扩展格式两种格式。标准格式有11个位的标识符ID，扩展格式有29个位的ID。</p><h2 id="4-5-位填充"><a href="#4-5-位填充" class="headerlink" title="4.5 位填充"></a>4.5 位填充</h2><p>位填充是为防止突发错误而设定的功能。当同样的电平持续 5 位时则添加一个位的反型数据。如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/5.%E4%BD%8D%E5%A1%AB%E5%85%85.png?raw=true"><br></table><h2 id="4-6-错误的种类"><a href="#4-6-错误的种类" class="headerlink" title="4.6 错误的种类"></a>4.6 错误的种类</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E7%90%86%E8%A7%A3CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/6.%E9%94%99%E8%AF%AF%E7%9A%84%E7%A7%8D%E7%B1%BB.png?raw=true"><br></table><p>CAN总线协议内容很多，初学者先了解这些，后面文章具体到每一个点上，相信大家就会更明白其中的含义。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档部分文字来自网络，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　上一篇文章讲述了CAN和CANOpen，相信大家CAN和CANOpen有一定理解了。本文说的&lt;strong&gt;CAN即是一种总线&lt;/strong&gt;，也是一种协议。因此，我们常听见CAN总线，也常听见CAN协议。&lt;/p&gt;
&lt;p&gt;　　CAN协议和CANOpen协议是两套不同的协议。&lt;strong&gt;从软硬件层次来划分，CAN协议属于硬件协议，而CANOpen属于软件协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　本篇文章先概述一下CAN网络，让大家对CAN总线协议有一个全局的概念，再到底层的CAN总线协议知识。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>CANOpen系列教程01_初识CAN与CANOpen及相关内容</title>
    <link href="http://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_%E5%88%9D%E8%AF%86CAN%E4%B8%8ECANOpen%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9.html"/>
    <id>http://www.strongerhuang.com/CANOpen/CANOpen系列教程01_初识CAN与CANOpen及相关内容.html</id>
    <published>2018-09-20T08:00:00.000Z</published>
    <updated>2018-09-20T09:04:51.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　我之前学习CANOpen的时候，网上有用的资料极少，走了不少弯路。到目前为止，网上关于CANOpen的资料依然很少。所以，特地写下该系列教程，帮助初学者跨过这道坎。</p><p>　　从我个人学习CANOpen的经历来看，学会使用CANOpen难度其实不大。<strong>难点在于需要掌握的基础知识很多，而且许多都有关联性，容易把人绕晕</strong>。</p><p>　　那么，我希望通过结合之前我的学习经历，以及工作经验，<strong>站在小白的角度写下该系列教程</strong>。当然，该教程由我个人编辑并整理，难免有些废话，或者错误，还请谅解。</p><a id="more"></a><p>　　本文章收录于<a href="https://www.strongerhuang.com/CANOpen/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">【CANOpen系列教程】</a>，在我的博客分类“CANOpen系列教程”也能查找到。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【CANOpen系列教程】即可查看。</p><h1 id="二、初识CAN与CANOpen"><a href="#二、初识CAN与CANOpen" class="headerlink" title="二、初识CAN与CANOpen"></a>二、初识CAN与CANOpen</h1><h2 id="2-1-什么是CAN"><a href="#2-1-什么是CAN" class="headerlink" title="2.1 什么是CAN?"></a>2.1 什么是CAN?</h2><p>CAN：是Controller Area Network的缩写，即控制器局域网络，属于工业现场总线，是ISO国际标准化的串行通信协议。</p><p>从OSI（Open System Interconnection开放系统互联）7层网络模型的角度来看，CAN现场总线仅仅定义了第 1 层（物理层）和第 2 层（数据链路层）。</p><p>而在实际设计中，这两层完全由硬件实现，设计人员无需再为此开发相关软件或固件（Firmware），只要了解如何调用相关的接口和寄存器，即可完成对CAN的控制。</p><p>上面介绍的内容可能太官方，初学者可能看了之后还是不明白。<strong>简单的说：CAN总线就是一层硬件协议</strong>。比如：差分信号电平的定义、数据帧的定义等等。</p><p><strong>PS</strong>：初学者可以结合UART来理解，比如UART串口发送一个字符’A’，它就是一种串行通信的方式。</p><h2 id="2-2-什么是CANOpen"><a href="#2-2-什么是CANOpen" class="headerlink" title="2.2 什么是CANOpen?"></a>2.2 什么是CANOpen?</h2><p>CANopen是一种架构在CAN控制局域网上的高层软件通信协议，包括通信子协议及设备子协议，常在嵌入式系统中使用，也是工业控制常用到的一种现场总线协议。</p><p>CANopen协议是在20世纪90年代末，由总部位于德国纽伦堡的 CiA 组织——CAN-in-Automation，在 CAL（CAN Application Layer）的基础上发展而来。</p><p>所以，关于CANOpen协议内容请参看：<a href="http://www.can-cia.org" target="_blank" rel="noopener">http://www.can-cia.org</a></p><p>由于CAN总线只定义了OSI中的物理层和数据链路层，因此对于不同的应用出现了不同的【应用层协议】，为了使不同厂商的产品能够相互兼容，世界范围内需要通用的CAN应用层通信协议。</p><p>在过去的二三十年中涌现出许多的协议，不过到现在为止能够广泛被承认的协议却不多，现在应用较广的CAN应用层协议主要有以下三种：<br><strong>CANopen协议</strong>：主要应用在汽车、工业控制、自动化仪表等领域，目前由 CIA 负责管理和维护；</p><p><strong>J1939协议</strong>：CAN总线在商用车领域占有绝大部分市场份额的应用层协议，由美国机动车工程师学会发起，现已在全球范围内得到广泛的应用；</p><p><strong>DeviceNet协议</strong>：在美国等地占有相当大的市场份额，主要用于工业通信及控制和仪器仪表等领域。</p><p>而本文说的CANOpen也是目前应用较广的一种协议。简单的说，CANOpen就是CAN总线应用层协议。</p><p><strong>PS</strong>：学习CANOpen应用层协议之前请务必先了解CAN总线协议。</p><h1 id="三、CAN总线特点"><a href="#三、CAN总线特点" class="headerlink" title="三、CAN总线特点"></a>三、CAN总线特点</h1><p>CAN总线采用差分信号传输，通常情况下<strong>只需要两根信号线（CAN-H和CAN-L）就可以进行正常的通信</strong>。在干扰比较强的场合，还需要用到屏蔽地即CAN-G（主要功能是屏蔽干扰信号）， CAN协议推荐用户使用屏蔽双绞线作为CAN总线的传输线。</p><p>CAN总线通信的优势和特点：<br><strong>A.</strong>CAN总线上任意节点，均可在任意时刻主动的向其它节点发起通信，但在同一时刻优先级高的节点能获得总线的使用权。</p><p><strong>B.</strong>标准CAN总线传输波特率可达到1Mbps。在5Kbps的通信波特率下最远传输距离可以达到 10Km，即使在1Mbps的波特率下也能传输40m的距离。</p><p><strong>C.</strong>CAN总线定义使用了硬件报文滤波，可实现点对点及点对多点的通信方式，不需要软件来控制。</p><p><strong>D.</strong>CAN总线所挂接的节点数量主要取决于CAN总线收发器或驱动器，目前的驱动器一般都可以使同一网络容量达到110个节点。</p><p><strong>E.</strong>CAN总线通信介质可采用双绞线、同轴电缆或光纤，选择极为灵活。可大大节约组网成本。</p><p>当然，CAN总线的优势还有许多，当你掌握之后就会明白为什么CAN总线应用得如此广泛了。</p><h1 id="四、教程规划"><a href="#四、教程规划" class="headerlink" title="四、教程规划"></a>四、教程规划</h1><p>CAN总线及CANOpen协议相关的内容相对比较多，如果每一个细节知识点都写出来，可能花掉我业余时间写一年也写不完。</p><p>我写该教程目的在于引导初学者入门，我会结合实例代码让大家边学边理解，至于实际项目编程应用不一定讲述的很多（这个看后面情况）。</p><p><strong>首先从CAN底层讲起，再到CANOpen协议相关基础知识，最后实际应用</strong>。当然，中间每一个环节内容相对可能较多，也有可能会遗漏部分内容。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档部分文字来自周立功的相关教程，仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【CANOpen系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　我之前学习CANOpen的时候，网上有用的资料极少，走了不少弯路。到目前为止，网上关于CANOpen的资料依然很少。所以，特地写下该系列教程，帮助初学者跨过这道坎。&lt;/p&gt;
&lt;p&gt;　　从我个人学习CANOpen的经历来看，学会使用CANOpen难度其实不大。&lt;strong&gt;难点在于需要掌握的基础知识很多，而且许多都有关联性，容易把人绕晕&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　那么，我希望通过结合之前我的学习经历，以及工作经验，&lt;strong&gt;站在小白的角度写下该系列教程&lt;/strong&gt;。当然，该教程由我个人编辑并整理，难免有些废话，或者错误，还请谅解。&lt;/p&gt;
    
    </summary>
    
      <category term="CANOpen系列教程" scheme="http://www.strongerhuang.com/categories/CANOpen%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CAN" scheme="http://www.strongerhuang.com/tags/CAN/"/>
    
      <category term="CAN总线" scheme="http://www.strongerhuang.com/tags/CAN%E6%80%BB%E7%BA%BF/"/>
    
      <category term="CANOpen" scheme="http://www.strongerhuang.com/tags/CANOpen/"/>
    
      <category term="CanFestival" scheme="http://www.strongerhuang.com/tags/CanFestival/"/>
    
  </entry>
  
  <entry>
    <title>MAVLink学习之路</title>
    <link href="http://www.strongerhuang.com/MAVLink/MAVLink%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.html"/>
    <id>http://www.strongerhuang.com/MAVLink/MAVLink学习之路.html</id>
    <published>2018-09-03T04:30:00.000Z</published>
    <updated>2018-09-03T05:55:13.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【MAVLink学习之路】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【EmbeddedDevelop】</a>，关注微信公众号回复【MAVLink学习之路】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/MAVLink/MAVLink%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF01_%E8%AE%A4%E8%AF%86MAVLink.html">1.MAVLink学习之路01_认识MAVLink</a></p><p><a href="https://www.strongerhuang.com/MAVLink/MAVLink%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF02_%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD%E3%80%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">2.MAVLink学习之路02_工具下载、环境搭建</a></p><p><a href="https://www.strongerhuang.com/MAVLink/MAVLink%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF03_XML%E4%B8%AD%E5%AE%9A%E4%B9%89MSG%E5%B9%B6%E7%94%9F%E6%88%90C%E4%BB%A3%E7%A0%81.html">3.MAVLink学习之路03_XML中定义MSG并生成C代码</a></p><p><a href="https://www.strongerhuang.com/MAVLink/MAVLink%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF04_MAVLink%E7%A7%BB%E6%A4%8D%E5%88%B0STM32%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4.html">4.MAVLink学习之路04_MAVLink移植到STM32具体步骤</a></p><p><a href="https://www.strongerhuang.com/MAVLink/MAVLink%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF05_MAVLink%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90.html">5.MAVLink学习之路05_MAVLink应用编程接口分析</a></p><p>正在努力更新中，敬请等待……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【MAVLink学习之路】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【MAVLink学习之路】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【EmbeddedDevelop】&lt;/a&gt;，关注微信公众号回复【MAVLink学习之路】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="MAVLink学习之路" scheme="http://www.strongerhuang.com/categories/MAVLink%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="MAVLink" scheme="http://www.strongerhuang.com/tags/MAVLink/"/>
    
      <category term="无人机" scheme="http://www.strongerhuang.com/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
      <category term="通信协议" scheme="http://www.strongerhuang.com/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
