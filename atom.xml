<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmbeddedDevelop</title>
  
  <subtitle>作者：strongerHuang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.strongerhuang.com/"/>
  <updated>2019-06-28T06:22:00.688Z</updated>
  <id>http://www.strongerhuang.com/</id>
  
  <author>
    <name>strongerHuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>printf系列教程</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程.html</id>
    <published>2019-06-28T04:00:00.000Z</published>
    <updated>2019-06-28T06:22:00.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【printf系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【嵌入式专栏】</a>，关注微信公众号回复【printf系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/printf/printf系列教程00_概述printf各种打印输出方法和相关内容.html">printf系列教程00_概述printf各种打印输出方法和相关内容</a><br><a href="https://www.strongerhuang.com/printf/printf系列教程01_UART打印输出配置，基于STM32（Keil、IAR）.html">printf系列教程01_UART打印输出配置，基于STM32（Keil、IAR）</a><br><a href="https://www.strongerhuang.com/printf/printf系列教程02_仿真打印输出配置，基于STM32（Keil、IAR）.html">printf系列教程02_仿真打印输出配置，基于STM32（Keil、IAR）</a><br><a href="https://www.strongerhuang.com/printf/printf系列教程03_SWO打印输出配置，基于Keil『Debug（printf）Viewer』.html">printf系列教程03_SWO打印输出配置，基于Keil『Debug（printf）Viewer』</a><br><a href="https://www.strongerhuang.com/printf/printf系列教程04_SWO打印输出配置，基于IAR『Terminal IO』.html">printf系列教程04_SWO打印输出配置，基于IAR『Terminal IO』</a><br><a href="https://www.strongerhuang.com/printf/printf系列教程05_SWO打印输出配置，基于ST-LINK Utility『Serial Wire Viewer』.html">printf系列教程05_SWO打印输出配置，基于ST-LINK Utility『Serial Wire Viewer』</a><br><a href="https://www.strongerhuang.com/printf/printf系列教程06_SWO打印输出配置，基于J-Link『SWO Viewer』.html">printf系列教程06_SWO打印输出配置，基于J-Link『SWO Viewer』</a><br><a href="https://www.strongerhuang.com/printf/printf系列教程07_JLink-RTT打印输出配置，基于J-Link『RTT Viewer』.html">printf系列教程07_JLink-RTT打印输出配置，基于J-Link『RTT Viewer』</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【printf系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【嵌入式专栏】&lt;/a&gt;，关注微信公众号回复【printf系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程07_JLink-RTT打印输出配置，基于J-Link『RTT Viewer』</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程07_JLink-RTT打印输出配置，基于J-Link『RTT Viewer』.html</id>
    <published>2019-06-28T03:50:00.000Z</published>
    <updated>2019-06-28T06:00:41.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p><strong>SWO：</strong>Serial Wire Output，串行线输出<br><strong>RTT：</strong>Real Time Transfer，实时传输</p><p>前面SWO文章，实现原理是通过MCU的SWO引脚输出信息（到显示终端SWV）。</p><p>而本文讲述的RTT不需要通过额外SWO引脚，即可实现printf输出，而且性能（耗时）远高于SWO。</p><table><br><img align="left" width="475" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/0.%E6%80%A7%E8%83%BD.png?raw=true"><br></table><a id="more"></a><h1 id="二、关于RTT"><a href="#二、关于RTT" class="headerlink" title="二、关于RTT"></a>二、关于RTT</h1><p>SEGGER实时传输(RTT)是一种在嵌入式应用中实现交互式用户I/O的技术。</p><p>它结合了SWO和半主机（ semihosting）的优点，具有很高的性能。</p><p>使用RTT，可以从目标微控制器输出信息，并以非常高的速度向应用程序发送输入，而不会影响目标的实时性。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/1.J-Link%20RTT.png?raw=true"><br></table><p>Cortex - M0不支持SWO，而本文讲述的RTT则支持Cortex - M0，文末提供STM32F0工程。</p><h1 id="三、关于J-Link-RTT-Viewer"><a href="#三、关于J-Link-RTT-Viewer" class="headerlink" title="三、关于J-Link RTT Viewer"></a>三、关于J-Link RTT Viewer</h1><p>J-Link RTT Viewer是在调试主机上使用RTT功能的Windows GUI应用程序。</p><p>RTT Viewer可以独立使用，打开自己与J-Link的连接，并与正在运行的调试会话目标或并行，连接到它并使用现有的J-Link连接。</p><p>RTT Viewer支持RTT的主要功能：<br><strong>·</strong>通道0上的终端输出<br><strong>·</strong>将文本输入发送到通道0<br><strong>·</strong>最多16个虚拟终端，只有一个目标通道<br><strong>·</strong>控制文本输出：彩色文本，擦除控制台<br><strong>·</strong>在通道1上记录数据</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/2.RTTViewer.png?raw=true"><br></table><p><strong>本文主要结合J-Link RTT Viewer讲述</strong>，当然支持RTT的还有J-Link RTT Client 和J-Link RTT Logger。</p><p>更多相关介绍，可以参看：<br><a href="https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer" target="_blank" rel="noopener">https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer</a></p><h1 id="四、获取RTT源码"><a href="#四、获取RTT源码" class="headerlink" title="四、获取RTT源码"></a>四、获取RTT源码</h1><p>我们需要在工程中添加RTT源码，同时需要J-Link RTT Viewer查看器支持。</p><p>J-Link / J-Trace下载地址（Windows版本）：<br><a href="https://www.segger.com/downloads/jlink/JLink_Windows.exe" target="_blank" rel="noopener">https://www.segger.com/downloads/jlink/JLink_Windows.exe</a></p><p>安装之后，在安装目录下包含RTT源码：<br>C:\Program Files (x86)\SEGGER\JLink\Samples\RTT</p><p>解压SEGGER_RTT_V***.zip之后，复制整个RTT目录源码到你工程。</p><p>提示：<br>解压之后，只需复制RTT目录就行。</p><h2 id="4-1-添加RTT到工程"><a href="#4-1-添加RTT到工程" class="headerlink" title="4.1 添加RTT到工程"></a>4.1 添加RTT到工程</h2><p>添加源码文件到工程主要有两个步骤：1.添加源码文件到工程。 2.添加文件路径。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/3.%E6%B7%BB%E5%8A%A0%E6%BA%90%E7%A0%81.png?raw=true"><br></table><p>这里不讲述具体添加过程，Keil 和 IAR之前有讲述，请参看我的文章：<br><a href="https://mp.weixin.qq.com/s/pBZ5IGmpC6J5S6qu0A4mbw" target="_blank" rel="noopener">Keil新建基础软件工程</a><br><a href="https://mp.weixin.qq.com/s/v38QcsYuE_u8qjmjVSKEpQ" target="_blank" rel="noopener">IAR新建基础软件工程</a></p><p>当然，我下面有提供添加好的源码工程。</p><h2 id="4-2-应用程序"><a href="#4-2-应用程序" class="headerlink" title="4.2 应用程序"></a>4.2 应用程序</h2><p>调用RTT的打印，和常规的printf类似。<br>添加头文件：#include “SEGGER_RTT.h”</p><p>再调用SEGGER_RTT_printf函数打印输出：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/4.%E5%BA%94%E7%94%A8%E8%AF%B4%E6%98%8E.png?raw=true"><br></table><p>这里SEGGER_RTT_printf和print不同的是：<strong>前面多了一个“终端号”参数</strong>。（我们使用终端0）</p><h1 id="五、RTT-Viewer配置、输出"><a href="#五、RTT-Viewer配置、输出" class="headerlink" title="五、RTT Viewer配置、输出"></a>五、RTT Viewer配置、输出</h1><p>和前面讲述的SWV查看器类似，配置相关信息即可输出。</p><p>安装目录：C:\Program Files (x86)\SEGGER\JLink</p><p>下载程序到MCU，连接J-Link，打开安装目录下的J-Link RTT Viewer，配置参数：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/5.J-Link%20RTT%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE.png?raw=true"><br></table><table><br><strong>输出效果：</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/6.J-Link%20RTT%E8%BE%93%E5%87%BA%E6%95%88%E6%9E%9C.png?raw=true"><br></table><h1 id="六、下载"><a href="#六、下载" class="headerlink" title="六、下载"></a>六、下载</h1><p>为方便大家理解，提供源码工程下载，参考代码：<br><strong>·</strong>STM32F051（HAL）_JLink-RTT<br><strong>·</strong>STM32F103（HAL）_JLink-RTT</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA</a></p><p>提取码：nbd3</p><p><strong>提示：</strong><br>1.若链接失效，请关注公众号获取最新链接。<br>2.源码仅供学习参考，不一定适用于实际项目。</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SWO：&lt;/strong&gt;Serial Wire Output，串行线输出&lt;br&gt;&lt;strong&gt;RTT：&lt;/strong&gt;Real Time Transfer，实时传输&lt;/p&gt;
&lt;p&gt;前面SWO文章，实现原理是通过MCU的SWO引脚输出信息（到显示终端SWV）。&lt;/p&gt;
&lt;p&gt;而本文讲述的RTT不需要通过额外SWO引脚，即可实现printf输出，而且性能（耗时）远高于SWO。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;img align=&quot;left&quot; width=&quot;475&quot; src=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B07_JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ERTT%20Viewer%E3%80%8F/0.%E6%80%A7%E8%83%BD.png?raw=true&quot;&gt;&lt;br&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程06_SWO打印输出配置，基于J-Link『SWO Viewer』</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ESWO%20Viewer%E3%80%8F.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程06_SWO打印输出配置，基于J-Link『SWO Viewer』.html</id>
    <published>2019-06-28T03:30:00.000Z</published>
    <updated>2019-06-28T06:47:45.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p><strong>SWD：</strong>Serial Wire Debug，串行线调试<br><strong>SWO：</strong>Serial Wire Output，串行线输出<br><strong>SWV：</strong>Serial Wire Viewer，串行线查看器<br><strong>ITM：</strong>Instrumentation Trace Macrocell，指令跟踪宏单元</p><p>SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。</p><p>它是利用Cortex内核中ITM模块来实现此功能。</p><a id="more"></a><p>连接引脚：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/1.%E5%BC%95%E8%84%9A%E7%9B%B8%E8%BF%9E.png?raw=true"><br></table><p>SWO输出，需要一根SWO（引脚）线，同时需要借助SWV（查看器）查看数据，我打算整理4种查看方法：<br><strong>·</strong>基于Keil的『Debug(printf)Viewer』<br><strong>·</strong>基于IAR的『Terminal IO』<br><strong>·</strong>基于ST-LINK Utility的『Serial Wire Viewer』<br><strong>·基于J-Link的『SWO Viewer』</strong></p><p>本文主要是<strong>第四种基于J-Link的『SWO Viewer』</strong>，会结合STM32，ST-link和J-link工具讲述相关配置。</p><p>想更加了解ITM，请参看<a href="https://mp.weixin.qq.com/s/lGwKyVdHkMuSOYcgASLeNg" target="_blank" rel="noopener">《<strong>printf系列教程03</strong>》</a>中第二章节&lt;关于ITM&gt;。</p><h1 id="二、SWO引脚配置"><a href="#二、SWO引脚配置" class="headerlink" title="二、SWO引脚配置"></a>二、SWO引脚配置</h1><p>SWO引脚可以理解为UART的Tx引脚，如果不连接此引脚，则（SWV）终端不会接收打印信息。</p><p>对于STM32而言，只要是Cortex-M3/M4/M7内核的MCU都有SWO引脚。</p><p>而Cortex-M0则没有此项功能，包含STM32F0、STM32L0和STM32G0等。</p><p>在STM32CubeMX工具中，Debug选项进行如下配置即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/3.SWO%E5%BC%95%E8%84%9A%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><h1 id="三、SWO输出代码"><a href="#三、SWO输出代码" class="headerlink" title="三、SWO输出代码"></a>三、SWO输出代码</h1><p>在ST-LINK Utility的『Serial Wire Viewer』显示打印信息，与Keil、IAR差异在于：显示的位置不同，MCU中代码其实一样。</p><h2 id="3-1-重定义fputc"><a href="#3-1-重定义fputc" class="headerlink" title="3.1 重定义fputc"></a>3.1 重定义fputc</h2><p>和UART实现printf打印输出区别就是：将重定义代码中UART发送字符，改为ITM发送字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">  ITM_SendChar(ch);</span><br><span class="line">  return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ITM_SendChar说明</strong><br>这个函数位于core_cm3.h（或cm4 cm7）中，直接调用即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F/3.ITM%E6%BA%90%E7%A0%81.png?raw=true"><br></table><p><strong>修改ITM端口</strong><br>比如：修改成使用ITM端口1，修改该函数对应值即可：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F/4.%E4%BF%AE%E6%94%B9ITM%E7%AB%AF%E5%8F%A3.png?raw=true"><br></table><p><strong>提示：</strong>若软件修改了ITM端口，需要使能对应ITM刺激(Stimulus)端口才能正常打印输出。</p><h1 id="四、SWV终端配置及输出"><a href="#四、SWV终端配置及输出" class="headerlink" title="四、SWV终端配置及输出"></a>四、SWV终端配置及输出</h1><p>显示终端就是J-Link的『SWO Viewer』这个上位机软件。</p><p>J-Link / J-Trace下载地址（Windows版本）：<br><a href="https://www.segger.com/downloads/jlink/JLink_Windows.exe" target="_blank" rel="noopener">https://www.segger.com/downloads/jlink/JLink_Windows.exe</a></p><p>安装之后，在安装目录下找到JLinkSWOViewer.exe</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ESWO%20Viewer%E3%80%8F/5.SWV%E5%B7%A5%E5%85%B7%E8%B7%AF%E5%BE%84.png?raw=true"><br></table><p>烧写程序到MCU，通过J-Link连接，打开JLinkSWOViewer.exe软件：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ESWO%20Viewer%E3%80%8F/6.J-Link%20SWO%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE.png?raw=true"><br></table><p>OK确认之后，使能ITM端口号，就会输出信息：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EJ-Link%E3%80%8ESWO%20Viewer%E3%80%8F/7.J-Link%20SWO%E8%BE%93%E5%87%BA%E6%95%88%E6%9E%9C.png?raw=true"><br></table><p><strong>提示：</strong><br>1.CPU时钟必须相同；<br>2.ITM端口号，软件和查看器（SWV）配置须一致；</p><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p>为方便大家理解，提供源码工程下载，参考代码：<br><strong>·</strong>STM32F103（HAL）_SWO<br><strong>·</strong>STM32F411（HAL）_SWO</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA</a></p><p>提取码：nbd3</p><p><strong>提示：</strong><br>1.若链接失效，请关注公众号获取最新链接。<br>2.源码仅供学习参考，不一定适用于实际项目。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SWD：&lt;/strong&gt;Serial Wire Debug，串行线调试&lt;br&gt;&lt;strong&gt;SWO：&lt;/strong&gt;Serial Wire Output，串行线输出&lt;br&gt;&lt;strong&gt;SWV：&lt;/strong&gt;Serial Wire Viewer，串行线查看器&lt;br&gt;&lt;strong&gt;ITM：&lt;/strong&gt;Instrumentation Trace Macrocell，指令跟踪宏单元&lt;/p&gt;
&lt;p&gt;SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。&lt;/p&gt;
&lt;p&gt;它是利用Cortex内核中ITM模块来实现此功能。&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程05_SWO打印输出配置，基于ST-LINK Utility『Serial Wire Viewer』</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程05_SWO打印输出配置，基于ST-LINK Utility『Serial Wire Viewer』.html</id>
    <published>2019-06-28T03:20:00.000Z</published>
    <updated>2019-06-28T06:47:39.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p><strong>SWD：</strong>Serial Wire Debug，串行线调试<br><strong>SWO：</strong>Serial Wire Output，串行线输出<br><strong>SWV：</strong>Serial Wire Viewer，串行线查看器<br><strong>ITM：</strong>Instrumentation Trace Macrocell，指令跟踪宏单元</p><p>SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。</p><p>它是利用Cortex内核中ITM模块来实现此功能。</p><a id="more"></a><p>连接引脚：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/1.%E5%BC%95%E8%84%9A%E7%9B%B8%E8%BF%9E.png?raw=true"><br></table><p>SWO输出，需要一根SWO（引脚）线，同时需要借助SWV（查看器）查看数据，我打算整理4种查看方法：<br><strong>·</strong>基于Keil的『Debug(printf)Viewer』<br><strong>·</strong>基于IAR的『Terminal IO』<br><strong>·基于ST-LINK Utility的『Serial Wire Viewer』</strong><br><strong>·</strong>基于J-Link的『SWO Viewer』</p><p>本文主要是<strong>第三种基于ST-LINK Utility的『Serial Wire Viewer』</strong>，会结合STM32，ST-link和J-link工具讲述相关配置。</p><p>想更加了解ITM，请参看<a href="https://mp.weixin.qq.com/s/lGwKyVdHkMuSOYcgASLeNg" target="_blank" rel="noopener">《<strong>printf系列教程03</strong>》</a>中第二章节&lt;关于ITM&gt;。</p><h1 id="二、SWO引脚配置"><a href="#二、SWO引脚配置" class="headerlink" title="二、SWO引脚配置"></a>二、SWO引脚配置</h1><p>SWO引脚可以理解为UART的Tx引脚，如果不连接此引脚，则（SWV）终端不会接收打印信息。</p><p>对于STM32而言，只要是Cortex-M3/M4/M7内核的MCU都有SWO引脚。</p><p>而Cortex-M0则没有此项功能，包含STM32F0、STM32L0和STM32G0等。</p><p>在STM32CubeMX工具中，Debug选项进行如下配置即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/3.SWO%E5%BC%95%E8%84%9A%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><h1 id="三、SWO输出代码"><a href="#三、SWO输出代码" class="headerlink" title="三、SWO输出代码"></a>三、SWO输出代码</h1><p>在ST-LINK Utility的『Serial Wire Viewer』显示打印信息，与Keil、IAR差异在于：显示的位置不同，MCU中代码其实一样。</p><h2 id="3-1-重定义fputc"><a href="#3-1-重定义fputc" class="headerlink" title="3.1 重定义fputc"></a>3.1 重定义fputc</h2><p>和UART实现printf打印输出区别就是：将重定义代码中UART发送字符，改为ITM发送字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">  ITM_SendChar(ch);</span><br><span class="line">  return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ITM_SendChar说明</strong><br>这个函数位于core_cm3.h（或cm4 cm7）中，直接调用即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F/3.ITM%E6%BA%90%E7%A0%81.png?raw=true"><br></table><p><strong>修改ITM端口</strong><br>比如：修改成使用ITM端口1，修改该函数对应值即可：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F/4.%E4%BF%AE%E6%94%B9ITM%E7%AB%AF%E5%8F%A3.png?raw=true"><br></table><p><strong>提示：</strong>若软件修改了ITM端口，需要使能对应ITM刺激(Stimulus)端口才能正常打印输出。</p><h1 id="四、SWV终端配置及输出"><a href="#四、SWV终端配置及输出" class="headerlink" title="四、SWV终端配置及输出"></a>四、SWV终端配置及输出</h1><p>显示终端就是STM32 ST-LINK Utility这个上位机软件。</p><p>STM32 ST-LINK utility下载地址：<br><a href="http://www.st.com/en/development-tools/stsw-link004.html" target="_blank" rel="noopener">www.st.com/en/development-tools/stsw-link004.html</a></p><p>推荐阅读我的专栏：<a href="https://mp.weixin.qq.com/s/AsusVwbwSONgUmjQpD4W2g" target="_blank" rel="noopener">ST-Link资料</a></p><p>烧写程序到MCU，通过ST-Link连接，打开软件，从菜单进入SWV：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F/5.%E8%BF%9B%E5%85%A5SWO.png?raw=true"><br></table><p><strong>配置时钟和使能ITM端口：</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F/6.%E9%85%8D%E7%BD%AE%E6%97%B6%E9%92%9F%E5%92%8C%E7%AB%AF%E5%8F%A3.png?raw=true"><br></table><p><strong>提示：</strong>ITM端口默认使用port0，也可修改软件（见上面软件），实现0~31任意端口。</p><h2 id="4-1-输出效果"><a href="#4-1-输出效果" class="headerlink" title="4.1 输出效果"></a>4.1 输出效果</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EST-LINK%20Utility%E3%80%8ESerial%20Wire%20Viewer%E3%80%8F/7.SWV%E8%BE%93%E5%87%BA%E6%95%88%E6%9E%9C.png?raw=true"><br></table><p><strong>提示：</strong><br>1.CPU时钟必须相同；<br>2.ITM端口号，软件和查看器（SWV）配置须一致；</p><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p>为方便大家理解，提供源码工程下载，参考代码：<br><strong>·</strong>STM32F103（HAL）_SWO<br><strong>·</strong>STM32F411（HAL）_SWO</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA</a></p><p>提取码：nbd3</p><p><strong>提示：</strong><br>1.若链接失效，请关注公众号获取最新链接。<br>2.源码仅供学习参考，不一定适用于实际项目。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SWD：&lt;/strong&gt;Serial Wire Debug，串行线调试&lt;br&gt;&lt;strong&gt;SWO：&lt;/strong&gt;Serial Wire Output，串行线输出&lt;br&gt;&lt;strong&gt;SWV：&lt;/strong&gt;Serial Wire Viewer，串行线查看器&lt;br&gt;&lt;strong&gt;ITM：&lt;/strong&gt;Instrumentation Trace Macrocell，指令跟踪宏单元&lt;/p&gt;
&lt;p&gt;SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。&lt;/p&gt;
&lt;p&gt;它是利用Cortex内核中ITM模块来实现此功能。&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程04_SWO打印输出配置，基于IAR『Terminal IO』</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程04_SWO打印输出配置，基于IAR『Terminal IO』.html</id>
    <published>2019-06-28T03:00:00.000Z</published>
    <updated>2019-06-28T06:47:34.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p><strong>SWD：</strong>Serial Wire Debug，串行线调试<br><strong>SWO：</strong>Serial Wire Output，串行线输出<br><strong>SWV：</strong>Serial Wire Viewer，串行线查看器<br><strong>ITM：</strong>Instrumentation Trace Macrocell，指令跟踪宏单元</p><p>SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。</p><p>它是利用Cortex内核中ITM模块来实现此功能。</p><a id="more"></a><p>连接引脚：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/1.%E5%BC%95%E8%84%9A%E7%9B%B8%E8%BF%9E.png?raw=true"><br></table><p>SWO输出，需要一根SWO（引脚）线，同时需要借助SWV（查看器）查看数据，我打算整理4种查看方法：<br><strong>·</strong>基于Keil的『Debug(printf)Viewer』<br><strong>·基于IAR的『Terminal IO』</strong><br><strong>·</strong>基于ST-LINK Utility的『Serial Wire Viewer』<br><strong>·</strong>基于J-Link的『SWO Viewer』</p><p>本文主要是<strong>第二种基于IAR的『Terminal IO』</strong>，会结合STM32，ST-link和J-link工具讲述相关配置。</p><p>想更加了解ITM，请参看<a href="https://mp.weixin.qq.com/s/lGwKyVdHkMuSOYcgASLeNg" target="_blank" rel="noopener">《<strong>printf系列教程03</strong>》</a>中第二章节&lt;关于ITM&gt;。</p><h1 id="二、SWO引脚配置"><a href="#二、SWO引脚配置" class="headerlink" title="二、SWO引脚配置"></a>二、SWO引脚配置</h1><p>SWO引脚可以理解为UART的Tx引脚，如果不连接此引脚，则（SWV）终端不会接收打印信息。</p><p>对于STM32而言，只要是Cortex-M3/M4/M7内核的MCU都有SWO引脚。</p><p>而Cortex-M0则没有此项功能，包含STM32F0、STM32L0和STM32G0等。</p><p>在STM32CubeMX工具中，Debug选项进行如下配置即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/3.SWO%E5%BC%95%E8%84%9A%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><h1 id="三、IAR-SWO输出配置"><a href="#三、IAR-SWO输出配置" class="headerlink" title="三、IAR SWO输出配置"></a>三、IAR SWO输出配置</h1><p>要想在IAR EWARM的『Terminal IO』中输出信息，需要如下几项配置。</p><h2 id="3-1-IAR选项配置"><a href="#3-1-IAR选项配置" class="headerlink" title="3.1 IAR选项配置"></a>3.1 IAR选项配置</h2><p>Project -&gt; Options选项下选择SWO，选择调试工具ST-Link，或者J-Link，并对其进行配置。</p><table><br><strong>选择SWO</strong><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/3.IAR%E9%80%89%E6%8B%A9SWO.png?raw=true"><br></table><table><br><strong>调试工具选择</strong><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/4.%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9.png?raw=true"><br></table><table><br><strong>基于J-link配置CPU时钟</strong><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/5.J-link%E9%85%8D%E7%BD%AECPU%E6%97%B6%E9%92%9F.png?raw=true"><br></table><table><br><strong>基于ST-link配置CPU时钟</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/6.ST-link%E9%85%8D%E7%BD%AECPU%E6%97%B6%E9%92%9F.png?raw=true"><br></table><h2 id="3-2-SWO配置"><a href="#3-2-SWO配置" class="headerlink" title="3.2 SWO配置"></a>3.2 SWO配置</h2><p>进入调试模式，在JLink菜单（ST-Link类似）进入SWO配置：</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/7.SWO%E8%AE%BE%E7%BD%AE.png?raw=true"><br></table><table><br><strong>时钟和使能ITM端口：</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/8.%E6%97%B6%E9%92%9F%E5%92%8C%E4%BD%BF%E8%83%BDITM%E7%AB%AF%E5%8F%A3.png?raw=true"><br></table><table><br><strong>PC采样：</strong><br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/9.%E9%87%87%E6%A0%B7.png?raw=true"><br></table><p><strong>提示：</strong>ITM端口默认使用port0，也可修改软件，实现0~31任意端口，下面讲述。</p><h2 id="3-3-ITM发送源码"><a href="#3-3-ITM发送源码" class="headerlink" title="3.3 ITM发送源码"></a>3.3 ITM发送源码</h2><p>和前面UART实现printf打印输出区别就是：将重定义代码中UART发送字符，改为ITM发送字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">  ITM_SendChar(ch);</span><br><span class="line">  return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ITM_SendChar说明</strong><br>这个函数位于core_cm3.h（或cm4 cm7）中，直接调用即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/10.ITM_SendChar%E5%87%BD%E6%95%B0.png?raw=true"><br></table><p><strong>修改ITM端口</strong><br>比如：修改成使用ITM端口1，修改该函数对应值即可：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/11.%E4%BF%AE%E6%94%B9ITM%E7%AB%AF%E5%8F%A3.png?raw=true"><br></table><p><strong>提示：</strong>若软件修改了ITM端口，需要使能对应ITM刺激(Stimulus)端口才能正常打印输出。</p><h2 id="3-4-输出效果"><a href="#3-4-输出效果" class="headerlink" title="3.4 输出效果"></a>3.4 输出效果</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EIAR%E3%80%8ETerminal%20IO%E3%80%8F/12.%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C.png?raw=true"><br></table><h1 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h1><p>为方便大家理解，提供源码工程下载，参考代码：<br><strong>·</strong>STM32F103（HAL）_SWO<br><strong>·</strong>STM32F411（HAL）_SWO</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA</a></p><p>提取码：nbd3</p><p><strong>提示：</strong><br>1.若链接失效，请关注公众号获取最新链接。<br>2.源码仅供学习参考，不一定适用于实际项目。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SWD：&lt;/strong&gt;Serial Wire Debug，串行线调试&lt;br&gt;&lt;strong&gt;SWO：&lt;/strong&gt;Serial Wire Output，串行线输出&lt;br&gt;&lt;strong&gt;SWV：&lt;/strong&gt;Serial Wire Viewer，串行线查看器&lt;br&gt;&lt;strong&gt;ITM：&lt;/strong&gt;Instrumentation Trace Macrocell，指令跟踪宏单元&lt;/p&gt;
&lt;p&gt;SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。&lt;/p&gt;
&lt;p&gt;它是利用Cortex内核中ITM模块来实现此功能。&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>公告</title>
    <link href="http://www.strongerhuang.com/%E8%AF%B4%E6%98%8E%E6%96%87%E7%AB%A0/%E5%85%AC%E5%91%8A.html"/>
    <id>http://www.strongerhuang.com/说明文章/公告.html</id>
    <published>2019-06-28T02:00:00.000Z</published>
    <updated>2020-02-28T11:24:03.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、博客搬家了"><a href="#一、博客搬家了" class="headerlink" title="一、博客搬家了"></a>一、博客搬家了</h1><p>由于我原来的<a href="https://blog.csdn.net/ybhuangfugui" target="_blank" rel="noopener">【CSDN博客】</a>文章比较杂乱，也没有整理归类，不方便查找，文章中提供的代码工程下载地址都失效了。还有个主要原因，在别人地盘写文章总觉得不爽。所以，决定自己搭建博客，在自己的地盘写出属于自己的博客文章。</p><p>欢迎您来到我个人的新博客网站：<a href="http://www.strongerhuang.com">www.strongerhuang.com</a></p><p>在这里，我会以专栏形式分享。当然，更多精彩内容我会在我的微信公众号『<strong>strongerHuang</strong>』分享。</p><a id="more"></a><h2 id="1-1-找到我"><a href="#1-1-找到我" class="headerlink" title="1.1 找到我"></a>1.1 找到我</h2><p>除了在我微信公众号『<strong>strongerHuang</strong>』中能找到我，还可以添加我的个人微信（下图二维码），请备注『公众号读者』：<br><img src="https://www.strongerhuang.com/uploads/EmbeddDeveloper.jpg" alt=""></p><p>当然，也欢迎大家关注我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a></p><h1 id="二、后续计划"><a href="#二、后续计划" class="headerlink" title="二、后续计划"></a>二、后续计划</h1><p>本博客会持续更新，因为写系列教程特别费时间，中间肯定有间隔。</p><p>我平时主要在微信公众号『strongerHuang』更新内容。同时，我也会在知乎<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">『strongerHuang』</a>更新内容。</p><h1 id="三、最后"><a href="#三、最后" class="headerlink" title="三、最后"></a>三、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、博客搬家了&quot;&gt;&lt;a href=&quot;#一、博客搬家了&quot; class=&quot;headerlink&quot; title=&quot;一、博客搬家了&quot;&gt;&lt;/a&gt;一、博客搬家了&lt;/h1&gt;&lt;p&gt;由于我原来的&lt;a href=&quot;https://blog.csdn.net/ybhuangfugui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【CSDN博客】&lt;/a&gt;文章比较杂乱，也没有整理归类，不方便查找，文章中提供的代码工程下载地址都失效了。还有个主要原因，在别人地盘写文章总觉得不爽。所以，决定自己搭建博客，在自己的地盘写出属于自己的博客文章。&lt;/p&gt;
&lt;p&gt;欢迎您来到我个人的新博客网站：&lt;a href=&quot;http://www.strongerhuang.com&quot;&gt;www.strongerhuang.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里，我会以专栏形式分享。当然，更多精彩内容我会在我的微信公众号『&lt;strong&gt;strongerHuang&lt;/strong&gt;』分享。&lt;/p&gt;
    
    </summary>
    
      <category term="说明文章" scheme="http://www.strongerhuang.com/categories/%E8%AF%B4%E6%98%8E%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="说明" scheme="http://www.strongerhuang.com/tags/%E8%AF%B4%E6%98%8E/"/>
    
      <category term="公告" scheme="http://www.strongerhuang.com/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程03_SWO打印输出配置，基于Keil『Debug(printf)Viewer』</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程03_SWO打印输出配置，基于Keil『Debug（printf）Viewer』.html</id>
    <published>2019-06-28T02:00:00.000Z</published>
    <updated>2019-06-28T06:45:01.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p><strong>SWD：</strong>Serial Wire Debug，串行线调试<br><strong>SWO：</strong>Serial Wire Output，串行线输出<br><strong>SWV：</strong>Serial Wire Viewer，串行线查看器<br><strong>ITM：</strong>Instrumentation Trace Macrocell，指令跟踪宏单元</p><p>SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。</p><p>它是利用Cortex内核中ITM模块来实现此功能。</p><a id="more"></a><p>连接引脚：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/1.%E5%BC%95%E8%84%9A%E7%9B%B8%E8%BF%9E.png?raw=true"><br></table><p>SWO输出，需要一根SWO（引脚）线，同时需要借助SWV（查看器）查看数据，我打算整理4种查看方法：<br><strong>·基于Keil的『Debug(printf)Viewer』</strong><br><strong>·</strong>基于IAR的『Terminal IO』<br><strong>·</strong>基于ST-LINK Utility的『Serial Wire Viewer』<br><strong>·</strong>基于J-Link的『SWO Viewer』</p><p>本文主要是<strong>第一种基于Keil的『Debug(printf)Viewer』</strong>，会结合STM32，ST-link和J-link工具讲述相关配置。</p><h1 id="二、关于ITM"><a href="#二、关于ITM" class="headerlink" title="二、关于ITM"></a>二、关于ITM</h1><p><strong>ITM：</strong>Instrumentation Trace Macrocell，指令跟踪宏单元</p><p><strong>ITM 的一个主要用途，就是支持调试消息的输出（如printf 格式的输出）。</strong></p><p>ITM 包含 32 个刺激(Stimulus)端口，允许不同的软件把数据输出到不同的端口，从而让调试主机可以把它们的消息分离开。<br>与基于 UART 的文字输出不同，使用 ITM 输出不会对应用程序造成很大的延迟，在 ITM 内部有一个 FIFO，它使写入的输出消息得到缓冲。</p><h2 id="2-1-Cortex跟踪组件"><a href="#2-1-Cortex跟踪组件" class="headerlink" title="2.1 Cortex跟踪组件"></a>2.1 Cortex跟踪组件</h2><p>为了让更多人理解ITM模块，怎样输出调试信息，这里再深入说明一下。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/2.%E8%B0%83%E8%AF%95%E7%BB%84%E4%BB%B6.png?raw=true"><br></table><p><strong>TPIU：</strong>Trace Port Interface Unit，跟踪端口接口单元</p><p>ITM模块属于Cortex-M内核调试组件中的一部分内容，ITM输出的消息被送往 TPIU（跟踪端口接口单元）。</p><p>这里的TPIU，对应SWO串行线输出。</p><p><strong>提示：</strong><br><strong>1.</strong>这里TPIU要和上面说的【ITM 包含 32 个刺激(Stimulus)端口】区分开来。</p><p><strong>2.</strong>ITM的32个刺激(Stimulus)端口并不是要对应32个SWO引脚。<br>32个刺激端口调试信息可通过一个SWO引脚输出，下面详细讲述。</p><h1 id="三、SWO引脚配置"><a href="#三、SWO引脚配置" class="headerlink" title="三、SWO引脚配置"></a>三、SWO引脚配置</h1><p>SWO引脚可以理解为UART的Tx引脚，如果不连接此引脚，则（SWV）终端不会接收打印信息。</p><p>对于STM32而言，只要是Cortex-M3/M4/M7内核的MCU都有SWO引脚。</p><p>而Cortex-M0则没有此项功能，包含STM32F0、STM32L0和STM32G0等。</p><p>在STM32CubeMX工具中，Debug选项进行如下配置即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/3.SWO%E5%BC%95%E8%84%9A%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><h1 id="四、Keil-SWO输出配置"><a href="#四、Keil-SWO输出配置" class="headerlink" title="四、Keil SWO输出配置"></a>四、Keil SWO输出配置</h1><p>要想在Keil MDK-ARM的Debug(printf)Viewer中输出信息，需要如下几项配置。</p><h2 id="4-1-Keil选项配置"><a href="#4-1-Keil选项配置" class="headerlink" title="4.1 Keil选项配置"></a>4.1 Keil选项配置</h2><p>主要就是使能跟踪Trace，配置CPU时钟，以及ITM端口。</p><table><br><strong>基于ST-Link</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/4.SWO%20Keil%20ST-Link.png?raw=true"><br></table><table><br><strong>基于J-Link</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/5.SWO%20Keil%20J-Link.png?raw=true"><br></table><p><strong>提示：</strong>ITM端口默认使用port0，也可修改软件，实现0~31任意端口，下面讲述。</p><h2 id="4-2-ITM发送源码"><a href="#4-2-ITM发送源码" class="headerlink" title="4.2 ITM发送源码"></a>4.2 ITM发送源码</h2><p>和前面UART实现printf打印输出区别就是：将重定义代码中UART发送字符，改为ITM发送字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">  ITM_SendChar(ch);</span><br><span class="line">  return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ITM_SendChar说明<br>这个函数位于core_cm3.h（或cm4 cm7）中，直接调用即可。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/6.ITM_SendChar%E5%87%BD%E6%95%B0.png?raw=true"><br></table><p><strong>修改ITM端口</strong><br>比如：修改成使用ITM端口1，修改该函数对应值即可：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/7.%E4%BF%AE%E6%94%B9ITM%E7%AB%AF%E5%8F%A3.png?raw=true"><br></table><p><strong>提示：</strong>若软件修改了ITM端口，需要使能对应ITM刺激(Stimulus)端口才能正常打印输出。</p><h2 id="4-3-输出效果"><a href="#4-3-输出效果" class="headerlink" title="4.3 输出效果"></a>4.3 输出效果</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_SWO%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8EKeil%E3%80%8EDebug%EF%BC%88printf%EF%BC%89Viewer%E3%80%8F/8.SWO%E8%BE%93%E5%87%BA%E6%95%88%E6%9E%9C.png?raw=true"><br></table><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p>为方便大家理解，提供源码工程下载，参考代码：<br><strong>·</strong>STM32F103（HAL）_SWO<br><strong>·</strong>STM32F411（HAL）_SWO</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA</a></p><p>提取码：nbd3</p><p><strong>提示：</strong><br>1.若链接失效，请关注公众号获取最新链接。<br>2.源码仅供学习参考，不一定适用于实际项目。</p><h1 id="六、说明"><a href="#六、说明" class="headerlink" title="六、说明"></a>六、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="七、最后"><a href="#七、最后" class="headerlink" title="七、最后"></a>七、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SWD：&lt;/strong&gt;Serial Wire Debug，串行线调试&lt;br&gt;&lt;strong&gt;SWO：&lt;/strong&gt;Serial Wire Output，串行线输出&lt;br&gt;&lt;strong&gt;SWV：&lt;/strong&gt;Serial Wire Viewer，串行线查看器&lt;br&gt;&lt;strong&gt;ITM：&lt;/strong&gt;Instrumentation Trace Macrocell，指令跟踪宏单元&lt;/p&gt;
&lt;p&gt;SWO串行线输出是单引脚、异步串行通信，可在Cortex-M3/M4/M7上使用，并由主调试器探测支持。&lt;/p&gt;
&lt;p&gt;它是利用Cortex内核中ITM模块来实现此功能。&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程02_仿真打印输出配置，基于STM32（Keil、IAR）</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E4%BB%BF%E7%9C%9F%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程02_仿真打印输出配置，基于STM32（Keil、IAR）.html</id>
    <published>2019-06-28T01:50:00.000Z</published>
    <updated>2019-06-28T04:06:13.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>很多初学者习惯使用软件仿真，比如Proteus，应该是很多人都知道的一款仿真软件。</p><p>以前开发板相对较贵，且快递不方便，使用仿真软件可以理解。现在便宜的STM32开发板就十几块，还用仿真软件，我不是很理解。</p><p>有经验的人都知道，仿真和实际运行情况很多时候都不一样，相信不用我说，大家都明白。</p><p>因此，我个人不是很推荐大家仿真，本文内容可能存在纰漏，仅限个人学习。</p><p>下面讲述基于Keil MDK-ARM 和 IAR EWARM进行仿真打印的配置。</p><a id="more"></a><h1 id="二、Keil仿真打印配置"><a href="#二、Keil仿真打印配置" class="headerlink" title="二、Keil仿真打印配置"></a>二、Keil仿真打印配置</h1><p><strong>1.仿真参数配置</strong><br>Keil MDK-ARM默认配置不能仿真，原因出在仿真参数出现了问题：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E4%BB%BF%E7%9C%9F%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89/1.MDK%E4%BB%BF%E7%9C%9F%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>修改这两处参数为：<strong>DARMSTM.DLL   -pSTM32F103ZE</strong></p><p>基于前面使用STM32CubeMX生成工程，修改此处仿真相关配置即可。</p><p><strong>2.串口重定义</strong><br>上一篇文章《printf系列教程01》的“串口映射”章节讲述相关内容。</p><p>这里用UART1举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">  HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1, 0xFFFF);</span><br><span class="line">  return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.Keil仿真输出效果</strong><br>下面提供下载的工程，直接编译，再点击调试按钮，打开UART 1#，全速运行，就能看到printf打印效果：</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E4%BB%BF%E7%9C%9F%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89/2.MDK%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C.png?raw=true"><br></table><h1 id="三、IAR仿真打印配置"><a href="#三、IAR仿真打印配置" class="headerlink" title="三、IAR仿真打印配置"></a>三、IAR仿真打印配置</h1><p>IAR下的仿真打印，我没有研究透彻，只是经过测试验证，可以运行，写出来仅供参考。</p><p><strong>1.仿真参数配置</strong><br>调试驱动选择仿真</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E4%BB%BF%E7%9C%9F%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89/3.IAR%E9%80%89%E6%8B%A9%E4%BB%BF%E7%9C%9F.png?raw=true"><br></table><p>这里仿真打印，我使用SWO方式：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E4%BB%BF%E7%9C%9F%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89/4.IAR%E4%B8%ADSWO%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p><strong>2.串口重定义</strong><br>重定义代码和上面类似，只是这里使用ITM方式输出信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">  ITM_SendChar(ch);</span><br><span class="line">  return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong>关于ITM后面文章会详细讲述。</p><p><strong>3.IAR仿真输出效果</strong></p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E4%BB%BF%E7%9C%9F%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89/5.IAR%E4%BB%BF%E7%9C%9F%E6%95%88%E6%9E%9C.png?raw=true"><br></table><p>当然，有些配置我没有研究明白，比如滴答中断计数，为什么仿真没有正常执行。所以，我自定义延时函数。</p><h1 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h1><p>为方便大家理解，提供源码工程下载，参考代码：<br><strong>·</strong>STM32F103（HAL）_仿真</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA</a></p><p>提取码：nbd3</p><p><strong>提示：</strong><br>1.若链接失效，请关注公众号获取最新链接。<br>2.源码仅供学习参考，不一定适用于实际项目。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;很多初学者习惯使用软件仿真，比如Proteus，应该是很多人都知道的一款仿真软件。&lt;/p&gt;
&lt;p&gt;以前开发板相对较贵，且快递不方便，使用仿真软件可以理解。现在便宜的STM32开发板就十几块，还用仿真软件，我不是很理解。&lt;/p&gt;
&lt;p&gt;有经验的人都知道，仿真和实际运行情况很多时候都不一样，相信不用我说，大家都明白。&lt;/p&gt;
&lt;p&gt;因此，我个人不是很推荐大家仿真，本文内容可能存在纰漏，仅限个人学习。&lt;/p&gt;
&lt;p&gt;下面讲述基于Keil MDK-ARM 和 IAR EWARM进行仿真打印的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程01_UART打印输出配置，基于STM32（Keil、IAR）</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_UART%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程01_UART打印输出配置，基于STM32（Keil、IAR）.html</id>
    <published>2019-06-28T01:40:00.000Z</published>
    <updated>2019-06-28T02:59:29.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>在学习MCU时，使用UART串口输出，算是最基础的知识。</p><p>因此，通过串口映射实现printf也是最常见的方法。</p><p>本文针对初学者，讲述基于STM32在Keil、 IAR中实现printf输出的配置。</p><p>推荐阅读：<br><a href="https://mp.weixin.qq.com/s/d0wssT2qmr1rAlYZAeUQqA" target="_blank" rel="noopener">【专栏】Keil系列教程</a><br><a href="https://mp.weixin.qq.com/s/KT94GFu4G7_QRE-6hKwyBg" target="_blank" rel="noopener">【专栏】IAR系列教程</a></p><p>在已有UART收发工程的基础上，只需要两步就可实现printf打印输出：<br><strong>·使用微库</strong><br><strong>·串口映射</strong></p><a id="more"></a><h1 id="二、使用微库"><a href="#二、使用微库" class="headerlink" title="二、使用微库"></a>二、使用微库</h1><p>自己新建的Keil、 IAR工程，需要自己“勾选”微库。使用STM32CubeMX工具生成的工程，默认“勾选”微库。</p><h2 id="2-1-Keil-MDK-ARM使用微库"><a href="#2-1-Keil-MDK-ARM使用微库" class="headerlink" title="2.1 Keil MDK-ARM使用微库"></a>2.1 Keil MDK-ARM使用微库</h2><p>Project -&gt; Options for Target -&gt; Target 勾选上“Use Micro LIB”，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_UART%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89/1.MDK%E5%8B%BE%E9%80%89%E5%BE%AE%E5%BA%93.png?raw=true"><br></table><h2 id="2-2-IAR-EWARM使用微库"><a href="#2-2-IAR-EWARM使用微库" class="headerlink" title="2.2 IAR EWARM使用微库"></a>2.2 IAR EWARM使用微库</h2><p>Project -&gt; Options -&gt; General Options -&gt; Library Configuration 选中“Full”,如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_UART%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%9F%BA%E4%BA%8ESTM32%EF%BC%88Keil%E3%80%81IAR%EF%BC%89/2.IAR%E5%8B%BE%E9%80%89%E5%BE%AE%E5%BA%93.png?raw=true"><br></table><h1 id="三、串口映射"><a href="#三、串口映射" class="headerlink" title="三、串口映射"></a>三、串口映射</h1><p>这个原理很简单，你要使用printf输出到UART串口，就需要进行一次映射。也就是大家说的重定义函数fputc。</p><p>这里主要就是将UART输出字符实现即可（提供标准库和HAL库例程）。</p><p>针对Keil和IAR的编译器，fputc函数（HAL库）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">  HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1, 0xFFFF);</span><br><span class="line">  return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其它编译器，如GCC，则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int __io_putchar(int ch)</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong>这只是针对printf输出，最简单的一种方式。如果想要输入，重定义fgetc函数即可。</p><h1 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h1><p>为方便大家理解，提供源码工程下载，参考代码：<br><strong>·</strong>STM32F103（SPL）_UART<br><strong>·</strong>STM32F103（HAL）_UART</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aYBuHtOgtLqLvj6SsMYlQA</a></p><p>提取码：nbd3</p><p><strong>提示：</strong><br>1.若链接失效，请关注公众号获取最新链接。<br>2.源码仅供学习参考，不一定适用于实际项目。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;在学习MCU时，使用UART串口输出，算是最基础的知识。&lt;/p&gt;
&lt;p&gt;因此，通过串口映射实现printf也是最常见的方法。&lt;/p&gt;
&lt;p&gt;本文针对初学者，讲述基于STM32在Keil、 IAR中实现printf输出的配置。&lt;/p&gt;
&lt;p&gt;推荐阅读：&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/d0wssT2qmr1rAlYZAeUQqA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【专栏】Keil系列教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KT94GFu4G7_QRE-6hKwyBg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【专栏】IAR系列教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在已有UART收发工程的基础上，只需要两步就可实现printf打印输出：&lt;br&gt;&lt;strong&gt;·使用微库&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;·串口映射&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>printf系列教程00_概述printf各种打印输出方法和相关内容</title>
    <link href="http://www.strongerhuang.com/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9.html"/>
    <id>http://www.strongerhuang.com/printf/printf系列教程00_概述printf各种打印输出方法和相关内容.html</id>
    <published>2019-06-28T01:30:00.000Z</published>
    <updated>2019-06-28T02:59:23.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>在MCU项目中，printf主要用于打印输出一些调试信息。比如：程序执行出错，输出相关错误提示信息。</p><p>前面在我公众号『strongerHuang』分享文章<a href="https://mp.weixin.qq.com/s/vA6QMPs8x2LsNSKK5-mBdA" target="_blank" rel="noopener">《基于STM32的多种printf用法》</a>之后，大家反响还不错。</p><p>不过那篇文章只是简单写了一下，很多人觉得可以，索性就整理成更加详细的专栏文章。</p><p>目前整理了几篇文章：<br>printf系列教程01_UART打印输出配置，基于STM32（Keil、IAR）<br>printf系列教程02_仿真打印输出配置，基于STM32（Keil、IAR）<br>printf系列教程03_SWO打印输出配置，基于Keil『Debug(printf)Viewer』，STM32（ST-Link、J-Link）<br>printf系列教程04_SWO打印输出配置，基于IAR『Terminal IO』，STM32（ST-Link、J-Link）<br>printf系列教程05_SWO打印输出配置，基于ST-LINK Utility『Serial Wire Viewer』，STM32（ST-Link）<br>printf系列教程06_SWO打印输出配置，基于J-Link『SWO Viewer』，STM32（J-Link）<br>printf系列教程07_JLink-RTT打印输出配置，基于J-Link『RTT Viewer』，STM32（Keil、IAR）</p><a id="more"></a><h1 id="二、printf输出方式"><a href="#二、printf输出方式" class="headerlink" title="二、printf输出方式"></a>二、printf输出方式</h1><p>本系列教程主要是针对MCU的printf打印输出，常见的方式：<br><strong>1.UART打印输出</strong><br><strong>2.仿真打印输出</strong><br><strong>3.SWO打印输出</strong><br><strong>4.JLink-RTT打印输出</strong></p><p>除仿真之外，其它三种都是基于MCU硬件打印输出。</p><p>从打印效率来说：UART &lt; SWO &lt; JLink-RTT。</p><p>每一种printf打印输出方式应用场景不同，也各有各的特点。</p><h1 id="三、实验现象"><a href="#三、实验现象" class="headerlink" title="三、实验现象"></a>三、实验现象</h1><p>先让大家从实验现象了解一下printf的内容，后面文章讲述具体的配置。</p><h2 id="3-1-UART打印输出"><a href="#3-1-UART打印输出" class="headerlink" title="3.1 UART打印输出"></a>3.1 UART打印输出</h2><table><br><img align="left" width="400" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/1.UART%E4%B8%B2%E5%8F%A3%E8%BE%93%E5%87%BA.png?raw=true"><br></table><p>这种printf是最常见的使用UART串口输出方式，需要占用一个硬件UART串口。</p><h2 id="3-2-仿真打印输出"><a href="#3-2-仿真打印输出" class="headerlink" title="3.2 仿真打印输出"></a>3.2 仿真打印输出</h2><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/2.%E4%BB%BF%E7%9C%9F%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA.png?raw=true"><br></table><p>只在集成开发环境中模拟printf仿真输出，不需要连接开发板（硬件MCU）即可实现。</p><h2 id="3-3-SWO打印输出"><a href="#3-3-SWO打印输出" class="headerlink" title="3.3 SWO打印输出"></a>3.3 SWO打印输出</h2><p><strong>SWO：</strong>Serial Wire Output，串行线输出<br><strong>SWD：</strong>Serial Wire Debug，串行线调试<br><strong>SWV：</strong>Serial Wire Viewer，串行线查看器</p><p>SWO输出，需要多一根SWO（引脚）线，同时需要借助SWV（查看器）查看数据，我打算整理4种查看方法：<br><strong>·</strong>基于Keil的『Debug(printf)Viewer』<br><strong>·</strong>基于IAR的『Terminal IO』<br><strong>·</strong>基于ST-LINK Utility的『Serial Wire Viewer』<br><strong>·</strong>基于J-Link的『SWO Viewer』</p><table><br><strong>1.基于Keil的『Debug(printf)Viewer』</strong><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/3.SWO%EF%BC%88%E5%9F%BA%E4%BA%8EKeil%EF%BC%89.png?raw=true"><br></table><table><br><strong>2.基于IAR的『Terminal IO』</strong><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/4.SWO%EF%BC%88%E5%9F%BA%E4%BA%8EIAR%EF%BC%89.png?raw=true"><br></table><table><br><strong>3.基于ST-LINK Utility的『Serial Wire Viewer』</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/5.SWO%EF%BC%88%E5%9F%BA%E4%BA%8EST-LINK%20Utility%EF%BC%89.png?raw=true"><br></table><table><br><strong>4.基于J-Link的『SWO Viewer』</strong><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/6.SWO%EF%BC%88%E5%9F%BA%E4%BA%8EJ-Link%EF%BC%89.png?raw=true"><br></table><p><strong>说明：</strong>前面2种可以分别基于ST-Link和J-link工具查看，第三种基于ST-Link查看，第四种基于J-link查看。</p><h2 id="3-4-JLink-RTT打印输出"><a href="#3-4-JLink-RTT打印输出" class="headerlink" title="3.4 JLink-RTT打印输出"></a>3.4 JLink-RTT打印输出</h2><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/7.JLink-RTT%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA.png?raw=true"><br></table><p>这种方式不需要使用UART串口，也不需要额外SWO引脚，但需要在代码中添加相关代码。</p><h1 id="四、软、硬件工具及其它说明"><a href="#四、软、硬件工具及其它说明" class="headerlink" title="四、软、硬件工具及其它说明"></a>四、软、硬件工具及其它说明</h1><p>该教程使用的软件及工具有点多，默认大家已经安装并掌握使用方法。</p><h2 id="4-1-软件工具"><a href="#4-1-软件工具" class="headerlink" title="4.1 软件工具"></a>4.1 软件工具</h2><p><strong>1.STM32CubeMX</strong><br>请参看：<a href="https://mp.weixin.qq.com/s/iT3UuGPhbgebCVZR6BhPlA" target="_blank" rel="noopener">【专栏】STM32CubeMX系列教程</a></p><p><strong>2.Keil MDK-ARM</strong><br>请参看：<a href="https://mp.weixin.qq.com/s/d0wssT2qmr1rAlYZAeUQqA" target="_blank" rel="noopener">【专栏】Keil MDK-ARM系列教程</a></p><p><strong>3.IAR EWARM</strong><br>请参看：<a href="https://mp.weixin.qq.com/s/KT94GFu4G7_QRE-6hKwyBg" target="_blank" rel="noopener">【专栏】IAR系列教程</a></p><p><strong>4.STM32 ST-LINK Utility</strong><br>请参看：<a href="https://mp.weixin.qq.com/s/AsusVwbwSONgUmjQpD4W2g" target="_blank" rel="noopener">【专栏】ST-Link资料</a></p><p><strong>5.J-Link / J-Trace</strong><br>下载地址：<a href="https://www.segger.com/downloads/jlink" target="_blank" rel="noopener">https://www.segger.com/downloads/jlink</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/printf/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B00_%E6%A6%82%E8%BF%B0printf%E5%90%84%E7%A7%8D%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E5%92%8C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/8.J-Link%E8%BD%AF%E4%BB%B6%E5%8C%85.png?raw=true"><br></table><h2 id="4-2-硬件"><a href="#4-2-硬件" class="headerlink" title="4.2 硬件"></a>4.2 硬件</h2><p><strong>1.MCU开发板</strong><br>原则上Cortex-M3，M4都行，本教程基于STM32F0、F1、F4系列进行讲述。</p><p><strong>2.下载调试器</strong><br>ST-Link<br>J-Link</p><p><strong>3.PC电脑</strong><br>当然推荐Windows电脑，因为MDK-ARM只支持WIndows系统。</p><h2 id="4-3-其它说明"><a href="#4-3-其它说明" class="headerlink" title="4.3 其它说明"></a>4.3 其它说明</h2><p><strong>1.源代码工程下载</strong><br>为方便大家学习，本系列教程将提供对应源代码工程，供大家下载。</p><p><strong>2.关于仿真输出</strong><br>现在开发板很便宜（相比以前），而且仿真和实际可能存在差异，故我不推荐大家软件仿真。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【printf系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>关注公众号『strongerHuang』，在底部菜单中查看更多精彩内容!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;在MCU项目中，printf主要用于打印输出一些调试信息。比如：程序执行出错，输出相关错误提示信息。&lt;/p&gt;
&lt;p&gt;前面在我公众号『strongerHuang』分享文章&lt;a href=&quot;https://mp.weixin.qq.com/s/vA6QMPs8x2LsNSKK5-mBdA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《基于STM32的多种printf用法》&lt;/a&gt;之后，大家反响还不错。&lt;/p&gt;
&lt;p&gt;不过那篇文章只是简单写了一下，很多人觉得可以，索性就整理成更加详细的专栏文章。&lt;/p&gt;
&lt;p&gt;目前整理了几篇文章：&lt;br&gt;printf系列教程01_UART打印输出配置，基于STM32（Keil、IAR）&lt;br&gt;printf系列教程02_仿真打印输出配置，基于STM32（Keil、IAR）&lt;br&gt;printf系列教程03_SWO打印输出配置，基于Keil『Debug(printf)Viewer』，STM32（ST-Link、J-Link）&lt;br&gt;printf系列教程04_SWO打印输出配置，基于IAR『Terminal IO』，STM32（ST-Link、J-Link）&lt;br&gt;printf系列教程05_SWO打印输出配置，基于ST-LINK Utility『Serial Wire Viewer』，STM32（ST-Link）&lt;br&gt;printf系列教程06_SWO打印输出配置，基于J-Link『SWO Viewer』，STM32（J-Link）&lt;br&gt;printf系列教程07_JLink-RTT打印输出配置，基于J-Link『RTT Viewer』，STM32（Keil、IAR）&lt;/p&gt;
    
    </summary>
    
      <category term="printf系列教程" scheme="http://www.strongerhuang.com/categories/printf%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="printf" scheme="http://www.strongerhuang.com/tags/printf/"/>
    
      <category term="SWD" scheme="http://www.strongerhuang.com/tags/SWD/"/>
    
      <category term="SWO" scheme="http://www.strongerhuang.com/tags/SWO/"/>
    
      <category term="SWV" scheme="http://www.strongerhuang.com/tags/SWV/"/>
    
      <category term="ITM" scheme="http://www.strongerhuang.com/tags/ITM/"/>
    
      <category term="JLink-RTT" scheme="http://www.strongerhuang.com/tags/JLink-RTT/"/>
    
      <category term="J-Link" scheme="http://www.strongerhuang.com/tags/J-Link/"/>
    
      <category term="仿真" scheme="http://www.strongerhuang.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="重定义" scheme="http://www.strongerhuang.com/tags/%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
      <category term="串口映射" scheme="http://www.strongerhuang.com/tags/%E4%B8%B2%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX系列教程</title>
    <link href="http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程.html</id>
    <published>2019-03-21T04:30:00.000Z</published>
    <updated>2019-03-21T04:32:20.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【STM32CubeMX系列教程】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【嵌入式专栏】</a>，关注微信公众号回复【STM32CubeMX系列教程】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程01_STM32Cube产品介绍.html">STM32CubeMX系列教程01_STM32Cube产品介绍</a><br><a href="https://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程02_STM32CubeMX工具、HAL库下载、安装说明.html">STM32CubeMX系列教程02_STM32CubeMX工具、HAL库下载、安装说明</a><br><a href="https://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程03_创建并生成代码工程.html">STM32CubeMX系列教程03_创建并生成代码工程</a><br><a href="https://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程04_STM32CubeMX各窗口界面描述.html">STM32CubeMX系列教程04_STM32CubeMX各窗口界面描述</a><br><a href="https://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程05_File、Window、Help菜单说明.html">STM32CubeMX系列教程05_File、Window、Help菜单说明</a><br><a href="https://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程06_Project%20Manager工程管理器详细说明.html">STM32CubeMX系列教程06_Project Manager工程管理器详细说明</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【STM32CubeMX系列教程】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【STM32CubeMX系列教程】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【嵌入式专栏】&lt;/a&gt;，关注微信公众号回复【STM32CubeMX系列教程】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="STM32CubeMX系列教程" scheme="http://www.strongerhuang.com/categories/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="STM32CubeMX" scheme="http://www.strongerhuang.com/tags/STM32CubeMX/"/>
    
      <category term="LL库" scheme="http://www.strongerhuang.com/tags/LL%E5%BA%93/"/>
    
      <category term="HAL库" scheme="http://www.strongerhuang.com/tags/HAL%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX系列教程06_Project Manager工程管理器详细说明</title>
    <link href="http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_Project%20Manager%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86%E5%99%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程06_Project Manager工程管理器详细说明.html</id>
    <published>2019-03-21T04:00:00.000Z</published>
    <updated>2019-03-21T04:36:20.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>STM32CubeMX的Project Manager工程管理器包含：<strong>Project工程管理、 Code Generator代码生成、 Advanced Settings高级设置</strong>三部分内容。</p><p>这三部分内容决定了工程的一些属性，相关的配置信息比较重要，也容易理解。初学者有必要掌握其中内容。</p><a id="more"></a><h1 id="二、Project工程管理"><a href="#二、Project工程管理" class="headerlink" title="二、Project工程管理"></a>二、Project工程管理</h1><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_Project%20Manager%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86%E5%99%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/1.%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86.png?raw=true"><br></table><p><strong>Project工程管理</strong>包含三部分内容：<strong>Projcet Settings工程设置、 Linker Settings堆栈设置、 Mcu and Firmware Package MCU和固件包信息</strong>。</p><h2 id="2-1-Projcet-Settings工程设置"><a href="#2-1-Projcet-Settings工程设置" class="headerlink" title="2.1 Projcet Settings工程设置"></a>2.1 Projcet Settings工程设置</h2><p><strong>A.Project Name：工程名称</strong><br>比如：Demo.uvprojx，以及对应工程里面目标名称。</p><p><strong>B.Project Location：工程存放路径</strong><br>这个容易理解。如：D:\Desktop\Test.</p><p><strong>C.Application Struture：应用程序结构</strong><br>这里包含两个选项：Basic和Advanced。<br><strong>Basic：</strong>是基础的结构，一般不包含中间件（RTOS、文件系统、USB设备等）。</p><p><strong>Advanced：</strong>相反就是包含中间件，一般针对相对复杂一点的工程。</p><p>当然，这两种生成的结构都比较基础，一般实际项目都会重新整理一遍软件架构。</p><p><strong>D.Toolchain Folder Location：工具链文件夹路径</strong><br>这个是根据上面Project Name和Project Location得出来的，用户不能修改。</p><p><strong>E.Toolchain/IDE：工具链选择</strong><br>包含选项：<br><strong>·</strong>EWARM V7 和 V8<br><strong>·</strong>MDK-ARM V4 和 V5<br><strong>·</strong>TrueSTUDIO<br><strong>·</strong>SW4STM32<br><strong>·</strong>Makefile<br><strong>·</strong>其它</p><h2 id="2-2-Linker-Settings堆栈设置"><a href="#2-2-Linker-Settings堆栈设置" class="headerlink" title="2.2 Linker Settings堆栈设置"></a>2.2 Linker Settings堆栈设置</h2><p>这里的选项相信大家一看就明白，主要就是堆和栈大小的设置。<br>默认缺省值：<strong>Heap堆为0x200，Stack栈为0x400</strong>.</p><h2 id="2-3-Mcu-and-Firmware-Package-MCU和固件包信息"><a href="#2-3-Mcu-and-Firmware-Package-MCU和固件包信息" class="headerlink" title="2.3 Mcu and Firmware Package MCU和固件包信息"></a>2.3 Mcu and Firmware Package MCU和固件包信息</h2><p>这里有三个选项，关于MCU类型和固件包版本信息，一般默认配置。</p><p><strong>A.Mcu Reference：MCU参考型号</strong><br>这个是根据你选择的MCU型号决定的，用户不能修改。</p><p><strong>B.Firmware Package Name and Version：固件包名称和版本信息</strong><br>这个容易理解，如：STM32Cube_FW_F1_V1.7.0</p><p><strong>C.Use Default Firmware Location：使用默认固件包</strong><br>这里勾选上就会根据系统进行默认匹配固件包，一般建议默认。</p><p>当然，不勾选，可以自己选择指定固件包。</p><h1 id="三、Code-Generator代码生成"><a href="#三、Code-Generator代码生成" class="headerlink" title="三、Code Generator代码生成"></a>三、Code Generator代码生成</h1><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_Project%20Manager%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86%E5%99%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/2.%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90.png?raw=true"><br></table><p>如上图，主要包含四项内容：<strong>固件包拷贝、生成文件、HAL设置、模板设置</strong>。</p><h2 id="3-1-STM32Cube-Firmware-Library-Package固件包拷贝"><a href="#3-1-STM32Cube-Firmware-Library-Package固件包拷贝" class="headerlink" title="3.1 STM32Cube Firmware Library Package固件包拷贝"></a>3.1 STM32Cube Firmware Library Package固件包拷贝</h2><p><strong>1.Copy all used libraries into the project folder</strong><br><strong>将所有使用过的库复制到项目文件夹中。</strong><br>不管你用，还是没有用到，都拷贝到你工程目录下。这样一来，你工程下文件就比较多。</p><p><strong>2.Copy only the necessary library files</strong><br><strong>只复制必要的库文件。</strong><br>这个相比上一个减少了很多文件。比如你没有使用CAN、SPI…等外设，就不会拷贝相关库文件到你工程下。</p><p><strong>3.Add necessary library files as reference in the toolchain project configuration file</strong><br><strong>在工具链项目配置文件中添加必要的库文件作为参考。</strong><br>这里没有复制HAL库文件，只添加了必要文件（如main.c）。相比上面，没有Drivers相关文件。</p><h2 id="3-2-Generated-files生成文件"><a href="#3-2-Generated-files生成文件" class="headerlink" title="3.2 Generated files生成文件"></a>3.2 Generated files生成文件</h2><p>这里可以多选，每项可选择：是or不是。</p><p><strong>1.Generate peripheral initialization as a pair of’.c/.h’ files per peripheral</strong><br><strong>每个外设生成独立的’.c/.h’文件</strong><br>不勾：所有初始化代码都生成在main.c<br>勾选：初始化代码生成在对应的外设文件。 如UART初始化代码生成在uart.c中。</p><p><strong>2.Backup previously generated files when re-generating</strong><br><strong>在重新生成时备份以前生成的文件</strong><br>重新生成代码时，会在相关目录中生成一个Backup文件夹，将之前源文件拷贝到其中。</p><p><strong>3.Keep User Code when re-generating</strong><br><strong>在重新生成时保留用户代码</strong><br>比如：我在main.c中添加了一段代码，重新生成时，会在main.c中保留你之前自己添加的这段代码。</p><p><strong>注意：</strong>前提是这段代码写在规定的位置。也就是BEGIN和END之间。否则同样会删除。</p><p><strong>4.Delete previously generated files when not re-generated</strong><br><strong>删除以前生成，但现在没有生成的文件</strong><br>比如：之前生成了spi.c，现在重新配置没有spi.c，则会删除之前的spi.c文件。</p><h2 id="3-3-HAL-SettingsHAL库设置"><a href="#3-3-HAL-SettingsHAL库设置" class="headerlink" title="3.3 HAL SettingsHAL库设置"></a>3.3 HAL SettingsHAL库设置</h2><p><strong>1.Set all free pins as analog (to optimize the power consumption) </strong><br><strong>将所有空闲引脚设置为模拟(以优化功耗)</strong><br>这个做低功耗产品时这个选项有必要勾选。</p><p><strong>2.Enable Full Assert</strong><br><strong>使能所有断言</strong><br>也就是参数检查。</p><h2 id="3-4-Template-Settings模板设置"><a href="#3-4-Template-Settings模板设置" class="headerlink" title="3.4 Template Settings模板设置"></a>3.4 Template Settings模板设置</h2><p><strong>1.Select a template to generate customized code</strong><br><strong>选择一个模板来生成自定义代码</strong><br>代码自定义生成模板可以参看最新（V28版）用户手册6.3节 Custom code generation内容。</p><h1 id="四、Advanced-Settings高级设置"><a href="#四、Advanced-Settings高级设置" class="headerlink" title="四、Advanced Settings高级设置"></a>四、Advanced Settings高级设置</h1><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_Project%20Manager%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86%E5%99%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/3.%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE.png?raw=true"><br></table><p>目前主要两个选项：<strong>驱动选择和调用函数</strong>设置。</p><h2 id="4-1-驱动选择"><a href="#4-1-驱动选择" class="headerlink" title="4.1 驱动选择"></a>4.1 驱动选择</h2><p>目前主要就是针对工程中使用到的外设，选择HAL还是LL驱动（参看上图）。<br><strong>提示：</strong>目前有些型号MCU的部分外设没有LL驱动。</p><h2 id="4-2-调用函数"><a href="#4-2-调用函数" class="headerlink" title="4.2 调用函数"></a>4.2 调用函数</h2><p>主要关心后面两个选项：<strong>Not Generate Function Call和Visibility (Static)</strong>。</p><p><strong>1.Not Generate Function Call不生成函数调用</strong><br>也就是你代码不调用对应初始化函数。</p><p>比如：你GPIO项勾选Not Generate Function Call，你main.c函数中就不会调用MX_GPIO_Init这个函数。</p><p><strong>2.Visibility (Static)可见性(静态)</strong><br>这个就是初始化代码声明为static。</p><p><strong>提示：</strong><br><strong>A.</strong>有些选项是是默认值，不能修改。如SystemClock_Config配置不声明为ststic.</p><p><strong>B.</strong>使用static是配合上面Code Generator代码生成章节中Generated files生成文件使用。如果都生成.c .h独立文件了，就不会生成static了。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【STM32CubeMX系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;STM32CubeMX的Project Manager工程管理器包含：&lt;strong&gt;Project工程管理、 Code Generator代码生成、 Advanced Settings高级设置&lt;/strong&gt;三部分内容。&lt;/p&gt;
&lt;p&gt;这三部分内容决定了工程的一些属性，相关的配置信息比较重要，也容易理解。初学者有必要掌握其中内容。&lt;/p&gt;
    
    </summary>
    
      <category term="STM32CubeMX系列教程" scheme="http://www.strongerhuang.com/categories/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="STM32CubeMX" scheme="http://www.strongerhuang.com/tags/STM32CubeMX/"/>
    
      <category term="LL库" scheme="http://www.strongerhuang.com/tags/LL%E5%BA%93/"/>
    
      <category term="HAL库" scheme="http://www.strongerhuang.com/tags/HAL%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX系列教程05_File、Window、Help菜单说明</title>
    <link href="http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_File%E3%80%81Window%E3%80%81Help%E8%8F%9C%E5%8D%95%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程05_File、Window、Help菜单说明.html</id>
    <published>2019-03-19T03:30:00.000Z</published>
    <updated>2019-03-19T04:41:42.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>STM32CubeMX主界面菜单包含：<strong>File文件、Window窗口、Help帮助</strong>这三个菜单。</p><p>STM32CubeMX V5和V4版本菜单有差异，<strong>V4版本有5个菜单：File文件、Project工程、Pinout引脚输出、Window窗口、Help帮助</strong>。</p><p>大家可以看一下我16年在公众号写过的一篇讲解关于STM32CubeMX V4版本菜单的文章：<a href="https://mp.weixin.qq.com/s/cOdQSd-H0CIMVmDATelWwg" target="_blank" rel="noopener">STM32CubeMX使用方法及功能介绍</a></p><p>相信使用过V4版本的朋友都知道，V5版本将Project工程、Pinout引脚输出这两个菜单做在工程内部去了。</p><p>本文针对V5版本，详细讲述File、Window、Help这三个菜单。</p><a id="more"></a><h1 id="二、File文件"><a href="#二、File文件" class="headerlink" title="二、File文件"></a>二、File文件</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_File%E3%80%81Window%E3%80%81Help%E8%8F%9C%E5%8D%95%E8%AF%B4%E6%98%8E/1.File%E6%96%87%E4%BB%B6.png?raw=true"><br></table><p><strong>New Project：</strong>新建工程（Ctrl + N）<br><strong>Load Project：</strong>导入工程（Ctrl + L）<br><strong>Import Project：</strong>引入项目（Ctrl + I）<br><strong>Save Project：</strong>保存工程（Ctrl + S）<br><strong>Save Project As：</strong>另存工程（Ctrl + A）<br><strong>Close Project：</strong>关闭工程（Ctrl + C）<br><strong>Generate Report：</strong>生成报告（Ctrl + R）<br><strong>Recent Projects：</strong>最近工程<br><strong>Exit：</strong>退出软件（Ctrl + X）</p><p>这里File文件菜单有部分和<strong>主界面的Existing Projects已存在工程、New Project新建工程</strong>一样（上一篇文章有讲述）。</p><h1 id="三、Window窗口"><a href="#三、Window窗口" class="headerlink" title="三、Window窗口"></a>三、Window窗口</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_File%E3%80%81Window%E3%80%81Help%E8%8F%9C%E5%8D%95%E8%AF%B4%E6%98%8E/2.Window%E7%AA%97%E5%8F%A3%E8%8F%9C%E5%8D%95.png?raw=true"><br></table><p>STM32CubeMX的Window窗口菜单只有两项内容：<strong>Outputs输出信息、Font size字体大小</strong>。</p><p><strong>1.Outputs输出信息</strong><br>这项子菜单的功能会输出一些相关信息，如选中MCU型号、配置工程的一些输出信息等。</p><table><br><strong>Outputs输出信</strong>息动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_File%E3%80%81Window%E3%80%81Help%E8%8F%9C%E5%8D%95%E8%AF%B4%E6%98%8E/3.Outputs%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><p><strong>2.Font size字体大小</strong><br>字体大小主要有三种：<br><strong>Smaller：</strong>小号<br><strong>Mdeium：</strong>中号<br><strong>Larger：</strong>大号</p><p><strong>提示：</strong>需要重新启动STM32CubeMX才生效。</p><h1 id="四、Help帮助"><a href="#四、Help帮助" class="headerlink" title="四、Help帮助"></a>四、Help帮助</h1><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_File%E3%80%81Window%E3%80%81Help%E8%8F%9C%E5%8D%95%E8%AF%B4%E6%98%8E/4.Help%E5%B8%AE%E5%8A%A9.png?raw=true"><br></table><p><strong>Help：</strong>帮助（F1）<br><strong>About：</strong>关于（Alt + A）<br><strong>Docs &amp; Resources：</strong>文档和资源（Alt + D）<br><strong>Refresh Data：</strong>更新数据（Alt + R）<br><strong>User Preferences：</strong>用户设定<br><strong>Check for Updates：</strong>检测更新（Alt + C）<br><strong>Manage embedded…：</strong>软件包管理（Alt + U）<br><strong>Updater Settings：</strong>更新设置（Alt + S）</p><p><strong>进一步说明：</strong><br><strong>Help帮助子菜单</strong>指向的就是STM32CubeMX的用户手册（PDF文档）。</p><p><strong>About关于</strong>指的是当前STM32CubeMX的版本信息。</p><p><strong>Refresh Data更新数据</strong>主要就是更新STM32CubeMX使用到的一些数据，如MCU/BOARD型号，文档，HAL库版本信息等。</p><p>点击子菜单<strong>“Check for Updates检测更新”</strong>会弹出需要更新的软件包。</p><p><strong>Manage embedded…软件包管理</strong>在前面文章都有讲述，包含安装、移除、更新软件包等。</p><p><strong>Updater Settings更新设置：</strong>这个子菜单包含多项内容。进入之后如下图：</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_File%E3%80%81Window%E3%80%81Help%E8%8F%9C%E5%8D%95%E8%AF%B4%E6%98%8E/5.%E6%9B%B4%E6%96%B0%E8%AE%BE%E7%BD%AE.png?raw=true"><br></table><p>包含Updater Settings更新设置和Connection Parameters链接参数。这里主要讲一下更新设置。</p><p><strong>1.固件资源</strong><br>Repository Folder资源文件夹，也就是我们更新HAL库的地址。</p><p><strong>2.检查和更新设置</strong><br><strong>Manual Check：</strong>手动检查<br><strong>Automatic Check：</strong>自动检查<br><strong>Interval between two Check（days）：</strong>间隔x天检查</p><p><strong>3.数据自动更新</strong><br><strong>No Auto-Refresh at Application start：</strong>启动应用程序时不自动刷新。<br><strong>Auto-Refresh Data-Only at Application start：</strong>只在启动应用程序时自动刷新数据。<br><strong>Auto-Refresh Data and Docs at Application start：</strong>在启动应用程序时自动刷新数据和文档。<br><strong>Interval between two data-refreshs（days）：</strong>间隔x天检查。</p><h1 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【STM32CubeMX系列教程】即可查看全系列教程。  </p><h1 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;STM32CubeMX主界面菜单包含：&lt;strong&gt;File文件、Window窗口、Help帮助&lt;/strong&gt;这三个菜单。&lt;/p&gt;
&lt;p&gt;STM32CubeMX V5和V4版本菜单有差异，&lt;strong&gt;V4版本有5个菜单：File文件、Project工程、Pinout引脚输出、Window窗口、Help帮助&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;大家可以看一下我16年在公众号写过的一篇讲解关于STM32CubeMX V4版本菜单的文章：&lt;a href=&quot;https://mp.weixin.qq.com/s/cOdQSd-H0CIMVmDATelWwg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;STM32CubeMX使用方法及功能介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相信使用过V4版本的朋友都知道，V5版本将Project工程、Pinout引脚输出这两个菜单做在工程内部去了。&lt;/p&gt;
&lt;p&gt;本文针对V5版本，详细讲述File、Window、Help这三个菜单。&lt;/p&gt;
    
    </summary>
    
      <category term="STM32CubeMX系列教程" scheme="http://www.strongerhuang.com/categories/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="STM32CubeMX" scheme="http://www.strongerhuang.com/tags/STM32CubeMX/"/>
    
      <category term="LL库" scheme="http://www.strongerhuang.com/tags/LL%E5%BA%93/"/>
    
      <category term="HAL库" scheme="http://www.strongerhuang.com/tags/HAL%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX系列教程04_STM32CubeMX各窗口界面描述</title>
    <link href="http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0.html"/>
    <id>http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程04_STM32CubeMX各窗口界面描述.html</id>
    <published>2019-03-19T00:30:00.000Z</published>
    <updated>2019-03-19T04:43:31.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>上一篇文章让你入门STM32CubeMX，你可能还是会觉得心里摸不到底。本文就从另外一个角度带你了解STM32CubeMX。</p><p>本文讲述STM32CubeMX各主要界面内容，让你对STM32CubeMX这个工具有一个比较直观的认识。</p><a id="more"></a><h1 id="二、主界面"><a href="#二、主界面" class="headerlink" title="二、主界面"></a>二、主界面</h1><p>打开STM32CubeMX，呈现的界面大致如下图，界面比较简洁。我把它划分为六大板块。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/1.%E4%B8%BB%E7%95%8C%E9%9D%A2.png?raw=true"><br></table><p><strong>1.菜单</strong><br>STM32CubexMX V4版本（前面老版本）有很多功能做在菜单里面，但V5版本优化（删减）菜单，把一些常用功能做在相应界面里面了。</p><p><strong>菜单内容后面会单独详细讲述。</strong></p><p><strong>2.社交链接</strong><br>facebook（脸书）、youtube、twitter（推特）以及ST社区、官网信息等。</p><p>相信大家都能理解，就像国内微信、微博、QQ等与ST相关的一些社交链接。</p><p><strong>3.面包屑导航</strong><br>这个名词可能很多人没听过，英文名叫Bread crumbs，中文名叫面包屑导航。当然，可以理解为导航栏。</p><p>进入配置界面，如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/2.%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA.png?raw=true"><br></table><p><strong>4.已存在工程</strong><br><strong>·Recent Opened Projects：</strong>最近打开的项目<br><strong>·Other Projects：</strong>打开其他已存在工程</p><p><strong>5.新建工程</strong><br><strong>·Start My project from MCU：</strong>从MCU开始我的项目<br><strong>·Start My project from STBoard：</strong>从ST开发板开始我的项目<br>这里是进入MCU/BOARD选择器，选择MCU型号和ST开发板型号（其中界面下面详细描述）。</p><p><strong>6.软件管理</strong><br><strong>·CHECK FOR UPDATE：</strong>检查更新<br><strong>·INSTALL/REMOVE：</strong>安装/移除软件</p><p>这里其实就是安装的软件进行管理，包含HAL库。安装的过程可以参看文章：<br>STM32CubeMX系列教程02_STM32CubeMX工具、HAL库下载、安装说明</p><h1 id="三、MCU-BOARD选择器界面"><a href="#三、MCU-BOARD选择器界面" class="headerlink" title="三、MCU/BOARD选择器界面"></a>三、MCU/BOARD选择器界面</h1><p>MCU和BOARD选择器的界面类似，从上面主界面第5点新建工程进入。</p><p>选择器主要功能是：通过输入MCU/BOARD型号，或者按照特定条件（如MCU系列、FLASH大小、外设控制器数量等）来筛选符合自己条件的MCU/BOARD。</p><p>这里的选择器可以当做STM32的选型工具。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/3.%E9%80%89%E6%8B%A9%E5%99%A8.png?raw=true"><br></table><p><strong>1.MCU和BOARD选择器切换</strong><br>在这两种选择器之间进行切换，两种选择器界面包含类似。</p><p><strong>2.选择器“筛选”</strong><br>筛选的方式有两种：<br>A.通过输入型号<br>B.通过条件筛选</p><p><strong>3.描述</strong><br><strong>·Features：</strong>选中型号MCU/板卡特征<br><strong>·Block Diagram：</strong>框图<br><strong>·Doc&amp;Resources：</strong>文档和资源<br><strong>·Datasheet：</strong>数据手册下载（下载PDF文档）<br><strong>·Buy：</strong>购买（跳入官网）</p><p><strong>4.MCU/BOARD列表</strong><br>通过输入型号，或条件筛选之后，符合条件的MCU/BOARD列表。</p><table><br><strong>选择器界面</strong>动画效果：<br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/4.%E9%80%89%E6%8B%A9%E5%99%A8%E7%95%8C%E9%9D%A2%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C.gif?raw=true"><br></table><h1 id="四、Pinout引脚输出配置"><a href="#四、Pinout引脚输出配置" class="headerlink" title="四、Pinout引脚输出配置"></a>四、Pinout引脚输出配置</h1><p>这里翻译为引脚输出配置其实有点不正确，因为这里包含<strong>系统、外设资源、以及中间件等一些独立模块的配置</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/5.%E5%BC%95%E8%84%9A%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p>这一板块的信息量比较大，<strong>使用STM32CubeMX的重点和难点大部分在这一界面</strong>。</p><p>我主要把它划分为三块：<strong>资源、配置和引脚/系统预览</strong>。可能不同系列、不同型号的MCU这里的配置信息都不同。</p><p>这里不详细讲述，<strong>后期我会针对具体MCU实例的进行详细讲述</strong>。</p><h1 id="五、时钟配置"><a href="#五、时钟配置" class="headerlink" title="五、时钟配置"></a>五、时钟配置</h1><p>STM32各个系列的时钟都比较强大（请看时钟树），同时，各系列，各型号的时钟树也可能有差异。</p><p>STM32CubeMX的时钟配置具有强大的一个功能，重点是图形化界面，让人一看就明白。</p><p>同时，时钟配置里面有各种提示信息：比如可选择的分频倍频、最大时钟频率、警告错误提示等（如下图）。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/6.%E6%97%B6%E9%92%9F%E6%A0%91%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><h1 id="六、工程管理"><a href="#六、工程管理" class="headerlink" title="六、工程管理"></a>六、工程管理</h1><p>这一章节内容对工程相关的配置比较重要，大部分可以默认。主要有三部分内容：工程管理、代码生成、高级设置。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/7.%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86%E5%99%A8.png?raw=true"><br></table><p>这里内容我后面单独写一篇文章详细讲述。</p><h1 id="七、工具"><a href="#七、工具" class="headerlink" title="七、工具"></a>七、工具</h1><p>目前工具这里包含两部分内容：<strong>PCC（Power Consumption Calculator）功耗计算、DDR Test Suite</strong>。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_STM32CubeMX%E5%90%84%E7%AA%97%E5%8F%A3%E7%95%8C%E9%9D%A2%E6%8F%8F%E8%BF%B0/8.%E5%B7%A5%E5%85%B7.png?raw=true"><br></table><p><strong>PCC</strong>这个功能应该用的比较多，开发低功耗相关产品这个功能可以用上这个工具。</p><p><strong>DDR Test Suite</strong>是一个目前（19年3月）只针对于STM32MP1系列，其他MCU没有这个功能。</p><p><strong>工具这项功能后期详细讲述。</strong></p><h1 id="八、说明"><a href="#八、说明" class="headerlink" title="八、说明"></a>八、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【STM32CubeMX系列教程】即可查看全系列教程。  </p><h1 id="九、最后"><a href="#九、最后" class="headerlink" title="九、最后"></a>九、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;上一篇文章让你入门STM32CubeMX，你可能还是会觉得心里摸不到底。本文就从另外一个角度带你了解STM32CubeMX。&lt;/p&gt;
&lt;p&gt;本文讲述STM32CubeMX各主要界面内容，让你对STM32CubeMX这个工具有一个比较直观的认识。&lt;/p&gt;
    
    </summary>
    
      <category term="STM32CubeMX系列教程" scheme="http://www.strongerhuang.com/categories/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="STM32CubeMX" scheme="http://www.strongerhuang.com/tags/STM32CubeMX/"/>
    
      <category term="LL库" scheme="http://www.strongerhuang.com/tags/LL%E5%BA%93/"/>
    
      <category term="HAL库" scheme="http://www.strongerhuang.com/tags/HAL%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX系列教程03_创建并生成代码工程</title>
    <link href="http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B.html"/>
    <id>http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程03_创建并生成代码工程.html</id>
    <published>2019-03-16T07:30:00.000Z</published>
    <updated>2019-03-16T08:02:07.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>本文面向初学者，使用STM32CubeMX一步一步配置一个可直接编译下载，并成功运行的代码。</p><p>实践操作成功之后有了成就感，大家才会更加有信心继续学习下去。</p><p>本文只提供LED闪烁的简单实例讲解，<strong>重点是引导初学者入门</strong>。</p><p>更多实例（如UART、TIM、CAN…）我会单独整理一系列教程，并提供源码分析和下载。</p><a id="more"></a><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><p>学习STM32CubeMX进行开发，需要有几样准备工作。</p><h2 id="2-1-下载安装STM32CubeMX及HAL库"><a href="#2-1-下载安装STM32CubeMX及HAL库" class="headerlink" title="2.1 下载安装STM32CubeMX及HAL库"></a>2.1 下载安装STM32CubeMX及HAL库</h2><p>请参看文章<a href="https://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程02_STM32CubeMX工具、HAL库下载、安装说明.html">《STM32CubeMX系列教程02_STM32CubeMX工具、HAL库下载、安装说明》</a></p><p><strong>提示：</strong>下载安装MCU对应的HAL库就行。<br>比如：你开发板MCU是STM32F1系列，对应的STM32Cube_FW_F1就行。</p><h2 id="2-2-下载安装IDE"><a href="#2-2-下载安装IDE" class="headerlink" title="2.2 下载安装IDE"></a>2.2 下载安装IDE</h2><p>推荐使用大众化的MDK-ARM这款集成开发环境（IDE）。当然，还支持EWARM、 TureSTUDIO、 SW4STM32等集成开发环境。</p><p>请参看文章：<a href="https://www.strongerhuang.com/Keil/Keil系列教程.html">Keil系列教程</a></p><h2 id="2-3-准备硬件"><a href="#2-3-准备硬件" class="headerlink" title="2.3 准备硬件"></a>2.3 准备硬件</h2><p>学习STM32CubeMX，建议大家买一块开发板。某宝上面很多，根据自己经济能力，贵一点，便宜一点都行。以及准备一个ST-Link下载器。</p><p>推荐阅读：<a href="https://www.strongerhuang.com/ST-Link/ST-Link资料.html">ST-Link资料</a></p><h1 id="三、创建工程"><a href="#三、创建工程" class="headerlink" title="三、创建工程"></a>三、创建工程</h1><p>接下来从选择自己型号MCU，到生成代码并成功运行的创建过程。</p><p><strong>1.打开STM32CubeMX，进入MCU选择器</strong></p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/1.%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6.png?raw=true"><br></table><p>进入选择器时会联网更新数据库，可能需要等待一下。</p><p><strong>2.选择对应型号MCU</strong></p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/2.%E9%80%89%E6%8B%A9MCU.png?raw=true"><br></table><p><strong>3.时钟源选择</strong><br>如果选择使用外部高速时钟（HSE），则需要在System Core中配置RCC（如下图）。如果使用默认内部时钟（HSI），这一步可以略过。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/3.%E9%80%89%E6%8B%A9HSE.png?raw=true"><br></table><p><strong>4.选择GPIO（LED）引脚</strong><br>我们这里使用一个GPIO引脚（PF8）控制LED亮灭。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/4.%E9%85%8D%E7%BD%AELED%E5%BC%95%E8%84%9A.png?raw=true"><br></table><p><strong>5.配置时钟Clock</strong><br>STM32CubeMX配置时钟的界面非常方便，有很多提示（比如最大时钟），很多地方直接点击选择就行了。</p><p>默认高速时钟是使用内部（HSI），而且CPU时钟配置的比较低。以我选择的STM32F103，外部8M晶振为例（如下图）。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/5.%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE.png?raw=true"><br></table><p><strong>6.工程管理</strong><br>工程管理器的内容比较多，大部分都默认即可，这里讲述几个要点（如下图），更多选项后期详细讲述。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/6.%E9%85%8D%E7%BD%AE%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><p>IDE有几种，如果你不用MDK-ARM，也可选择其他IDE。</p><p><strong>7.生成代码</strong><br>以上操作就基本配置完成了一个简单的Demo工程，只需要点击“生成代码”即可。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/7.%E7%94%9F%E6%88%90%E5%B7%A5%E7%A8%8B.png?raw=true"><br></table><p><strong>8.添加代码</strong><br>当然，以上生成的代码还不够完善，需要<strong>添加自己的应用代码</strong>。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/8.%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81.png?raw=true"><br></table><p>添加如上图这样一段代码，你开发板上LED就会间隔500ms变化一次（呈现闪烁状态）。</p><p>添加应用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_Delay(500);</span><br><span class="line">HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_8);</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong><br><strong>1.</strong>延时500ms时间需要你时钟配置正确。</p><p><strong>2.</strong>LED对应引脚需要与你开发实际一致（本文以PF8为例）。</p><p><strong>3.</strong>生成的MDK-ARM工程，编译下载之后，默认是不会运行代码，需要重新复位一次才能运行，或你自己配置一下（如下图）。</p><table><br><img align="left" width="800" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E5%88%9B%E5%BB%BA%E5%B9%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B/9.%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81.png?raw=true"><br></table><p>好啦，本文就讲到这里，是不是很简单？请根据自己开发板MCU型号，自己动手实践一下。</p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【STM32CubeMX系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;本文面向初学者，使用STM32CubeMX一步一步配置一个可直接编译下载，并成功运行的代码。&lt;/p&gt;
&lt;p&gt;实践操作成功之后有了成就感，大家才会更加有信心继续学习下去。&lt;/p&gt;
&lt;p&gt;本文只提供LED闪烁的简单实例讲解，&lt;strong&gt;重点是引导初学者入门&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;更多实例（如UART、TIM、CAN…）我会单独整理一系列教程，并提供源码分析和下载。&lt;/p&gt;
    
    </summary>
    
      <category term="STM32CubeMX系列教程" scheme="http://www.strongerhuang.com/categories/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="STM32CubeMX" scheme="http://www.strongerhuang.com/tags/STM32CubeMX/"/>
    
      <category term="LL库" scheme="http://www.strongerhuang.com/tags/LL%E5%BA%93/"/>
    
      <category term="HAL库" scheme="http://www.strongerhuang.com/tags/HAL%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX系列教程02_STM32CubeMX工具、HAL库下载、安装说明</title>
    <link href="http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程02_STM32CubeMX工具、HAL库下载、安装说明.html</id>
    <published>2019-03-15T03:00:00.000Z</published>
    <updated>2019-03-15T03:30:26.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>上一篇文章是对STM32CubeMX做了一个简单介绍，可能初学者看了之后也不是很理解。那么本文开始动手实践，<strong>实践也是快速掌握知识的一种办法</strong>。</p><p>本文针对初学者，内容比较基础，主要是给大家起引导作用。</p><p>包含：<strong>下载JRE、STM32CubeMX和HAL库三部分内容。HAL库的几种安装方式</strong>。</p><a id="more"></a><h1 id="二、下载"><a href="#二、下载" class="headerlink" title="二、下载"></a>二、下载</h1><p>本节主要下载内容：<strong>JRE、STM32CubeMX和HAL库</strong>。</p><h2 id="2-1-下载JRE"><a href="#2-1-下载JRE" class="headerlink" title="2.1 下载JRE"></a>2.1 下载JRE</h2><p>由于 STM32CubeMX 软件是基于 JAVA 环境运行的，所以需要安装 JRE （Java Runtime Environment）才能使用， <strong>建议到官网下载最新版本JRE</strong>。</p><p>地址：<a href="https://www.java.com/en/download/manual.jsp" target="_blank" rel="noopener">https://www.java.com/en/download/manual.jsp</a></p><p>根据自己操作系统选择下载，我是64位Win10。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/1.JRE%E4%B8%8B%E8%BD%BD.png?raw=true"><br></table><p>JRE百度网盘下载：<br><a href="https://pan.baidu.com/s/1LQ4AF_P4-7B8JlYpTUz0bQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1LQ4AF_P4-7B8JlYpTUz0bQ</a><br>提取码：3h32</p><h2 id="2-2-下载STM32CubeMX和HAL库"><a href="#2-2-下载STM32CubeMX和HAL库" class="headerlink" title="2.2 下载STM32CubeMX和HAL库"></a>2.2 下载STM32CubeMX和HAL库</h2><p>官方地址：<a href="http://www.st.com/stm32cubemx" target="_blank" rel="noopener">www.st.com/stm32cubemx</a></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/2.%E4%B8%8B%E8%BD%BDSTM32CubeMX%E5%92%8CHAL%E5%BA%93.png?raw=true"><br></table><p>目前（2019年03月）最新STM32CubeMX版本为V5.1.0，各MCU HAL库最新版本也可以到官网下载。</p><p>到官网下载需注册账号，如觉得麻烦，可以到我百度网盘下载，我定期更新。</p><p>百度网盘地址：<br><a href="http://pan.baidu.com/s/1dFMFwHF" target="_blank" rel="noopener">http://pan.baidu.com/s/1dFMFwHF</a></p><p><strong>提示：</strong>网盘链接后期可能会失效。</p><h1 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h1><p>上面下载<strong>JRE、STM32CubeMX和HAL库</strong>三样内容是准备工作，本节就是实践安装工作（以Win10为例）。</p><h2 id="3-1-安装JRE"><a href="#3-1-安装JRE" class="headerlink" title="3.1 安装JRE"></a>3.1 安装JRE</h2><p>1.双击（或以管理员方式运行）离线包，点击安装。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/3.JRE%E5%AE%89%E8%A3%85.png?raw=true"><br></table><p>2.提示信息，点击确认</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/4.%E6%8F%90%E7%A4%BA.png?raw=true"><br></table><p>3.一路按照提示下去，直到安装成功。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/5.%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png?raw=true"><br></table><h2 id="3-2-安装STM32CubeMX"><a href="#3-2-安装STM32CubeMX" class="headerlink" title="3.2 安装STM32CubeMX"></a>3.2 安装STM32CubeMX</h2><p>现在（2019年03月）最新版本为V5.1.0， 支持安装的系统如下：<br><strong>Windows：</strong>7、 8、 10 （32 64位）<br><strong>Linux：</strong>RedHat, Ubuntu and Fedora（32 64位）<br><strong>macOS：</strong>OS X El Capitan and Sierra</p><p>安装STM32CubeMX比较简单，<strong>基本一路Next下去就行</strong>。</p><p>解压下载的STM32CubeMX-5.1.0.zip，若基于Windows，双击SetupSTM32CubeMX-5.1.0.exe即可进入安装就绪。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/6.%E5%AE%89%E8%A3%85STM32CubeMX.png?raw=true"><br></table><p>勾选相应的选项即可</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/7.%E5%90%8C%E6%84%8F%E5%8D%8F%E8%AE%AE.png?raw=true"><br></table><p>遇到提示点“Yes”</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/8.YES.png?raw=true"><br></table><p>到最后安装完成</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/9.%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png?raw=true"><br></table><h3 id="3-3-安装HAL库"><a href="#3-3-安装HAL库" class="headerlink" title="3.3 安装HAL库"></a>3.3 安装HAL库</h3><p>HAL库，也可理解为软件包，有<strong>在线安装、离线安装</strong>两种方式。</p><h2 id="3-3-1-在线安装"><a href="#3-3-1-在线安装" class="headerlink" title="3.3.1 在线安装"></a>3.3.1 在线安装</h2><p>打开安装好的 STM32CubeMX 软件， 进入库管理界面（Help -&gt; Manage embedded…），会有一个列表， 勾选上你要安装的HAL库， 点击“Install Now” 直到安装成功。 如下图：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/10.%E8%BF%9B%E5%85%A5%E5%BA%93%E7%AE%A1%E7%90%86.png?raw=true"><br></table><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/11.%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85.png?raw=true"><br></table><p>这种方式比较简单，需要联网在线下载，可能需要等待一段时间。如果刷新之后，可以看到最新版本，以及一些老版本HAL库。</p><h3 id="3-3-2-离线安装"><a href="#3-3-2-离线安装" class="headerlink" title="3.3.2 离线安装"></a>3.3.2 离线安装</h3><p>离线安装的前提是需要下载好离线包，方法有两种：1.从库管理界面直接导入离线包。2.直接解压离线包到指定路径下。</p><p><strong>1.导入离线包</strong></p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/12.%E5%AF%BC%E5%85%A5%E7%A6%BB%E7%BA%BF%E5%8C%85.png?raw=true"><br></table><p><strong>2.直接解压</strong><br>Help -&gt; Updater Settings得到HAL库路径</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/13.%E8%B7%AF%E5%BE%84.png?raw=true"><br></table><p>直接解压HAL库离线包，注意路径、文件夹名需一致：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_STM32CubeMX%E5%B7%A5%E5%85%B7%E3%80%81HAL%E5%BA%93%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/14.%E8%A7%A3%E5%8E%8B%E4%BD%8D%E7%BD%AE.png?raw=true"><br></table><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【STM32CubeMX系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;上一篇文章是对STM32CubeMX做了一个简单介绍，可能初学者看了之后也不是很理解。那么本文开始动手实践，&lt;strong&gt;实践也是快速掌握知识的一种办法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文针对初学者，内容比较基础，主要是给大家起引导作用。&lt;/p&gt;
&lt;p&gt;包含：&lt;strong&gt;下载JRE、STM32CubeMX和HAL库三部分内容。HAL库的几种安装方式&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="STM32CubeMX系列教程" scheme="http://www.strongerhuang.com/categories/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="STM32CubeMX" scheme="http://www.strongerhuang.com/tags/STM32CubeMX/"/>
    
      <category term="LL库" scheme="http://www.strongerhuang.com/tags/LL%E5%BA%93/"/>
    
      <category term="HAL库" scheme="http://www.strongerhuang.com/tags/HAL%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX系列教程01_STM32Cube产品介绍</title>
    <link href="http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_STM32Cube%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D.html"/>
    <id>http://www.strongerhuang.com/STM32Cube/STM32CubeMX/STM32CubeMX系列教程01_STM32Cube产品介绍.html</id>
    <published>2019-03-13T08:30:00.000Z</published>
    <updated>2019-03-15T03:26:52.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>之前开发STM32，大家常见的就是使用寄存器、或者标准外设库进行开发。</p><p>但是，从15、16年开始，ST逐渐停止了对标准外设库的更新和维护，转向了HAL和LL库。</p><p><strong>·SPL：</strong>Standard Peripheral Library标准外设库<br><strong>·HAL：</strong>Hardware Abstraction Layer硬件抽象层库<br><strong>·LL：</strong>Low-layer底层库</p><a id="more"></a><p>我写STM32CubeMX系列教程有两个原因：</p><p><strong>1.</strong>停止标准库更新，使用STM32CubeMX配置HAL/LL库是主流；</p><p><strong>2.</strong>网上关于STM32CubeMX的教程相对凌乱，没有系统的进行讲解。</p><p>该系列教程会从基础开始写起，以及<strong>结合实例代码详细讲述</strong>。后面实例我计划另开分支，比如针对F1系列就开一个关于F1分支的教程。</p><h1 id="二、关于STM32CubeMX"><a href="#二、关于STM32CubeMX" class="headerlink" title="二、关于STM32CubeMX"></a>二、关于STM32CubeMX</h1><p><strong>STM32CubeMX是一个图形化的软件配置工具，使用图形向导可以生成STM32初始化代码工程。</strong></p><p>STM32CubeMX这个工具是ST目前重点打造的工具，目的就是为了方便开发者，节约时间，提高开发效率</p><p>官方地址：<a href="https://www.st.com/stm32cubemx" target="_blank" rel="noopener">https://www.st.com/stm32cubemx</a></p><p>STM32CubeMX特性：</p><p><strong>1.直观的选择 STM32 微控制器（MCU）和微处理器（MPU）。</strong></p><p><strong>2.丰富易用的图形化界面:</strong><br>-自动解决配置冲突<br>-具有参数约束动态验证的外设和中间件功能模式<br>-时钟树与配置的动态验证<br>-功耗预测</p><p><strong>3.生成初始化代码工程，包含：EWARM、 MDK-ARM、 TureSTUDIO、 SW4STM32等。</strong></p><p><strong>4.针对部分MPU生成Linux设备树。</strong></p><p><strong>5.可独立运行在Windows、Linux和macOS上使用，或作为 Eclipse 插件使用。</strong></p><p>当然，以上特性来自官网，初学者需要自己安装使用之后才会逐渐了解它，下面给一段关于STM32CubeMX V5的视频介绍：</p><iframe height="576" width="1024" src="https://v.qq.com/x/page/w1357pq5awy.html?start=undefined" frameborder="0" allowfullscreen><br></iframe><h1 id="三、STM32Cube子集介绍"><a href="#三、STM32Cube子集介绍" class="headerlink" title="三、STM32Cube子集介绍"></a>三、STM32Cube子集介绍</h1><p>上面介绍了STM32CubeMX，其实STM32CubeMX是STM32Cube的一个子集，因为STM32Cube包含多项内容。</p><p>一张图了解STM32Cube：</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/STM32Cube/STM32CubeMX/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_STM32Cube%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D/1.STM32Cube%E5%AD%90%E7%B1%BB.jpg?raw=true"><br></table><h2 id="3-1-软件开发工具"><a href="#3-1-软件开发工具" class="headerlink" title="3.1 软件开发工具"></a>3.1 软件开发工具</h2><p>一套用户友好的软件开发工具，涵盖从概念到实现的项目开发的所有阶段。<br><strong>STM32CubeMX：</strong>一个图形化的软件配置工具，可以自动生成C使用图形向导初始化代码（也是该教程的重要工具）。</p><p><strong>STM32CubeProgrammer(STM32CubeProg)：</strong>图形化和命令行版本的编程工具。</p><p><strong>STM32CubeMonitor-Power(STM32CubeMonPwr)：</strong>一种用于测量和帮助的监控工具优化单片机的功耗。</p><h2 id="3-2-STM32Cube™-软件包"><a href="#3-2-STM32Cube™-软件包" class="headerlink" title="3.2 STM32Cube™ 软件包"></a>3.2 STM32Cube™ 软件包</h2><p><strong>STM32Cube HAL：</strong>一套针对特定系列MCU的硬件抽象层（HAL），如STM32Cube_FW_G0。确保整个STM32组合的可移植性。</p><p><strong>STM32Cube LL：</strong>一套针对MCU底层的库，确保最佳的性能。</p><p><strong>中间件组件：</strong>如RTOS, USB, TCP/IP。</p><p><strong>例程：</strong>所有嵌入式软件实用程序与全套外设应用的例程。</p><p>更多相关内容可参看我微信公众号『strongerHuang』分享的一篇文章：<br><a href="https://mp.weixin.qq.com/s/iOct8TWF1P6OwfZ4w7RTbA" target="_blank" rel="noopener">STM32Cube到底包含哪些工具？</a></p><p>本文就介绍到这里，更多重要信息请进入官网查看：<a href="https://www.st.com/stm32cubemx" target="_blank" rel="noopener">https://www.st.com/stm32cubemx</a></p><h1 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明"></a>四、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号『<strong>嵌入式专栏</strong>』，关注微信公众号回复【STM32CubeMX系列教程】即可查看全系列教程。  </p><h1 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h1><p>我的知乎：<a href="https://www.zhihu.com/people/strongerHuang.com" target="_blank" rel="noopener">strongerHuang</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;之前开发STM32，大家常见的就是使用寄存器、或者标准外设库进行开发。&lt;/p&gt;
&lt;p&gt;但是，从15、16年开始，ST逐渐停止了对标准外设库的更新和维护，转向了HAL和LL库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·SPL：&lt;/strong&gt;Standard Peripheral Library标准外设库&lt;br&gt;&lt;strong&gt;·HAL：&lt;/strong&gt;Hardware Abstraction Layer硬件抽象层库&lt;br&gt;&lt;strong&gt;·LL：&lt;/strong&gt;Low-layer底层库&lt;/p&gt;
    
    </summary>
    
      <category term="STM32CubeMX系列教程" scheme="http://www.strongerhuang.com/categories/STM32CubeMX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="STM32CubeMX" scheme="http://www.strongerhuang.com/tags/STM32CubeMX/"/>
    
      <category term="LL库" scheme="http://www.strongerhuang.com/tags/LL%E5%BA%93/"/>
    
      <category term="HAL库" scheme="http://www.strongerhuang.com/tags/HAL%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ST-Link资料</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%99.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料.html</id>
    <published>2019-02-22T03:00:00.000Z</published>
    <updated>2019-02-22T03:15:56.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>　　本文对【ST-Link资料】做了整理并汇总，会随着该系列教程的更新而更新。</p><p>　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于<a href="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true" target="_blank" rel="noopener">微信公众号【嵌入式专栏】</a>，关注微信公众号回复【ST-Link资料】即可查看。</p><a id="more"></a><h1 id="二、教程列表"><a href="#二、教程列表" class="headerlink" title="二、教程列表"></a>二、教程列表</h1><p><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料01_ST-Link介绍，认识各版本硬件及特征.html">ST-Link资料01_ST-Link介绍，认识各版本硬件及特征</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料02_ST-Link固件介绍，及固件命名规则.html">ST-Link资料02_ST-Link固件介绍，及固件命名规则</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料03_ST-Link固件升级、驱动下载安装方法.html">ST-Link资料03_ST-Link固件升级、驱动下载安装方法</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料04_ST-Link编程应用，以及指示灯说明.html">ST-Link资料04_ST-Link编程应用，以及指示灯说明</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料05_自制ST-Link（提供原理图及hex和bin固件）.html">ST-Link资料05_自制ST-Link（提供原理图及hex和bin固件）</a><br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料06_与ST-Link相关的STSW-LINK004、007、008、009各是什么？.html">ST-Link资料06_与ST-Link相关的STSW-LINK004、007、008、009各是什么？</a></p><p>正在努力更新中，可关注我微信公众号查看最新消息……</p><h1 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;　　本文对【ST-Link资料】做了整理并汇总，会随着该系列教程的更新而更新。&lt;/p&gt;
&lt;p&gt;　　为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于&lt;a href=&quot;https://github.com/strongerHuang/strongerHuang.github.io/blob/master/images/EmbeddedDevelop.jpg?raw=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信公众号【嵌入式专栏】&lt;/a&gt;，关注微信公众号回复【ST-Link资料】即可查看。&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ST-Link资料06_与ST-Link相关的STSW-LINK004、007、008、009各是什么？</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%9906_%E4%B8%8EST-Link%E7%9B%B8%E5%85%B3%E7%9A%84STSW-LINK004%E3%80%81007%E3%80%81008%E3%80%81009%E5%90%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料06_与ST-Link相关的STSW-LINK004、007、008、009各是什么？.html</id>
    <published>2019-02-22T02:30:00.000Z</published>
    <updated>2019-02-22T03:29:25.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>前面文章也陆陆续续对ST-Link相关的一些内容进行了讲述，其中也拓展了一些相关内容，如果没有阅读，建议先从前面开始看起。</p><p>很多人看到<strong>STSW-LINK004、STSW-LINK007、STSW-LINK008、STSW-LINK009</strong>这些内容就不明白到底是什么了。</p><p>这里暂且对这四项与ST-Link内容再进行综合概述和对比一下。</p><a id="more"></a><h1 id="二、STSW-LINK004"><a href="#二、STSW-LINK004" class="headerlink" title="二、STSW-LINK004"></a>二、STSW-LINK004</h1><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link004.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link004.html</a></p><p><strong>STSW-LINK004指的是STM32 ST-LINK Utility</strong>，一款用于编程STM32微控制器的全功能软件。</p><table><br><img align="left" width="600" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9906_%E4%B8%8EST-Link%E7%9B%B8%E5%85%B3%E7%9A%84STSW-LINK004%E3%80%81007%E3%80%81008%E3%80%81009%E5%90%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/1.STSW-LINK004.png?raw=true"><br></table><p>STM32 ST-LINK Utility提供了多种功能，<strong>可对STM32内部存储器</strong>（(Flash、RAM、OTP等），<strong>外部存储器进行编程，以验证编程内容</strong>（校验和，编程期间和之后验证，与文件进行比较）以及自动执行STM32编程。</p><p><strong>主要特点</strong><br>免费软件<br>支持.s19、 .hex和.bin格式文件<br>加载、编辑和保存可执行文件和数据文件<br>擦除，编程，查看和验证设备FLASH内容<br>自动执行STM32编程（擦除，验证，编程，配置选项字节，计算校验和）<br>编程一次可编程存储器<br>支持编程和配置选项字节<br>提供命令行界面<br>比较文件与目标内存<br>在实时更新模式下支持内存和核心状态视图<br>ST-LINK固件升级</p><h1 id="三、STSW-LINK007"><a href="#三、STSW-LINK007" class="headerlink" title="三、STSW-LINK007"></a>三、STSW-LINK007</h1><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link007.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link007.html</a></p><p>STSW-LINK007在前面文章中有提到，<strong>是ST-LINK、ST-LINK/V2、ST-LINK/V2-1和STLINK-V3的固件升级工具包</strong>。</p><p>该升级工具包有两种版本：<strong>Windows平台版和全平台（Windows、Linux、MacOS）版</strong>。</p><p><strong>Windows平台版：</strong></p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9906_%E4%B8%8EST-Link%E7%9B%B8%E5%85%B3%E7%9A%84STSW-LINK004%E3%80%81007%E3%80%81008%E3%80%81009%E5%90%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/2.STSW-LINK007.png?raw=true"><br></table><p>目前（2019年02月）最新的固件为：<br><strong>ST-LINK：</strong>V1J13S4.<br><strong>ST-LINK/V2：</strong>V2J33S7.<br><strong>ST-LINK/V2-1：</strong>V2J33M25 (STM32) 或 V2M25S7 (STM8).<br><strong>STLINK-V3SET：</strong>V3J3M2B3S1.</p><p><strong>提示：</strong><br>如果大家要对ST-Link进行升级，建议使用该升级工具包。</p><h1 id="四、STSW-LINK008"><a href="#四、STSW-LINK008" class="headerlink" title="四、STSW-LINK008"></a>四、STSW-LINK008</h1><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link008.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link008.html</a></p><p>STSW-LINK008是ST-LINK/V2-1的USB驱动，支持Windows Vista, 7 and 8。</p><p>目前STSW-LINK008是比较老的版本，官方只保留，没有进行更新了。因为有最新的USB驱动包（STSW-LINK009）替代了该驱动包。（请见下一章节）</p><p><strong>提示：</strong><br>该功驱动比较老了，不建议大家再使用它。</p><h1 id="五、STSW-LINK009"><a href="#五、STSW-LINK009" class="headerlink" title="五、STSW-LINK009"></a>五、STSW-LINK009</h1><p>地址：<br><a href="https://www.st.com/en/development-tools/stsw-link009.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link009.html</a></p><p>STSW-LINK009是<strong>基于ST-LINK， ST-LINK/V2， ST-LINK/V2-1， ST-LINK-V3的驱动</strong>，支持32或64位Windows 7、 8、 10操作系统。</p><p>STSW-LINK009也是目前官方重点更新和维护的驱动，想要更新ST-Link驱动的朋友，建议使用这个STSW-LINK009。</p><h1 id="六、四项内容综合说明"><a href="#六、四项内容综合说明" class="headerlink" title="六、四项内容综合说明"></a>六、四项内容综合说明</h1><p>上面章节也把这四项内容都一一列举出来说明一下，相信大家都进一步了解了这四项内容。</p><p>我这里也再综合进行说明一下，看大家都发现了这些问题没有。</p><h2 id="6-1-网址对比"><a href="#6-1-网址对比" class="headerlink" title="6.1 网址对比"></a>6.1 网址对比</h2><p><a href="http://www.st.com/en/development-tools/stsw-link004.html" target="_blank" rel="noopener">www.st.com/en/development-tools/stsw-link004.html</a><br><a href="http://www.st.com/en/development-tools/stsw-link007.html" target="_blank" rel="noopener">www.st.com/en/development-tools/stsw-link007.html</a><br><a href="http://www.st.com/en/development-tools/stsw-link008.html" target="_blank" rel="noopener">www.st.com/en/development-tools/stsw-link008.html</a><br><a href="http://www.st.com/en/development-tools/stsw-link009.html" target="_blank" rel="noopener">www.st.com/en/development-tools/stsw-link009.html</a></p><p>细心的朋友会发现，网址就只差一个字符，也方便记忆。你发现一些什么规律吗？</p><h2 id="6-2-状态说明"><a href="#6-2-状态说明" class="headerlink" title="6.2 状态说明"></a>6.2 状态说明</h2><p>STSW-LINK004、STSW-LINK007、STSW-LINK009处于活跃（Active）状态。</p><p>STSW-LINK008处于不推荐（NRND）状态。</p><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9906_%E4%B8%8EST-Link%E7%9B%B8%E5%85%B3%E7%9A%84STSW-LINK004%E3%80%81007%E3%80%81008%E3%80%81009%E5%90%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/3.%E6%B4%BB%E8%B7%83%E7%8A%B6%E6%80%81.png?raw=true"><br></table><table><br><img align="left" width="500" src="https://github.com/strongerHuang/strongerHuang.github.io/blob/master/ST-Link/ST-Link%E8%B5%84%E6%96%9906_%E4%B8%8EST-Link%E7%9B%B8%E5%85%B3%E7%9A%84STSW-LINK004%E3%80%81007%E3%80%81008%E3%80%81009%E5%90%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/5.%E4%B8%8D%E6%8E%A8%E8%8D%90%E7%8A%B6%E6%80%81.png?raw=true"><br></table><p>所以，不推荐STSW-LINK008用于新设计。</p><h2 id="6-3-全套工具"><a href="#6-3-全套工具" class="headerlink" title="6.3 全套工具"></a>6.3 全套工具</h2><p><strong>USB驱动</strong>（STSW-LINK009）、<strong>固件升级</strong>（STSW-LINK007）、<strong>编程工具</strong>（STSW-LINK004）。</p><p>不知道大家发现没有，这四项内容几乎包含了ST-Link的全套工具。</p><h2 id="6-4-拓展（硬件）"><a href="#6-4-拓展（硬件）" class="headerlink" title="6.4 拓展（硬件）"></a>6.4 拓展（硬件）</h2><p>除了STSW-LINK00x这四项内容，还有就是ST-link硬件（V1、 V2、 V3）的内容，这里不多说，给出网址：<br><a href="http://www.st.com/en/development-tools/st-link.html" target="_blank" rel="noopener">www.st.com/en/development-tools/st-link.html</a><br><a href="http://www.st.com/en/development-tools/st-link-v2.html" target="_blank" rel="noopener">www.st.com/en/development-tools/st-link-v2.html</a><br><a href="http://www.st.com/en/development-tools/stlink-v3set.html" target="_blank" rel="noopener">www.st.com/en/development-tools/stlink-v3set.html</a></p><p>（再次提示一下，对比网址你能发现一些规律）</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;前面文章也陆陆续续对ST-Link相关的一些内容进行了讲述，其中也拓展了一些相关内容，如果没有阅读，建议先从前面开始看起。&lt;/p&gt;
&lt;p&gt;很多人看到&lt;strong&gt;STSW-LINK004、STSW-LINK007、STSW-LINK008、STSW-LINK009&lt;/strong&gt;这些内容就不明白到底是什么了。&lt;/p&gt;
&lt;p&gt;这里暂且对这四项与ST-Link内容再进行综合概述和对比一下。&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ST-Link资料05_自制ST-Link（提供原理图及hex和bin固件）</title>
    <link href="http://www.strongerhuang.com/ST-Link/ST-Link%E8%B5%84%E6%96%9905_%E8%87%AA%E5%88%B6ST-Link%EF%BC%88%E6%8F%90%E4%BE%9B%E5%8E%9F%E7%90%86%E5%9B%BE%E5%8F%8Ahex%E5%92%8Cbin%E5%9B%BA%E4%BB%B6%EF%BC%89.html"/>
    <id>http://www.strongerhuang.com/ST-Link/ST-Link资料05_自制ST-Link（提供原理图及hex和bin固件）.html</id>
    <published>2019-02-21T03:30:00.000Z</published>
    <updated>2019-02-21T03:44:52.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>ST-Link的PCB和固件，官方是没有公开的。固件只能通过升级工具进行升级。</p><p>关于自制ST-Link的教程在网上比较多，国内外很多电子爱好者都手动自制成功过ST-Link。</p><p>某宝上买的山寨ST-Link就是电子爱好者做出来的，大多山寨ST-Link是集成SWD和SWIM这两类接口。<br><strong>SWD：</strong>用于STM32编程和调试；<br><strong>SWIM：</strong>用于STM8编程和调试；</p><p>这篇文章也算是完善该教程，总结了网上各爱好者的经验。自制ST-Link方法大概分如下几步：<br><strong>·获取ST-Link固件</strong><br><strong>·设计ST-Link原理图和PCB</strong>（并制作、焊接元器件）<br><strong>·下载并更新ST-Link固件</strong><br><strong>·插上电脑验证，并连接目标板测试</strong></p><a id="more"></a><h1 id="二、获取固件"><a href="#二、获取固件" class="headerlink" title="二、获取固件"></a>二、获取固件</h1><p>由于官方没有将ST-Link里面源码公开，同时也没有直接给出ST-Link固件（读保护），只能通过“非法”手段获取：<br><strong>方法一：</strong>下载网上流传的V2.J16.S4版本固件（可以找找其他版本）。<br><strong>方法二：</strong>某宝上找人破解芯片，获取ST官方ST-Link固件。</p><p><strong>方法一简单省事</strong>，但只能获取固定的V2.J16.S4类型的版本（文末也提供这一版本的hex和bin文件下载）。</p><p><strong>方法二可以获取不同类型的ST-Link固件</strong>，但这个破解费相对较贵，一般对于个人爱好者不建议。</p><p>综合，我们选择获取<strong>网上流传的V2.J16.S4版本固件</strong>来自制ST-Link。（文末提供下载）。</p><h1 id="三、设计原理图和PCB"><a href="#三、设计原理图和PCB" class="headerlink" title="三、设计原理图和PCB"></a>三、设计原理图和PCB</h1><p>基于V2.J16.S4版本固件（标准V2版本，支持SWD和SWIM接口），我们要<strong>怎样设计ST-Link原理图呢？</strong></p><p>可以网上<strong>下载现成原理图</strong>（文末提供下载），也可以<strong>仿照Nucleo、 Discovery、 Eval这类开发板原理图</strong>（官方提供下载）。</p><p>具体如何设计原理图和PCB对于硬件工程师来说So Easy，我这里也大概说一下仿照官方开发板设计原理图的方法。</p><h2 id="3-1-获取现成原理图"><a href="#3-1-获取现成原理图" class="headerlink" title="3.1 获取现成原理图"></a>3.1 获取现成原理图</h2><p>这个方法相信大家都会，这里需要注意的是：网上很多内容不一定正确，需要你自己排查。我也随机在网上查找了一些，文末提供下载。</p><p>所以，在网上找一个现成的原理图，自己参考官网原理图进行对比检查。</p><h2 id="3-2-参考官网原理图"><a href="#3-2-参考官网原理图" class="headerlink" title="3.2 参考官网原理图"></a>3.2 参考官网原理图</h2><p>官方Nucleo、 Discovery、 Eval这类开发板上自带的ST-Link都不对应V2.J16.S4版本固件。</p><p>所以，V2.J16.S4版本固件，<strong>需要支持SWD和SWIM的两种接口的原理图进行综合一下</strong>。比如选择STM8S-DISCO + STM32F429I-DISC1。</p><p><strong>综合推荐：</strong><br>先网上找一个现成的原理图，再结合官方开发板进行对比检查。</p><p>最后，设计好PCB，制作并焊接元器件。</p><h1 id="四、下载并更新ST-Link固件"><a href="#四、下载并更新ST-Link固件" class="headerlink" title="四、下载并更新ST-Link固件"></a>四、下载并更新ST-Link固件</h1><p>首先，通过一个现有的ST-Link<strong>下载V2.J16.S4固件到自制的ST-Link中</strong>。</p><p>下载方法我前面文章中有讲述，<strong>STM32CubeProg、 STM32 ST-LINK Utility、 STVP</strong>这类工具都行。</p><p><strong>更新固件：</strong><br>推荐下载官方最新固件升级工具包：<br><a href="https://www.st.com/en/development-tools/stsw-link007.html" target="_blank" rel="noopener">https://www.st.com/en/development-tools/stsw-link007.html</a></p><p>具体请阅读：<br><a href="https://www.strongerhuang.com/ST-Link/ST-Link资料03_ST-Link固件升级、驱动下载安装方法.html">ST-Link资料03_ST-Link固件升级、驱动下载安装方法</a>中【固件升级】章节内容。</p><h1 id="五、验证"><a href="#五、验证" class="headerlink" title="五、验证"></a>五、验证</h1><p><strong>1.</strong>插上电脑验证，看电脑设备管理器，是否枚举成功（前提已安装USB驱动）；</p><p><strong>2.</strong>找一块STM32目标板，将自制ST-Link连接目标板，通过STM32CubeProg、 STM32 ST-LINK Utility工具是否能读写操作；</p><p><strong>提示：</strong><br>如果都失败，请检查硬件设计是否有问题。</p><h1 id="六、下载"><a href="#六、下载" class="headerlink" title="六、下载"></a>六、下载</h1><p>我这里提供ST-Link原理图，及V2.J16.S4版本的hex和bin固件。</p><p>百度网盘：<br><a href="https://pan.baidu.com/s/1P5OeFRJZHM8VRW7YEIIylw" target="_blank" rel="noopener">https://pan.baidu.com/s/1P5OeFRJZHM8VRW7YEIIylw</a><br>提取码：qrg2</p><p><strong>提示：</strong><br>网盘链接后期可能会失效，可以关注我微信公众号获取更新链接。</p><h1 id="七、说明"><a href="#七、说明" class="headerlink" title="七、说明"></a>七、说明</h1><p>1.该文档仅供个人学习使用，版权所有，禁止商用。</p><p>2.本文由我一个人编辑并整理，难免存在一些错误。</p><p>3.为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该教程同步更新于微信公众号【嵌入式专栏】，关注微信公众号回复【ST-Link资料】即可查看全系列教程。  </p><h1 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h1><p>我的博客：<a href="http://www.strongerhuang.com">http://www.strongerhuang.com</a><br>我的GitHub：<a href="https://github.com/EmbeddedDevelop" target="_blank" rel="noopener">https://github.com/EmbeddedDevelop</a></p><p>　　我的微信公众号（ID：strongerHuang）还在分享STM8、STM32、Keil、IAR、FreeRTOS、UCOS、RT-Thread、CANOpen、Modbus…等更多精彩内容，如果想查看更多内容，可以关注我的微信公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; title=&quot;一、写在前面&quot;&gt;&lt;/a&gt;一、写在前面&lt;/h1&gt;&lt;p&gt;ST-Link的PCB和固件，官方是没有公开的。固件只能通过升级工具进行升级。&lt;/p&gt;
&lt;p&gt;关于自制ST-Link的教程在网上比较多，国内外很多电子爱好者都手动自制成功过ST-Link。&lt;/p&gt;
&lt;p&gt;某宝上买的山寨ST-Link就是电子爱好者做出来的，大多山寨ST-Link是集成SWD和SWIM这两类接口。&lt;br&gt;&lt;strong&gt;SWD：&lt;/strong&gt;用于STM32编程和调试；&lt;br&gt;&lt;strong&gt;SWIM：&lt;/strong&gt;用于STM8编程和调试；&lt;/p&gt;
&lt;p&gt;这篇文章也算是完善该教程，总结了网上各爱好者的经验。自制ST-Link方法大概分如下几步：&lt;br&gt;&lt;strong&gt;·获取ST-Link固件&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;·设计ST-Link原理图和PCB&lt;/strong&gt;（并制作、焊接元器件）&lt;br&gt;&lt;strong&gt;·下载并更新ST-Link固件&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;·插上电脑验证，并连接目标板测试&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ST-Link资料" scheme="http://www.strongerhuang.com/categories/ST-Link%E8%B5%84%E6%96%99/"/>
    
    
      <category term="STM32" scheme="http://www.strongerhuang.com/tags/STM32/"/>
    
      <category term="ST-Link" scheme="http://www.strongerhuang.com/tags/ST-Link/"/>
    
      <category term="调试器" scheme="http://www.strongerhuang.com/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
      <category term="编程器" scheme="http://www.strongerhuang.com/tags/%E7%BC%96%E7%A8%8B%E5%99%A8/"/>
    
      <category term="下载器" scheme="http://www.strongerhuang.com/tags/%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
</feed>
