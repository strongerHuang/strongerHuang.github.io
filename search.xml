<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[EWSTM8系列教程]]></title>
    <url>%2FIAR%2FEWSTM8%2FEWSTM8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[一、写在前面 本文对【EWSTM8系列教程】做了整理并汇总，会随着系列教程的更新而更新。 为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看。 二、教程列表1.EWSTM8系列教程01_IAR介绍、下载、安装和注册 2.EWSTM8系列教程02_新建基础软件工程 3.EWSTM8系列教程03_主窗口、工具栏的概述 4.EWSTM8系列教程04_菜单概述（一） 5.EWSTM8系列教程05_菜单概述（二） 6.EWSTM8系列教程06_工程节点选项配置（一） 正在努力更新中，敬请等待…… 三、说明1.该文档仅供个人学习使用，版权所有，禁止商用。2.本文主要针对个人学习使用的朋友，若你是商业用途，建议购买正版软件。3.本教程收录于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看全系列教程。 四、最后我的博客：http://www.strongerhuang.com我的GitHub：https://github.com/EmbeddedDevelop 更多精彩文章我将第一时间在微信公众号里面分享， 如果不想错过,可以关注我的微信公众号。]]></content>
      <categories>
        <category>EWSTM8系列教程</category>
      </categories>
      <tags>
        <tag>IAR</tag>
        <tag>STM8</tag>
        <tag>EWSTM8</tag>
        <tag>IAR for STM8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EWSTM8系列教程06_工程节点选项配置（一）]]></title>
    <url>%2FIAR%2FEWSTM8%2FEWSTM8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B06_%E5%B7%A5%E7%A8%8B%E8%8A%82%E7%82%B9%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
    <content type="text"><![CDATA[一、写在前面 Options for node即节点选项，而node节点位于Project工程的下一级。本文讲述的工程节点选项配置，即菜单Project -&gt; Options下Options for node各选项的配置，如下图： 由于节点选项较多，我将其分为工程节点选项配置（一）和工程节点选项配置（二）两篇文章来讲述。 本文章收录于【EWSTM8系列教程】，在我的博客分类“EWSTM8系列教程”也能查找到。 为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看。 二、拓展内容 本文讲述的工程节点选项配置，其中的工程与节点是包含关系，而工作空间与工程也是包含关系。 2.1 工作空间、 工程、 节点三者的关系三者之间就是包含关系：工作空间 &gt; 工程 &gt; 节点。一个工作空间可以包含多个工程，一个工程可以包含多个节点，见下图： 请关注系列教程新建多工程，多节点的文章。 2.2 打开节点选项配置的三种方法1.选中节点 -&gt; 快捷键Alt + F7这种方法简单、快捷，推荐使用。 2.选中节点 -&gt; 右键 -&gt; Options 3.选中节点 -&gt; 菜单Project -&gt; Options 三、General Options普通选项3.1 Target目标 1.Device：器件即选择MCU芯片型号，如上图选择的是STM8S103F3P. 2.Code model：代码模式包含三种：小、中、大；Small：小Medium：中Large：大对于初学者，可以理解为：如果选择Large大的话，编译出来的Code代码就会更大。具体的差异可以查看生产的.map文件。 3.Date model：数据模式原理类似上面代码模式，同样有三种：Small：小Medium：中Large：大 3.2 utput输出 1.Output file：输出文件输出文件类型有两种，但只能二选一。A.Executable：生成可执行的文件。如Hex、Bin等；B.Library：生成库文件。 2.Output directories：输出目录（路径）编译过程中生成的文件分别存放的目录（路径）。默认在Debug文件夹下面就会发现三个文件夹：Exe、Obj、List。A.Executables/Libraies：生成可执行/库文件的路径B.Object files：生成目标文件的路径C.List files：生成列表文件的路径 提示：路径为相对工程文件（如Demo.ewp）的路径。 3.3 Library Configuration库配置 1.Library：选择运行时库运行时库有四种可选择：None：无Normal：选择常规配置的运行时库Full：选择完整配置的运行时库Custom：选择定制运行时库 2.Description：运行时库的描述 3.Configuration：运行时库的配置 提示：第2、3点是随第1点选择的库改变而改变，第3点配置只有在选择“定制运行时库”时才可修改。请参看下图动画效果： 选择运行时库动画效果： 3.4 Library Options库选项 1.Printf formatter：选择Printf（打印输出）格式器总共有8种类型：Auto：自动格式Full：完整格式Full without multibytes：完整无多字节格式Large：大格式（不区分a或A）Large without multibytes：大格式（不区分a或A）,无多字节格式Small：小格式（不区分a或A，无Float）Smallwithout multibytes：小格式（不区分a或A，无Float）,无多字节格式Tiny：微小格式； 2.Scanf formatter：选择Scanf（打印输入）格式器类似上面printf，总共有7种类型：Auto：自动格式Full：完整格式Full without multibytes：完整无多字节格式Large：大格式Large without multibytes：大格式,无多字节格式Small：小格式Smallwithout multibytes：小格式,无多字节格式 3.Math functions：数学函数有两种可选择类型：Default：默认。包含cos, sin, tan, log, log10等函数；Smaller：精简。函数体积小，执行速度快，精度低，输入范围小等。 3.5 Stack/Heap栈和堆 1.Stack size：栈大小。 2.Heap size：堆大小。 提示：堆和栈位于内存中两块不同区域，使用的大小根据实际情况而定，修改此值之前请认真了解堆栈的含义。 3.6 MISRA C标准 MISRA-C:1998和MISRA-C:2004年的选项控制IDE如何检查源代码与MISRA C规则的偏差，这些设置用于编译器和链接器。 General Options普通与C/C++ Compiler编译器中的MISRA C选项配置相关联，本文章不讲述，后续单独讲述关于MISRA C的内容。 四、Static Analysis静态分析4.1 C-STAT静态分析 1.Select C-STAT Checks：选择C静态检查项目里面可选择的项目较多，通过手动选择（使能/失能）相关选项，使用前需了解C-STAT相关知识。 2.Import Settings：导入设置导入静态检查配置文件（类型为.xml文件）。 3.Export Settings：导出设置导出（当前第1点中）静态检查配置文件。 4.Enable parallel analysis：使能并行分析后面参数为并行分析（进程）数。 5.Enable module timeout：使能模块超时值后面参数为单个模块超时时间（单位：秒） 6.Enable false-positives analysis：使能“误报”分析 7.Limit messages per check and file：限制每次检查文件的消息数 提示：静态分析各项参数配置好之后，在菜单Project -&gt; C-STAT Static Analysis中执行。 4.2 Extra Options额外选项配置这里就不贴图了，主要就是使用命令行进行静态检查相关的配置，具体命令后续抽空单独整理成相关文章。 五、C/C++ Compiler编译器5.1 Language语言1 1.Language：选择语言三选一，选择C语言，就不能C++相关特性。选择Auto自动，会根据文件后缀自动判别。 2.Language conformance：语言一致性控制编译器如何严格遵守标准C或c++语言。Standard with IAR extensions：接受IAR（STM8）特定的关键字作为标准C或c++语言的扩展。Standard：禁用IAR系统扩展，但不严格遵循C/C++语言。Strict：严格遵守C/C++语言。 3.C dialect：选择C标准C 89 C 99 Allow VLA：运行可变长度数组； C++ inline semantics：支持内联函数； Require prototypes：需要原型强制编译器验证所有函数都有合适的原型。 4.C++ dialect：选择C++标准Embedded C++：嵌入C++Extended Embedded C++：扩展嵌入C++Destroy static objects：清除静态对象 5.2 Language语言2 1.Plain ‘char’解析为Signed或者Unsigned. 2.Floating-point semantics：浮点语句Strict conformance：严格一致，使编译器严格遵守浮点表达式的C和浮点标准。Relaxed：放松，使编译器放松语言规则并对浮点表达式执行更积极的优化。 3.Enable multibyte support：启用多字节的支持默认情况下不支持多字节，启用多字节支持使编译器可以根据主机的默认设置多字节支持来解释源代码中的多字节字符。 5.3 Optimizations优化 1.Level：优化等级None：无Low：低Medium：中High：高选择High优化等级为高时，可以选择Balanced平衡、Size大小、Speed速度（速度时可选择不收大小限制）,请参看下图动画效果。 2.Enabled transformations：使能转换选择不同的优化等级，对应优化转换不同，也可自定义转换项目。 3.Number of virtual byte registers：虚拟寄存器的字节数 优化选项动画效果： 5.4 Output编译输出 1.Generate debug information：生成（输出）调试信息如果需要调试，此选项需勾选。 5.5 List列表 1.Output list file：输出列表文件Assembler mnemonics：输出汇编助记符Diagnostics：输出诊断信息 2.Output assembler file：输出汇编文件Include source：包含源文件Include call frame information：包含调用信息 5.6 Preprocessor预处理 1.Ignore standard include directories：忽略标准包含目录（路径） 2.Additional include directories：添加路径最好是相对工程目录的相对路径。 3.Preinclude file：预包含文件 4.Defined symbols：预定义类似代码中#define，这里截图预定义STM8S103，相当于定义在stm8s.h文件中。 5.Preprocessor output to file：预处理输出到文件 5.7 Diagnostics诊断Diagnostics诊断选项卡，用于规定诊断信息的分类和显示。编译过程中可能产生三种错误诊断信息：remark(注意)、waining(警告)和error(错误)。 1.remark是一种次要的诊断信息，表明按源程序结构生成的代码可能出现不正常。 2.warning表示源程序中存在错误，但编译过程不会停止。 3.error表示源程序中存在违反C/C++语言规则的现象，将导致无法生成目标代码。error信息不能被禁止，也不能重新分类。 1.Enable remarks：使能注意信息勾选则允许编译器产生remark注意诊断信息。 2.Suppress these diagnostics：禁止显示这些（指定）诊断信息比如：我们希望禁止显示（输出）Pa091和Pe001这两类信息，可以在此写入【Pa091, Pe001】。 3.Treat these as remarks：将这些（指定）信息作为注意信息显示比如：我们希望将Pe177这类警告信息作为注意信息显示，只需要在此输入Pe177即可。 4.Treat these as warnings：将这些（指定）信息作为警告信息显示与上面第3点同理。 5.Treat these as errors：将这些（指定）信息作为错误信息显示与上面第3点同理。 6.Treat all warnings as errors：将所有警告作为错误处理（并显示） 5.8 MISRA C标准 MISRA-C:1998和MISRA-C:2004年的选项用于编译器和链接器。General Options普通选项与C/C++ Compiler编译器中的MISRA C选项配置相关联，本文章不讲述，后续单独讲述关于MISRA C的内容。 5.9 Extra Options额外选项配置这里就不贴图了，主要就是使用命令行对编译相关选项进行配置。具体命令后续抽空单独整理成相关文章。 六、Assembler：汇编器这一章节内容和上面C/C++编译器原理类似，只是这里是针对汇编。 6.1 Language语言 1.User symbols are case sensitive：用户符号区分大小写 2.Enable multibyte support：使能多字节的支持 3.Allow mnemonics in first column：允许在第一列中使用助记符 4.Allow directives in first column：允许在第一列中使用指令 5.Macro quote characters：宏引用字符选择有四种字符可选择：A.()B.[]C.{}D.&lt;&gt; 6.2 Output编译输出这里就不贴图了，和上面一章节C/C++的Output一样，Generate debug information：生成（输出）调试信息，如果需要调试汇编，此选项需勾选。 6.3 List列表 1.Output list file：输出列表文件A.Do not include diagnostics：不包括诊断B.Include cross-reference：包括交叉引用C.List macro definitions：宏定义列表D.Disable macro expansion：禁用宏扩展E.List only assembled parts：只列出部分列表（除假条件汇编）F.Truncate multiline data field：截断多行数据字段 6.4 Preprocessor预处理 1.Ignore standard include directories：忽略标准包含目录（路径） 2.Additional include directories：添加路径 3.Preinclude file：预包含文件 4.Defined symbols：预定义 5.Preprocessor output to file：预处理输出到文件 提示：这里选项和上面C/C++中预处理类似，只是这里针对的是汇编。 6.5 Diagnostics诊断这里就不贴图了，本节Diagnostics诊断几乎与上一章节中Diagnostics诊断一样，只是这里针对的是汇编，详情请参看上一章节C/C++的Diagnostics诊断描述。 6.6 Extra Options额外选项配置这里就不贴图了，本节Extra Options额外选项配置同样与上一章节一样。 七、Output Converter输出转换器7.1 Output输出 1.Generate additional output：使能生成额外的输出（文件） 2.Output format：输出格式A.MotorolaB.Intel-extendedC.BinaryD.Simple 3.Output file：输出文件Override default：默认覆盖 八、说明1.因IAR各种IDE针对的处理器差异较大，所以关于节点选项的配置差异也较大。本文讲述关于EWSTM8的许多节点选项可能在其他IDE中没有。2.该文档仅供个人学习使用，版权所有，禁止商用。3.本教程收录于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看全系列教程。 九、最后我的博客：http://www.strongerhuang.com我的GitHub：https://github.com/EmbeddedDevelop 更多精彩内容我将第一时间在微信公众号里面分享， 如果不想错过,可以关注我的微信公众号。]]></content>
      <categories>
        <category>EWSTM8系列教程</category>
      </categories>
      <tags>
        <tag>IAR</tag>
        <tag>STM8</tag>
        <tag>EWSTM8</tag>
        <tag>IAR for STM8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EWSTM8系列教程05_菜单概述（二）]]></title>
    <url>%2FIAR%2FEWSTM8%2FEWSTM8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
    <content type="text"><![CDATA[一、写在前面 在上一篇【EWSTM8系列教程04_菜单概述（一）】文章中概述了File文件、Edit编辑、View视图、Project工程前面四个重要菜单的内容。 本文讲述Debug调试、ST-Link下载调试工具、Tools工具、Window窗口、Help帮助后面五个菜单的内容。 其中“Debug调试”菜单是在调试模式时才有（编辑模式下没有）。“下载调试工具”是由你工程目标配置所决定的（上面截图是配置ST-Link）。 本文主要概述后五个菜单的内容： 1.Debug调试菜单 2.下载调试工具菜单 3.Tools工具菜单 4.Window窗口菜单 5.Help帮助菜单 本文章收录于【EWSTM8系列教程】，在我的博客分类“EWSTM8系列教程”也能查找到。 为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看。 二、Debug调试菜单 Debug调试菜单只有在调试模式下才会显示出来，里面大部分常用子菜单会显示在【调试工具栏】，可以参看【EWSTM8系列教程03_主窗口、工具栏的概述】文章中“3.2调试工具栏”的章节。 1.Go：全速运行 F52.Break：停止运行3.Reset：复位4.Stop Debugging：结束调试 Ctrl + Shift + D5.Step Over：逐行运行 F106.Step Into：跳入运行 F117.Step Out：跳出运行 Shift + F118.Next Statement：运行到下一语句9.Run to Cursor：运行到光标行10.AutoSetp：自动按步骤运行11.Set Next Statement：设置下一条语句12.C++ Exceptions：C++异常13.Memory：内存保存/复位14.Refresh：调试更新15.Logging：调试日志 Debug菜单前面10个子菜单比较常用，也比较重要。这里再文字解释其中几个子菜单的含义，教程后面针对性详细讲述其中子菜单内容。 Step Over、Step Into、Step Out这三个子菜单都具有“逐步/单步”调试的意思。Step Into遇到函数会进入函数执行，而Step Over则不会进入函数。Step Out是跳出当前函数。 Run to Cursor运行到光标行：在暂定状态，将光标放在程序某一行，执行该操作程序运行到你所在行则会停下来（当然，如果那一行程序永远都执行不到，则程序一直执行，直到你执行其他操作）。 AutoSetp自动按步骤运行：可以设置按照指定方式（Step Over、Step Into）、 间隔时间自动运行。 三、下载调试工具菜单 这个菜单的内容会随你工程配置的下载调试器改变而改变，而不同下载调试器的子菜单内容也不一样，如下图： 可以看见我上面截图中两种类型（ST-Link和Simulator）菜单中的子菜单内容不一样。 这个菜单里面的内容使用频率相对较低，而目前来说主要是选择ST-Link来下载调试。下面概述一下ST-Link下各子菜单内容。 1.Leave Target Runing：离线运行（离开目标运行）2.Disable Interrupts When Stepping：当单步调试时禁止中断3.Option bytes：选项字4.Data Sample Setup：数据采样设置5.Data Sample：数据样本6.Sampled Graphs：采样图7.Breakpoint Usage：使用断点 四、Tools工具菜单Tools工具菜单包含了IDE相关的一些配置，包括字体、快捷键、语言、编辑、消息、工程等一系列配置。 1.Options：工具配置选项2.Filename Extension：文件扩展名3.Configure Viewers：配置预览4.Configure Custom Argument Variables：配置自定义参数变量5.Configure Tools：配置工具 4.1 Options工具配置选项Options工具配置选项是比较重要的一个子菜单，里面包含了我们字体大小、颜色、快捷键、工程输出信息等一系列比较重要且实用的内容。本文重点在于概述菜单内容，该系列教程后面会详细讲述里面具体内容。 五、Window窗口菜单Window窗口菜单需要和View视图菜单具有相似的地方（像打开/关闭工具栏，IAR之前版本就是在View视图菜单操作），但需要区分开来。 Window窗口菜单为操作IDE窗口和改变它们在屏幕上排列的一个菜单。 1.Close Document：关闭当前活动的文档编辑窗口 Ctrl + F42.Close Window：关闭当前活动的IDE窗口（工程、参考、浏览等窗口）3.Split：拆分窗口4.Move Tab to New Vertical Editor Window：移动选项卡到新的垂直编辑器窗口5.Move Tab to New Horizontal Editor Window：将选项卡移动到新的水平编辑器窗口6.Move Tab to the Next Window：将选项卡移到下/后一个窗口7.Move Tab to the Previous Window：将选项卡移动到上/前一个窗口8.Close All Tabs Except Active：关闭除活动以外的所有选项卡9.Close All Tabs to the Right of Active：关闭活动右边的所有选项卡10.Close All Editor Tabs：关闭所有选项卡编辑11.Toolbars：工具栏12.Status bar：状态栏 5.1 拆分窗口Split拆分窗口就是将一个窗口拆分为上下左右四个窗口，各个窗口大小可自由分配，如下图： 5.2 移动选项卡到Move Tab to New Vertical Editor Window和Move Tab to New Horizontal Editor Window类似，一个是垂直，一个是水平，下图为垂直效果： 5.3 工具栏、状态栏这两个子菜单的内容之前IAR版本是放在View视图菜单下面，它俩的功能类似视图菜单的功能，打开/关闭的功能。 注意：工具栏菜单在编辑模式下只有Main主工具栏，在调试模式下会增加Debug调试工具栏，如下图： 六、Help帮助菜单这个菜单里面内容比较实用哦，从字面意思理解“帮助”，我写的大部分内容都是参考这里面的，其实重要的就是帮助文档。 6.1 帮助文章Content内容、Index索引、Search搜索是对应帮助文档里面的内容，如下如： 6.2 Guide指导手册如上图子菜单中，红色框住的那一部分都属于IDE的指导手册，包含版本历史信息、管理、参考信息等。 6.3 其它IAR on the Web：IAR网站Information Center：信息中心Lincense Manager：许可证管理，注册的时候就是这里进入About：关于软件的版本信息 七、说明1.上面内容只是概述，相对都比较粗略，更详细的内容，请参看该系列教程后续文章。2.该文档仅供个人学习使用，版权所有，禁止商用。3.本教程收录于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看全系列教程。 八、最后我的博客：http://www.strongerhuang.com我的GitHub：https://github.com/EmbeddedDevelop 更多精彩内容我将第一时间在微信公众号里面分享， 如果不想错过,可以关注我的微信公众号。]]></content>
      <categories>
        <category>EWSTM8系列教程</category>
      </categories>
      <tags>
        <tag>IAR</tag>
        <tag>STM8</tag>
        <tag>EWSTM8</tag>
        <tag>IAR for STM8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EWSTM8系列教程04_菜单概述（一）]]></title>
    <url>%2FIAR%2FEWSTM8%2FEWSTM8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B04_%E8%8F%9C%E5%8D%95%E6%A6%82%E8%BF%B0%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
    <content type="text"><![CDATA[一、写在前面 IAR软件针对不同处理器存在多个版本，比如EWARM、EWMSP430、EWSTM8等，但为了让软件在使用上“兼容”，IAR推出的多个版本软件在使用上很多地方都有相似之处。因此，本文针对EWSTM8讲述的大部分内容也适用于IAR其他系列软件。 由于菜单内容较多，我将其分为“菜单概述（一）”和“菜单概述（二）”两篇文章来讲述。为了使文章内容精简，下面大部分菜单内容只简单概述，该系列教程后面文章会逐步深入每一个细节的功能。 本文主要概述前四个菜单的内容： 1.File文件菜单 2.Edit编辑菜单 3.View视图菜单 4.Projcet工程菜单 本文章收录于【EWSTM8系列教程】，在我的博客分类“EWSTM8系列教程”也能查找到。 为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看。 二、主菜单内容 主菜单在不同状态下会有一些差异，比如在编辑模式和调试模式下存在差异，不同调试下载工具也存在差异。 2.1 编辑/调试模式差异在编辑模式下有8个主菜单，在调试模式下会增加Debug调试菜单，共有9个主菜单。 2.2 不同调试下载工具差异上面主菜单中有一个ST-Link菜单选项，其实这个菜单是根据你工程配置选择的调试下载工具改变而改变的。 如在仿真、J-Link、ST-Link下的区别： 三、File文件菜单File文件菜单是比较常见的菜单，主要包含对文件的新建、打开、关闭、打印等一些常见的操作，在编辑和调试模式下完全一样。 1.New File：新建文件 Ctrl + N2.New Workspace：新建工作空间3.Open File：打开文件/工作空间 Ctrl + O4.Open Workspace：打开工作空间5.Open Header/Source File：打开头文件或源文件6.Close：关闭文件7.Save Workspace：保存工作空间8.Save Workspace As：另存工作空间9.Close Workspace：关闭工作空间10.Save：保存文件 Ctrl + S11.Save As：另存文件12.Save All：保存所有文件/工作空间13.Page Setup：打印页面设置14.Print：打印 Ctrl + P15.Recent Files：最近打开文件16.Recent Workspaces：最近打开工作空间17.Exit：退出软件 四、Edit编辑菜单 这个Edit菜单在编辑和调试模式下相同，在编辑的时候使用较多，也比较常用。 这个菜单下面大部分内容和默认主工具栏按钮一样，可以参看我的另一篇文章：EWSTM8系列教程03_主窗口、工具栏的概述. 1.Undo：撤销编辑 Ctrl + Z2.Redo：恢复编辑 Ctrl + Y3.Cut：剪切 Ctrl + X4.Copy：复制 Ctrl + C5.Paste：粘贴 Ctrl + V6.Select All：全选 Ctrl + A7.Find and Replace&gt;Find：查找 Ctrl + F Find and Replace&gt;Find Next：查找下一目标 F3 Find and Replace&gt;Find Previous：查找上一目标 Shift + F3 Find and Replace&gt;Find Next (Selected) ：在选中对象里查找下一目标 Ctrl + F3 Find and Replace&gt;Find Previous (Selected)：在选中对象里查找上一目标 Ctrl + Shift + F3 Find and Replace&gt;Replace：替换 Ctrl + H Find and Replace&gt;Find in Files：在对话框中指定条件查找 Find and Replace&gt;Replace in Files：在对话框中指定条件替换 Find and Replace&gt;Incremental Search：在对话框中查找字符 Ctrl + I8.Navigate&gt;Go To：前往行列 Ctrl + G Navigate&gt;Toggle Bookmark：标记/取消书签 Ctrl + F2 Navigate&gt;Previous Bookmark：跳转到上一个书签 Shift + F2 Navigate&gt;Next Bookmark：跳转到下一个书签 F2 Navigate&gt;Navigate Backward：跳转到上一步 Alt + 左箭头 Navigate&gt;Navigate Forward：跳转到下一步 Alt + 右箭头 Navigate&gt;Go to Definition：跳转到定义 F129.Code Templates&gt;Insert Template：插入模板 Ctrl + Alt + V Code Templates&gt;Edit Templates：编辑模板10.Next Error/Tag：显示下一错误/目标 F411.Previous Error/Tag：显示上一错误/目标 Shift + F412.Complete Word：完型语句 Ctrl + Alt + 空格13.Complete Code：完型类/结构体代码 Ctrl + 空格14.Parameter Hint：参数提示 Ctrl + Shift + 空格15.Match Brackets：括号匹配16.Toggle All Folds：折叠/打开当面编辑代码 Ctrl + Alt + F17.Auto Indent：自动缩进（对齐） Ctrl + T18.Block Comment：块注释 Ctrl + K19.Block Uncomment：块取消注释 Ctrl + Shift + K20.Toggle Breakpoint：添加/取消断点 F921.Enable/Disable Breakpoint：使能/失能断点 Ctrl + F9 上面是简述每一个子菜单的内容（有一部分子菜单和工具栏按钮一样，这里不再详细讲述，可以点击文章链接查看）。下面将详细讲述几个常用、重要的Edit子菜单菜单。 4.1 插入/编辑模板如果你经常使用同样一段代码，就可以使用这个功能。 IAR默认只有if、for这两个模板，我们可以自己添加（编辑）模板，比如添加一个while模板，点击“编辑模板”菜单就可以进入编辑状态，编辑的语法很简单，可以参考自带模板。添加内容如下：1234#TEMPLATE "&amp;Statement&gt;&amp;while"while(1)&#123;&#125; 插入/编辑模板动画效果： 4.2 完形语句完形填空就是词组补全，类似上小学时词语完形填空。比如完整的代码为LED_Initializes（前提是具有这个词组），而实际只需要输入LED_字母就可以补全。 完形填空动画效果： 4.3 自动缩进这个功能比较实用，在你代码比较凌乱（也就是不对齐的情况），使用该功能就可使代码自动对齐。自动缩进是空格（空几格）还是Tab需要在Tools-&gt;Options中配置，后面详细讲述。 自动缩进动画效果： 五、View视图菜单 View这个菜单的意思就是打开（已关闭的）视图窗口，比如我们的工作空间窗口不见了，就可以通过该菜单打开。 由于在调试模式下增加了一些视图窗口，所以在编辑模式和调试模式下存在一些差异。 本节内容简单，参看下面动画效果就很容易理解。但有些视图窗口功能有点相似，可能初学者理解起来比较困难，下面列出视图菜单的内容，接着会讲述一些相似子菜单的区别。 1.Messages&gt;Build：编译信息 Messages&gt;Find in Files：查找信息 Messages&gt;Tool Output：工具信息 Messages&gt;Debug Log：调试信息2.Workspace：工作空间窗口3.Source Browser&gt;Source Browser：浏览源码窗口 Source Browser&gt;References：引用窗口 Source Browser&gt;Declarations：声明窗口 Source Browser&gt;Call Graph：调用图窗口4.C-STAT Message：静态分析窗口5.Breakpoints：调试断点窗口6.Call Stack：调用栈窗口7.Watch：普通查看表达式/变量值窗口8.Live Watch：查看实时表达式/变量值窗口9.Quick Watch：快速查看表达式/变量值窗口10.Auto：自动显示表达式/变量窗口11.Locals：局部变量窗口12.Statics：静态变量窗口13.Memory：内存窗口14.Registers：寄存器窗口15.Disassembly：反汇编窗口16.Stack：堆栈地址窗口17.Symbolic Memory：内存标记窗口18.Terminal I/O：终端窗口19.Macros：宏指令窗口20.Symbols：符号表窗口21.Code Coverage：代码覆盖（利用）率窗口22.Images：图片窗口23.Cores：内核状态窗口 View视图菜单可以打开被关闭了的窗口，打开的窗口也可以随意拖动（后面新增的功能）：上、下、左、右、浮动等。 打开视图窗口并拖动动画效果： 细心的朋友其实会发现，View视图子菜单是进行了分类的（用横线隔开），而分类里面的内容具有相似的地方。下面我将详细讲述一下Watch和Memory这两类。 5.1 Watch类窗口 View视图菜单中Watch、 Live Watch、 Quick Watch、 Auto、 Locals、 Statics这6个子菜单功能其实类似，但各有差异。 6个视图子菜单窗口的显示内容都类似，总共四个属性： Expression：表达式名称，一般指变量和函数等。Value：对应的值；Location：对应所在位置，寄存器、RAM、Flash等。Type：变量/函数类型。 这里可以将6个子菜单再次细分，前面3个菜单分为一类：Watch查看窗口；后面3个菜单分为一类：Atuo自动窗口。 1.Watch普通查看表达式/变量值窗口Watch菜单下面有4个子菜单：Watch1 ~4，但都是一样的，可以分别开4个窗口出来同时查看表达式/变量值。一般这个窗口我们比较常用，添加自己想要查看的变量值。A.通过手动添加需要查看的表达式/变量；B.只有暂停调试才会更新对应的值； 2.Live Watch查看实时表达式/变量值窗口与上面Watch窗口类似，差别在于：A.变量须为静态（全局）;B.变量实时更新（程序在运行时）; 3.Quick Watch快速查看表达式/变量值窗口快速浏览变量窗口主要结合另外一个视图菜单Macro Quicklaunch一起使用，达到精确地控制变量值。 4.Auto：自动显示表达式/变量窗口当程序暂停在某一个地方，自动显示暂停坐在位置的表达式/变量，而不需要像Watch要手动添加。 5.Locals：局部变量窗口这个子菜单和Atuo类似，也是自动显示，区别在于：Locals是显示的局部表达式变量，而静态/全局变量不会显示。 6.Statics：静态变量窗口该子菜单同样具有Atuo的特性，自动显示。但是，它显示的内容是静态变量（静态局部、静态全局、全局变量）。 5.2 Memory类窗口这一类窗口主要是显示内存（ROM、 RAM、 Flash、 外设等）地址的值，同时还包含堆栈、反汇编等与内存相关的内容。 1.Memory内存Memory菜单下面有4个子菜单，包含Memory1~4。都一样，可同时打开4个。严格来说翻译成内存是不正确的，里面的内容其实不是我们常说的内存。见下图： 2.Register寄存器窗口这里不用多说，就是内核里面寄存器，如：SP、 PC等寄存器。 注意：我们常说的外设寄存器不在这里，外设寄存器是有地址的，可以在Memory中查看。 3.Disassembly反汇编反汇编窗口显示了通过C语言汇编出来的具体代码。对分析每一条汇编语言的人有帮助，但相信很小有人仔细研究汇编语言了。 4.Symbolic Memory这个有点不好翻译，简单来说：内存上面有数据，那么就会标记相应的表达式，及对应的数值，而没有数据的则不标记。 还有，被标记的内容就是Menmory中那些，见下图： 六、Projcet工程菜单 工程菜单在实际使用中比较常用，而且内容相对较多，部分内容也相对较复杂。本章节只概述子菜单主要内容，该系列教程后面还会有多篇文章专门讲述里面详细内容。 Project菜单下的子菜单内容在编辑模式和调试模式下一样，但呈现的状态有差异（有的在编辑模式下不可用，有的在调试模式下不可用）。 1.Add Files：添加文件2.Add Group：添加组3.Import File List：导入文件列表4.Add Project Connection：添加工程链接5.Edit Configurations：编辑配置6.Remove：移除工作空间工程7.Create New Project：创建新项目8.Add Existing Project：添加已存在工程9.Options：目标选项配置 Alt + F710.Version Control System：版本控制系统11.Make：编译工程 F712.Compile：编译文件/组 Ctrl + F713.Rebuild All：重新编译14.Clean：清除编译等中间文件15.Batch Build：构建批处理 F816.C-STAT Static Analysis：静态分析17.Stop Build：停止编译 Ctrl + Break18.Download and Debug：下载并调试 Ctrl + D19.Debug without Downloading：调试（不下载）20.Attach to Running Target：附加运行目标21.Make &amp; Restart Debugger：编译并重新调试 Ctrl + R22.Restart Debugger：重新调试 Ctrl + Shift + R23.Download：下载24.SFR Setup：SFR设置25.Open Device Description File：打开设备描述文件26.Save List of Registers：保存寄存器列表 七、说明1.上面内容只是概述，相对都比较粗略，更详细的内容，请参看该系列教程后续文章。2.该文档仅供个人学习使用，版权所有，禁止商用。3.本教程收录于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看全系列教程。 八、最后我的博客：http://www.strongerhuang.com我的GitHub：https://github.com/EmbeddedDevelop 更多精彩文章我将第一时间在微信公众号里面分享， 如果不想错过,可以关注我的微信公众号。]]></content>
      <categories>
        <category>EWSTM8系列教程</category>
      </categories>
      <tags>
        <tag>IAR</tag>
        <tag>STM8</tag>
        <tag>EWSTM8</tag>
        <tag>IAR for STM8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EWSTM8系列教程03_主窗口、工具栏的概述]]></title>
    <url>%2FIAR%2FEWSTM8%2FEWSTM8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B03_%E4%B8%BB%E7%AA%97%E5%8F%A3%E3%80%81%E5%B7%A5%E5%85%B7%E6%A0%8F%E7%9A%84%E6%A6%82%E8%BF%B0.html</url>
    <content type="text"><![CDATA[一、写在前面 为了让初学者更容易掌握IAR这个工具的相关知识，我先从整体概述，再到具体的细节内容。 本文先概述一下默认主窗口界面， 对 IAR 集成开发环境有一个大概的了解，再次概述其中一个常用的 Toolbar 工具栏。 本文主要概述如下两部分内容： 1.主窗口（Main Window） 2.工具栏（Toolbar） 主工具栏概述 调试工具栏概述 工具栏选项配置 本文章收录于【EWSTM8系列教程】，在我的博客分类“EWSTM8系列教程”也能查找到。 为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看。 二、主窗口 为了让大家对 IAR 集成开发环境有一个大概的了解，这里先概述一下（IAR 默认编辑状态） 主界面下各个窗口的含义。 说明：IAR的窗口在编辑模式与调试模式下存在一定差异，本章节主要基于【编辑模式】进行简单的概述，里面详细的内容、以及调试模式下的窗口在该系列教材后续会逐步讲述。 打开IAR工程，一般会出现类似下图的主窗口界面，主要包含6个窗口（如下图）。 Menu Bar：菜单栏相信大家对该窗口都不陌生，但凡一个常规一点的软件，都有诸如File文件、 Edit编辑 、 View视图、Help帮助等这样的一栏窗口，这就是菜单栏窗口。该窗口是 IAR 比较重要的一个窗口，包含IAR 几乎所有操作的内容，在编辑模式和调试模式下存在一些不同，后续会讲述。 Tool Bar：工具栏该窗口是一些常见的快捷按钮，本文下面会讲述。 Workspace Window：工作空间窗口一个工作空间可以包含多个工程，该窗口主要显示工作空间下面工程项目的内容（工程、 组、 源代码文件等）。 如上图窗口中包含多个工程（Project1、 Project2······），可以关注后面讲述新建多个工程的文章。 Edit Window：编辑窗口该窗口不用多解释，就是我们平时编辑代码的窗口。 Message Window：信息窗口该窗口包括编译信息、调试信息、查找信息等一些信息的窗口。 Status Bar：状态栏该窗口包含就绪状态、错误警告数量、光标行列、字符编码、键盘Num锁定等一些状态信息。 三、工具栏 IAR的工具栏Tool Bar共有两种：Main主工具栏和Debug调试工具栏。在编辑（默认）状态下只显示Main主工具栏，在进入调试模式后会增加显示Debug工具栏，如下图： 3.1 主工具栏 在编辑（默认）状态下，只有主工具栏，这个工具栏里面内容也是在编辑状态下常用的快捷按钮。当然，这些按钮的功能基本上都可以通过快捷键来实现。 New Document新建文件 Ctrl + NOpen打开文件 Ctrl + OSave保存文件 Ctrl + SSave All保存所有文件Print打印文件 Ctrl + PCut剪切 Ctrl + XCopy复制 Ctrl + CPaste粘贴 Ctrl + VUndo撤销编辑 Ctrl + ZRedo恢复编辑 Ctrl + YQuick Search Text Box快速搜索文本框Find Previous向前查找 Shift + F3Find Next向后查找 F3Find查找（增强） Ctrl + FReplace替换 Ctrl + HGo to前往行列 Ctrl + GToggle Bookmark标记/取消书签 Ctrl + F2Previous Bookmark跳转到上一个书签 Shift + F2Next Bookmark跳转到下一个书签 F2Navigate Backward跳转到上一步 Alt + 左箭头Navigate Forward跳转到下一步 Alt + 右箭头Compile编译当前（文件、组） Ctrl + F7Make编译工程（构建） F7Stop Build停止编译 Ctrl + BreakToggle Breakpoint编辑/取消断点 Ctrl + F9Download and Debug下载并调试 Ctrl + DDebug without Downloading调试（不下载）Toolbar Options工具栏选项（下面3.3节重点讲述） 上面只是简述了各个快捷按钮的基本意思，下面再详细说一下部分常用按钮的具体意思。 A.书签书签在编译的时候比较实用，可以快速找到标记书签所在行。可以使用快捷按钮，当然，平时推荐使用快捷键（F2、 Ctrl + F2、 Shift + F2）。 书签动画效果： B.跳转到上/下一步跳转是在编译代码通过跟踪代码留下的“脚步”，我们可以通过该方式找到这些“脚步”，同样也可以通过快捷键操作。 跳转到上/下一步动画效果： C.下载和调试很多人问“Download and Debug”和“Debug without Downloading”这两个按钮的区别是什么？答：Download and Debug：是下载代码之后再进行调试。Debug without Downloading：只调试不下载。也就是说你之前下载过了代码，只需要再点击该按钮即可，否则会出现错误。 这两个按钮图标在编辑和调试模式下略有点差异，在调试模式下可以再次下载/调试。 3.2 调试工具栏调试工具栏只有在调试状态下才会出现的一行快捷按钮，在编辑状态下，没有这些按钮。 当点击调试按钮，进入调试状态之后，菜单栏会增加一个Debug菜单（里面内容和调试工具栏类似）。同样，工具栏也会增加一个调试工具栏，如下图： 从左往右依次是：Step Over逐行运行 F10Step Into跳入运行 F11Step Out跳出运行 Shift + F11Next Statement运行到下一条语句Run to Cursor运行到光标行Go全速运行 F5Break停止运行Reset复位 逐行运行也叫逐步运行，跳入运行也叫单步运行，运行到下一语句和逐行运行类似。 3.3 工具栏选项配置这一小节主要教大家如何自定义工具栏（图标）按钮。假如我们不想要工具栏中有些按钮（如：复制、粘贴），或我们又想添加一个工具按钮，怎么实现呢？ A.进入自定义工具栏 B.删除工具栏如删除复制按钮：按住复制按钮 -&gt; 拖出工具栏即可。 删除按钮动画效果： C.添加工具按钮如：添加一个工具配置按钮，在命令中找到【工具配置】按钮，按住 -&gt; 拖到工具栏（你想要到位置）即可。 添加按钮动画效果： D.添加显示文本标签显示文本标签，也就是图标下面显示该图标按钮的意思，这样方便一眼明白含义，同时可以增大显示距离，点击操作也比较方便。当然，也会占用一定显示区域。如下图： 显示文本标签动画效果： F.放大图标这个很好理解，图标太小，将其放大，如下图： 放大图标动画效果： 四、说明1.上面内容只是概述，相对都比较粗略，更详细的内容，请参看该系列教程后续文章。2.该文档仅供个人学习使用，版权所有，禁止商用。3.本教程收录于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看全系列教程。 五、最后我的博客：http://www.strongerhuang.com我的GitHub：https://github.com/EmbeddedDevelop 更多精彩文章我将第一时间在微信公众号里面分享， 如果不想错过,可以关注我的微信公众号。]]></content>
      <categories>
        <category>EWSTM8系列教程</category>
      </categories>
      <tags>
        <tag>IAR</tag>
        <tag>STM8</tag>
        <tag>EWSTM8</tag>
        <tag>IAR for STM8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EWSTM8系列教程02_新建基础软件工程]]></title>
    <url>%2FIAR%2FEWSTM8%2FEWSTM8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B02_%E6%96%B0%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html</url>
    <content type="text"><![CDATA[一、写在前面 我们常说的IAR for STM8，其实指的就是EWSTM8，它的全称是IAR Embedded Workbench for STM8。 本文针对初学者，利用EWSTM8集成开发环境，基于STM8S标准外设库新建基础软件工程。（后面会讲述如何新建多工程、多目标） 本文分如下内容来讲述： 1.准备工作 下载安装EWSTM8 下载STM8标准外设库 整理工程文件夹 2.新建软件工程 创建工程 添加文件 配置工程 本文章收录于【EWSTM8系列教程】，在我的博客分类“EWSTM8系列教程”也能查找到。 为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看。 二、准备工作 俗话说“磨刀不误砍柴工”，做好了准备工作，后面新建基础软件工程的工作就很容易实现了。 2.1 下载安装EWSTM8 详情请参看该系列教程上一篇文章【EWSTM8系列教程01_IAR介绍、下载、安装和注册】。 2.2 下载STM8标准外设库 本文基于STM8标准外设库（STM8S_StdPeriph_Lib）来新建基础软件工程，所以需要下载标准库。如果你不使用标准外设库（如：使用寄存器）开发，本节内容可以略过。 A.官网下载https://www.st.com/content/st_com/en/products/embedded-software/mcus-embedded-software/stm8-embedded-software/stsw-stm8069.html 提示：在官网下载需要登录账户，如果嫌麻烦可以在ST中文网，或下面百度网盘下载（和官网一样）。 B.百度网盘http://pan.baidu.com/s/1qYbBKMK 提示：如果以上链接失效， 可以关注微信公众号， 获取更新链接。 2.3 整理工程文件夹 这一小节的内容可根据自己习惯来整理，我整理的文件及文件夹结构是按照常规的整理方式。你如果觉得合理，可以直接引用；如果觉得不习惯这个结构方式，可以自己整理。 本节所讲述的文件夹及里面的内容不是本文新建软件工程的重点，若需要详细了解库文件、文件夹及里面源代码内容，可以参看我的另一教程【STM8S标准外设库教程】。 A.新建工程文件夹首先建立一个存放工程文件的文件夹：STM8S_Demo B.提取ST标准外设库文件解压下载的标准外设库（STM8S_StdPeriph_Lib）可以看见下面四个文件夹和参考资料： _htmresc：图片文件夹（不提取）Libraries：标准驱动库（提取大部分）Project： 示例工程（提取少部分）Utilities：公共代码、评估板代码（不提取）MCD-ST Liberty：软件许可协议（不提取）Release_Notes：发行说明stm8s-a_stdperiph_lib_um：库说明文档 ST官网下载的标准外设库里面有很多例程源代码和其他文件，但我们主要使用Libraries目录下STM8S_StdPeriph_Driver源代码，其他参考文件用于开发学习时参考使用。1.拷贝Libraries文件夹到我们的STM8S_Demo工程文件夹下面。2.拷贝STM8S_StdPeriph_Lib\Project\STM8S_StdPeriph_Template下面stm8s_conf.h、stm8s_it.c和stm8s_it.h三个文件到我们STM8S_Demo \ App下面。 C.新建文件夹和文件除了标准外设库文件之外，我们需要新建存放自己代码的文件和文件夹。我这里主要需要新建4个文件夹：App: 应用程序代码Bsp: 底层驱动代码Doc: 说明文档Project：工程文件 在自己新建的文件夹下面还需要新建自己的文件，文件里面添加必要的源代码文件。我提供的Demo工程，实现的功能比较简单，就是一个LED闪烁。本文重点讲述建立工程的过程，这里不描述源代码，具体可以自己下载查看。 上面几个步骤完成之后，我们就可以看到在工程文件夹“STM8S_Demo”下面整理的文件夹（如下图）： 至此，准备工作算完成了，上面提取的文件、新建的文件里面具体的内容请下载Demo工程查看（文末下载）。 三、新建软件工程 新建一个简单、基础的软件工程大概需要有三个步骤：创建工程、添加文件和配置工程。 上面的准备工作做好之后，就可以在Project文件夹下新建自己的软件工程了，下面将一步一步讲述从零开始新建一个软件工程的详细过程。 3.1 创建工程创建工程：就是新建工作空间及工程，步骤比较简单。 A.打开软件，新建工作空间（File -&gt; New Workspace） B.新建工程（Project -&gt;Create New Project） C.创建一个空工程 D.选择保存路径、名称 E.空基础工程 F.保存工作空间（File -&gt; Save Workspace） 至此，一个空的基础工程就创建好了，需要进一步添加文件到工程和配置工程。 3.2 添加文件 准确的来说，是在上面创建的空工程中添加组（文件夹）和添加源代码文件。简单的说，就是将你自己的源代码文件（前面提取的库、新建的文件等）添加到工程中。 这里的工程项目管理可根据自己的想法来定义（类似于自己分类、命名文件夹和文件），我这里按照常规的方式进行管理项目。 为了方便大家理解，我们单级目录方式分组，先在工程中添加组，再在组中添加源代码文件。 A.工程中添加组 B.填写组的名称 C.组中添加文件 D.按住Ctrl，鼠标选中要添加的文件 E.重复上面4个步骤，直到添加完成 3.3 配置工程 配置工程对于初学者来说，大部分内容只需要默认即可，这里只讲述几个常见的配置，能满足基本的功能。更多配置将在该教程后面的文章中讲述。 A.进入配置选项 B.选择器件 C.库配置Library Configration如果需要使用某些标准的库函数接口（如我们使用的printf 、scanf），就需要选择Full（见下图）。 D.预处理Preprocessor（添加路径）添加的路径最好是相对路径，而不是绝对路径。使用绝对路径工程位置改变之后就找不到文件，就会出错。 1.可以点击按钮选择路径；2.或者通过复制文件路径进行配置。 ···直到完成 E.预处理Preprocessor（预定义）这里的预定义类似于在源代码中的#define xxx 这种宏定义。这里的STM8S103可以在stm8s.h中打开即可。 F.输出Hex文件很多初学的朋友都会问怎么输出 Hex（ 可直接下载的程序文件），只需要按照下面配置即可输出Hex文件。 G.选择下载调试工具根据自己情况选择的下载调试工具。 至此，一个基本工程的配置算完成了。如果源代码正确，就可以编译、下载、调试了。 四、下载1.STM8标准外设库百度网盘下载地址：http://pan.baidu.com/s/1qYbBKMK 2.本文完整代码工程（可运行）下载地址：链接：https://pan.baidu.com/s/1MyAOZcOn04AnRq8zNZrL6w密码：3lkl 提示：如果下载链接失效， 可以关注微信公众号， 获取更新链接。 五、说明1.上面新建基础软件工程主要是针对初学者，写的比较基础的。2.该文档仅供个人学习使用，版权所有，禁止商用。3.本教程收录于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看全系列教程。 六、最后我的博客：http://www.strongerhuang.com我的GitHub：https://github.com/EmbeddedDevelop 更多精彩文章我将第一时间在微信公众号里面分享， 如果不想错过,可以关注我的微信公众号。]]></content>
      <categories>
        <category>EWSTM8系列教程</category>
      </categories>
      <tags>
        <tag>IAR</tag>
        <tag>STM8</tag>
        <tag>EWSTM8</tag>
        <tag>IAR for STM8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EWSTM8系列教程01_EWSTM8介绍、下载、安装和注册]]></title>
    <url>%2FIAR%2FEWSTM8%2FEWSTM8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B01_IAR%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E6%B3%A8%E5%86%8C.html</url>
    <content type="text"><![CDATA[一、写在前面 我们常说的IAR for STM8，其实指的就是EWSTM8，它的全称是IAR Embedded Workbench for STM8。 本文章收录于【EWSTM8系列教程】，在我的博客分类“EWSTM8系列教程”也能查找到。 为了方便大家平时公交、地铁、外出办事也能用手机随时随地查看该教程，该系列教程也同步更新于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看。 二、IAR介绍2.1 关于IAR IAR是一家公司的名称，也是一种集成开发环境（IDE）的名称，我们平时所说的IAR主要是指的集成开发环境，当然，我们也称它为一种工具：IAR开发工具。 IAR这家公司的发展也是经历了一系列历史变化，从开始针对8051做C编译器，逐渐发展至今，已经是一家庞大的、技术力量雄厚的公司。而IAR集成开发环境也是从单一到现在针对不同处理器，拥有多种IAR版本的集成开发环境。 IAR针对不同内核处理器，有不同的集成开发环境，本文讲述的只是其中的一款集成开发环境EWSTM8，而IAR拥有多个版本，支持的芯片有上万种，详情请参看官网：https://www.iar.com/device-search/#!?tab=devices 2.2 关于EWSTM8 EWSTM8全称是IAR Embedded Workbench for STM8，其实也是我们常说的IAR for STM8，即（用于开发STM8的）嵌入式工作平台。 Embedded Workbench for STM8是IAR Systems公司为 STM8 微处理器开发的一个集成开发环境(简称IAR EWSTM8，也简称为IAR for STM8)。比较其他的 STM8 开发环境，IAR EWSTM8 具有入门容易、使用方便和代码紧凑等特点。 2.3 EWSTM8支持芯片现在（2018年07月）EWSTM8最新版本V3.10，支持市面上所有的STM8系列芯片，目前有一百多种（184种），具体可以到IAR官方网站查看。 https://www.iar.com/device-search/#!?tab=devices 三、下载EWSTM8这个软件安装包推荐大家到官网下载最新版本。当然，如果你嫌麻烦，也可以到我百度网盘下载（含老版本，定期更新）。 3.1 官方下载目前（2018年07月）EWSTM8官方最新版本是V3.10。下载地址：https://www.iar.com/iar-embedded-workbench/#!?currentTab=free-trials 3.2 网盘下载为了方便大家下载，我将其安装包上传到百度云盘。当然，我会定期更新，里面也包含之前老版本，建议大家下载最新那一个版本。 百度网盘地址：http://pan.baidu.com/s/1slF5kYx 提示：如果网盘链接失效，可以关注微信公众号，获取更新链接。 四、安装 EWSTM8集成开发环境的安装比较简单（基本上就是一路Next下去）。本章节主要针对初学者，按照常规安装教程（图文）讲述一下吧，以下载最新的“EWSTM8-3104-Autorun.exe”软件安装包为例来讲述。 4.1 准备过程A.双击EWSTM8安装包，准备安装 B.选择EWSTM8安装 4.2 安装向导、配置C.进入安装向导 D.选择接受许可 E.选择安装路径 安装路径一般默认，你也可以修改到你指定路径下。 F.选择需要安装的驱动 一般也默认都勾选。提示：这里勾选了的驱动，会在后面安装。默认有多个，所以后面会安装多个。 G.选择安装文件夹 默认新建一个文件夹。 4.3 安装EWSTM8H.安装准备就绪 如果准备好之后，点击Install进入安装过程。如果前面配置不对，可以点击Back返回修改。 I.等待安装完成 4.4 安装驱动EWSTM8安装完成之后，接下来就是安装驱动，如果上面勾选多个，那么这里就会弹出多个驱动等待安装（与上面配置有关）。 J.安装驱动提示 K.准备安装过程 L.安装ST-Link···这里会安装多个驱动，大致都差不多，根据提示操作就行。··· M.安装完成 安装完成之后，可能会弹出注册许可向导（License Wizard），此时，选择取消 -&gt; 确定就行。 五、注册EWSTM8是一款收费的商业软件，若你用于商业请购买正版。如果是个人学习，可以使用官方30天的免费试用版本。 本文主要针对个人学习的朋友而言，进行非商业用途的使用。以下所有注册信息来自网络，如有侵权，请联系作者删除。 上面百度网盘提供下载的地址里面有一个“IAR注册机.zip”压缩文件，本章将利用该注册机进行注册。 IAR的注册过程有点绕，先讲一下主要步骤：打开IAR软件 -&gt; 注册界面 -&gt; 到输入许可号 -&gt; 转到注册机（获取许可号） -&gt; 回来粘贴许可号 -&gt; 保存激活信息 -&gt; 到等待激活 - &gt; 转到注册机（利用激活信息）生成激活文件 -&gt; 回来打开激活文件注册 -&gt; 成功。 5.1 打开软件 -&gt; 进入注册许可管理界面A.打开安装好的EWSTM8软件：Help -&gt; License Manager进入许可管理 B.弹出许可向导：1取消 -&gt; 2确定即可 C.进入许可管理 此时，看到有个红色的“×”，说明未注册。 5.2 打开离线激活 -&gt; 得到并粘贴许可号D.离线激活方式： License -&gt; Offline Activation 进入离线激活界面 E.打开注册机获取注册号 (1)选择IAR类型（STM8）； (2)获取许可号； (3)复制许可号 F.粘贴许可号 5.3 保存激活信息 -&gt; 到等待激活G.生成并保存激活信息ActivationInfo.txt H.进入等待激活界面 5.4 生成激活文件 -&gt; 激活I.生成激活文件 转到注册机：(1)打开前面（路径下）生成的激活信息文件(2)点击激活 -&gt; 保存激活文件（ActivationResponse.txt）到相同路径下。 J.激活 -&gt; 完成 K.弹出提示 L.查看状态 至此，注册已经完成了。 六、说明1.该文档仅供个人学习使用，版权所有，禁止商用。2.本文主要针对个人学习使用的朋友，若你是商业用途，建议购买正版软件。3.本教程收录于微信公众号【EmbeddedDevelop】，关注微信公众号回复【EWSTM8系列教程】即可查看全系列教程。 七、最后我的博客：http://www.strongerhuang.com我的GitHub：https://github.com/EmbeddedDevelop 更多精彩文章我将第一时间在微信公众号里面分享， 如果不想错过,可以关注我的微信公众号。]]></content>
      <categories>
        <category>EWSTM8系列教程</category>
      </categories>
      <tags>
        <tag>IAR</tag>
        <tag>STM8</tag>
        <tag>EWSTM8</tag>
        <tag>IAR for STM8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[公告]]></title>
    <url>%2F%E8%AF%B4%E6%98%8E%E6%96%87%E7%AB%A0%2F%E5%85%AC%E5%91%8A.html</url>
    <content type="text"><![CDATA[一、博客搬家了 欢迎您来到我个人的新博客网站··· 1.1 原CSDN博客 由于我原来的【CSDN博客】文章比较杂乱，也没有整理归类，不方便查找，文章中提供的代码工程下载地址都失效了。还有个主要原因，在别人地盘写文章总觉得不爽。所以，决定自己搭建博客，在自己的地盘写出属于自己的博客文章。 我的CSDN博客目前没有更新文章了，最后一次更新文章应该是停留在去年八九月份的样子，所以那个时候都有计划搭建属于自己的博客了。后续可能很少在CSDN上面更新文章了（兴许哪一天高兴了，会整理一下CSDN博客）。 原CSDN博客主页：https://blog.csdn.net/ybhuangfugui 1.2 我的新博客 其实，我去年就打算自己搭建博客，但是由于工作原因，没有足够的时间（自己搭建博客也是挺折腾的），一直耽搁了。直到今年，终于狠下心，搭建成功了属于自己的个人博客网站。 个人新博客主页：http://www.strongerhuang.com 二、后续计划 我的博客文章正在筹备更新中。。。关注我微信公众号：strongerhuang，随时查看最新通知。]]></content>
      <categories>
        <category>说明文章</category>
      </categories>
      <tags>
        <tag>说明</tag>
        <tag>公告</tag>
      </tags>
  </entry>
</search>
